{"version":3,"sources":["ng://carbon-components-angular/search/search.component.ts","ng://carbon-components-angular/search/search.module.ts"],"sourcesContent":["import {\n\tComponent,\n\tInput,\n\tEventEmitter,\n\tOutput,\n\tHostBinding,\n\tElementRef,\n\tHostListener,\n\tViewChild\n} from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from \"@angular/forms\";\nimport { I18n } from \"carbon-components-angular/i18n\";\n\n/**\n * [See demo](../../?path=/story/components-search--basic)\n *\n * <example-url>../../iframe.html?id=components-search--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-search\",\n\ttemplateUrl: \"search.component.html\",\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: Search,\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class Search implements ControlValueAccessor {\n\t/**\n\t * Variable used for creating unique ids for search components.\n\t */\n\tstatic searchCount = 0;\n\n\t@HostBinding(\"class.bx--form-item\") get containerClass() { return !(this.toolbar || this.expandable); }\n\n\t/**\n\t * `light` or `dark` search theme.\n\t */\n\t@Input() theme: \"light\" | \"dark\" = \"dark\";\n\t/**\n\t * Size of the search field.\n\t */\n\n\t@Input() set size(value: \"sm\" | \"md\" | \"xl\") {\n\t\tthis._size = value;\n\t}\n\n\tget size(): \"sm\" | \"md\" | \"xl\" {\n\t\treturn this._size;\n\t}\n\t/**\n\t * Set to `true` for a disabled search input.\n\t */\n\t@Input() disabled = false;\n\t/**\n\t * Set to `true` for a toolbar search component.\n\t */\n\t@Input() toolbar = false;\n\t/**\n\t * Set to `true` to make the search component expandable.\n\t * `expandable` would override `toolbar` property behaviours.\n\t */\n\t@Input() expandable = false;\n\t/**\n\t * Set to `true` for a loading search component.\n\t */\n\t@Input() skeleton = false;\n\t/**\n\t * Set to `true` to expand the toolbar search component.\n\t */\n\t@Input() active = false;\n\t/**\n\t * Specifies whether the search component is used in the table toolbar.\n\t */\n\t@Input() tableSearch = false;\n\t/**\n\t * Sets the name attribute on the `input` element.\n\t */\n\t@Input() name: string;\n\t/**\n\t * The unique id for the search component.\n\t */\n\t@Input() id = `search-${Search.searchCount}`;\n\t/**\n\t * Reflects the required attribute of the `input` element.\n\t */\n\t@Input() required: boolean;\n\t/**\n\t * Sets the value attribute on the `input` element.\n\t */\n\t@Input() value = \"\";\n\t/**\n\t * Sets the autocomplete attribute on the `input` element.\n\t * For reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values\n\t */\n\t@Input() autocomplete = \"on\";\n\t/**\n\t * Sets the text inside the `label` tag.\n\t */\n\t@Input() label = this.i18n.get().SEARCH.LABEL;\n\t/**\n\t * Sets the placeholder attribute on the `input` element.\n\t */\n\t@Input() placeholder = this.i18n.get().SEARCH.PLACEHOLDER;\n\t/**\n\t * Used to set the `title` attribute of the clear button.\n\t */\n\t@Input() clearButtonTitle = this.i18n.get().SEARCH.CLEAR_BUTTON;\n\t/**\n\t * Title for the search trigger\n\t */\n\t@Input() searchTitle = \"\";\n\t/**\n\t * Sets the aria label on the `div` element with the `search` role.\n\t */\n\t@Input() ariaLabel: string;\n\t/**\n\t * Emits an event when value is changed.\n\t */\n\t@Output() valueChange = new EventEmitter<string>();\n\t@Output() open = new EventEmitter<boolean>();\n\t/**\n\t * Emits an event when the clear button is clicked.\n\t */\n\t@Output() clear = new EventEmitter();\n\t/**\n\t * Emits an event on enter.\n\t */\n\t@Output() search = new EventEmitter<string>();\n\n\t// @ts-ignore\n\t@ViewChild(\"input\", { static: false }) inputRef: ElementRef;\n\n\t/**\n\t * Sets `true` when composing text via IME.\n\t */\n\tprotected isComposing = false;\n\n\tprotected _size: \"sm\" | \"md\" | \"xl\" = \"md\";\n\n\t/**\n\t * Creates an instance of `Search`.\n\t * @param i18n The i18n translations.\n\t */\n\tconstructor(protected elementRef: ElementRef, protected i18n: I18n) {\n\t\tSearch.searchCount++;\n\t}\n\n\t/**\n\t * This is the initial value set to the component\n\t * @param value The input value.\n\t */\n\tpublic writeValue(value: any) {\n\t\tthis.value = value;\n\t}\n\n\t/**\n\t * Sets a method in order to propagate changes back to the form.\n\t */\n\tpublic registerOnChange(fn: any) {\n\t\tthis.propagateChange = fn;\n\t}\n\n\t/**\n\t * Registers a callback to be triggered when the control has been touched.\n\t * @param fn Callback to be triggered when the search input is touched.\n\t */\n\tpublic registerOnTouched(fn: any) {\n\t\tthis.onTouched = fn;\n\t}\n\n\t/**\n\t * Called when search input is blurred. Needed to properly implement `ControlValueAccessor`.\n\t */\n\tonTouched: () => any = () => {};\n\n\t/**\n\t * Method set in `registerOnChange` to propagate changes back to the form.\n\t */\n\tpropagateChange = (_: any) => {};\n\n\t/**\n\t * Called when text is written in the input.\n\t * @param search The input text.\n\t */\n\tonSearch(search: string) {\n\t\tif (this.isComposing) { // check for IME use\n\t\t\treturn;\n\t\t}\n\t\tthis.value = search;\n\t\tthis.doValueChange();\n\t}\n\n\t/**\n\t * Called on enter.\n\t */\n\tonEnter() {\n\t\tthis.search.emit(this.value);\n\t}\n\n\t/**\n\t * Called when clear button is clicked.\n\t */\n\tclearSearch(): void {\n\t\tthis.value = \"\";\n\t\tthis.clear.emit();\n\t\tthis.propagateChange(this.value);\n\t}\n\n\tdoValueChange() {\n\t\tthis.valueChange.emit(this.value);\n\t\tthis.propagateChange(this.value);\n\t}\n\n\topenSearch() {\n\t\tthis.active = true;\n\t\tthis.open.emit(this.active);\n\t\tsetTimeout(() => this.inputRef.nativeElement.focus());\n\t}\n\n\t@HostListener(\"keydown\", [\"$event\"])\n\tkeyDown(event: KeyboardEvent) {\n\t\tif (this.toolbar || this.expandable) {\n\t\t\tif (event.key === \"Escape\") {\n\t\t\t\tthis.active = false;\n\t\t\t} else if (event.key === \"Enter\") {\n\t\t\t\tthis.openSearch();\n\t\t\t}\n\t\t}\n\t}\n\n\t@HostListener(\"focusout\", [\"$event\"])\n\tfocusOut(event) {\n\t\tthis.onTouched();\n\t\tif ((this.expandable || this.toolbar) &&\n\t\t\tthis.inputRef &&\n\t\t\tthis.inputRef.nativeElement.value === \"\" &&\n\t\t\t!(this.elementRef.nativeElement as HTMLElement).contains(event.relatedTarget)) {\n\t\t\tthis.active = false;\n\t\t\tthis.open.emit(this.active);\n\t\t}\n\t}\n\n\t@HostListener(\"focusin\", [\"$event\"])\n\tfocusIn(event) {\n\t\tthis.onTouched();\n\t\t// set input focus if search icon get focus from tab key press event.\n\t\tif ((this.expandable || this.toolbar) &&\n\t\t\tthis.inputRef && !event.relatedTarget &&\n\t\t\t!(this.elementRef.nativeElement as HTMLElement).contains(event.relatedTarget) ) {\n\t\t\tthis.openSearch();\n\t\t}\n\t}\n\n\t/**\n\t * Called when using IME composition.\n\t */\n\t@HostListener(\"compositionstart\", [\"$event\"])\n\tcompositionStart(event) {\n\t\tthis.isComposing = true;\n\t}\n\n\t/**\n\t * Called when IME composition finishes.\n\t */\n\t@HostListener(\"compositionend\", [\"$event\"])\n\tcompositionEnd(event) {\n\t\tthis.isComposing = false;\n\t\tthis.onSearch(this.value + event.data);\n\t}\n}\n","// modules\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { CommonModule } from \"@angular/common\";\n\n// imports\nimport { I18nModule } from \"carbon-components-angular/i18n\";\nimport { Search } from \"./search.component\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n@NgModule({\n\tdeclarations: [\n\t\tSearch\n\t],\n\texports: [\n\t\tSearch\n\t],\n\timports: [\n\t\tFormsModule,\n\t\tCommonModule,\n\t\tI18nModule,\n\t\tIconModule\n\t]\n})\nexport class SearchModule { }\n"],"names":["Search","Object","defineProperty","prototype","this","toolbar","expandable","_size","value","writeValue","registerOnChange","fn","propagateChange","registerOnTouched","onTouched","onSearch","search","isComposing","doValueChange","onEnter","emit","clearSearch","clear","valueChange","openSearch","_this","active","open","setTimeout","inputRef","nativeElement","focus","keyDown","event","key","focusOut","elementRef","contains","relatedTarget","focusIn","compositionStart","compositionEnd","data","searchCount","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","ElementRef","I18n","HostBinding","Input","Output","ViewChild","static","HostListener","i18n","theme","disabled","skeleton","tableSearch","id","autocomplete","label","get","SEARCH","LABEL","placeholder","PLACEHOLDER","clearButtonTitle","CLEAR_BUTTON","searchTitle","EventEmitter","_","SearchModule","NgModule","declarations","exports","imports","FormsModule","CommonModule","I18nModule","IconModule"],"mappings":"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"}