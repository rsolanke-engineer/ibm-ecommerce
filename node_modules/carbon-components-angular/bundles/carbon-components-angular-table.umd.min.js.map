{"version":3,"sources":["ng://carbon-components-angular/table/toolbar/table-toolbar.component.ts","ng://carbon-components-angular/table/toolbar/table-toolbar-actions.component.ts","node_modules/tslib/tslib.es6.js","ng://carbon-components-angular/table/toolbar/table-toolbar-search.component.ts","ng://carbon-components-angular/table/toolbar/table-toolbar-content.component.ts","ng://carbon-components-angular/table/table-container.component.ts","ng://carbon-components-angular/table/header/table-header.component.ts","ng://carbon-components-angular/table/header/table-header-title.directive.ts","ng://carbon-components-angular/table/head/table-head-cell-label.directive.ts","ng://carbon-components-angular/table/header/table-header-description.directive.ts","ng://carbon-components-angular/table/expanded-row-hover.directive.ts","ng://carbon-components-angular/table/table-header-item.class.ts","ng://carbon-components-angular/table/table-item.class.ts","ng://carbon-components-angular/table/table-model.class.ts","ng://carbon-components-angular/table/data-grid-interaction-model.class.ts","ng://carbon-components-angular/table/table-adapter.class.ts","ng://carbon-components-angular/table/table.component.ts","ng://carbon-components-angular/table/table.directive.ts","ng://carbon-components-angular/table/head/table-head.component.ts","ng://carbon-components-angular/table/head/table-head-cell.component.ts","ng://carbon-components-angular/table/head/table-head-checkbox.component.ts","ng://carbon-components-angular/table/head/table-head-expand.component.ts","ng://carbon-components-angular/table/body/table-body.component.ts","ng://carbon-components-angular/table/body/table-row.component.ts","ng://carbon-components-angular/table/body/table-expanded-row.component.ts","ng://carbon-components-angular/table/cell/table-data.component.ts","ng://carbon-components-angular/table/cell/table-checkbox.component.ts","ng://carbon-components-angular/table/cell/table-radio.component.ts","ng://carbon-components-angular/table/cell/table-expand-button.component.ts","ng://carbon-components-angular/table/table-row.class.ts","ng://carbon-components-angular/table/table.module.ts"],"sourcesContent":["import { TableModel } from \"../table-model.class\";\nimport {\n\tComponent,\n\tEventEmitter,\n\tInput,\n\tOutput\n} from \"@angular/core\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { TableRowSize } from \"../table.types\";\n\n/**\n * The table toolbar is reserved for global table actions such as table settings, complex filter, export, or editing table data.\n *\n * ## Basic usage\n *\n * ```html\n * <ibm-table-toolbar [model]=\"model\">\n *\t\t<ibm-table-toolbar-actions>\n *\t\t\t<button ibmButton=\"primary\">\n *\t\t\t\tDelete\n *\t\t\t\t<svg ibmIcon=\"delete\" size=\"16\" class=\"bx--btn__icon\"></svg>\n *\t\t\t</button>\n *\t\t\t<button ibmButton=\"primary\">\n *\t\t\t\tSave\n *\t\t\t\t<svg ibmIcon=\"save\" size=\"16\" class=\"bx--btn__icon\"></svg>\n *\t\t\t</button>\n *\t\t\t<button ibmButton=\"primary\">\n *\t\t\t\tDownload\n *\t\t\t\t<svg ibmIcon=\"download\" size=\"16\" class=\"bx--btn__icon\"></svg>\n *\t\t\t</button>\n *\t\t</ibm-table-toolbar-actions>\n *\t\t\t<ibm-table-toolbar-content>\n *\t\t\t<ibm-table-toolbar-search [expandable]=\"true\"></ibm-table-toolbar-search>\n *\t\t\t<button ibmButton=\"toolbar-action\">\n *\t\t\t\t<svg ibmIcon=\"settings\" size=\"16\" class=\"bx--toolbar-action__icon\"></svg>\n *\t\t\t</button>\n *\t\t\t<button ibmButton=\"primary\" size=\"sm\">\n *\t\t\t\tPrimary Button\n *\t\t\t\t<svg ibmIcon=\"add\" size=\"20\" class=\"bx--btn__icon\"></svg>\n *\t\t\t</button>\n *\t\t</ibm-table-toolbar-content>\n *\t</ibm-table-toolbar>\n * ```\n *\n */\n@Component({\n\tselector: \"ibm-table-toolbar\",\n\ttemplate: `\n\t<section\n\t\tclass=\"bx--table-toolbar\"\n\t\t[ngClass]=\"{'bx--table-toolbar--small' : size === 'sm'}\">\n\t\t<div\n\t\t\t*ngIf=\"model\"\n\t\t\tclass=\"bx--batch-actions\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--batch-actions--active': selected\n\t\t\t}\"\n\t\t\t[attr.aria-label]=\"actionBarLabel.subject | async\">\n\t\t\t<div class=\"bx--action-list\">\n\t\t\t\t<ng-content select=\"ibm-table-toolbar-actions\"></ng-content>\n\t\t\t\t<button\n\t\t\t\t\tibmButton=\"primary\"\n\t\t\t\t\tclass=\"bx--batch-summary__cancel\"\n\t\t\t\t\t[tabindex]=\"selected ? 0 : -1\"\n\t\t\t\t\t(click)=\"onCancel()\">\n\t\t\t\t\t{{_cancelText.subject | async}}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div class=\"bx--batch-summary\">\n\t\t\t\t<p class=\"bx--batch-summary__para\" *ngIf=\"count as n\">\n\t\t\t\t\t<ng-container *ngIf=\"_batchTextLegacy.subject | async as legacyText; else batchTextBlock\">\n\t\t\t\t\t\t<span>{{n}}</span> {{legacyText}}\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-template #batchTextBlock>\n\t\t\t\t\t\t<span *ngIf=\"n === 1\">{{_batchTextSingle.subject | async}}</span>\n\t\t\t\t\t\t<span *ngIf=\"n !== 1\">{{_batchTextMultiple.subject | i18nReplace: {count: n} | async}}</span>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t\t<ng-content></ng-content>\n\t</section>\n\t`\n})\nexport class TableToolbar {\n\t@Input() model: TableModel;\n\n\t@Input() set batchText (value: string | { SINGLE: string, MULTIPLE: string }) {\n\t\tif (typeof value === \"object\") {\n\t\t\tthis._batchTextSingle.override(value.SINGLE);\n\t\t\tthis._batchTextMultiple.override(value.MULTIPLE);\n\t\t} else {\n\t\t\t// For compatibility with old code\n\t\t\tthis._batchTextLegacy.override(value);\n\t\t}\n\t}\n\t@Input() set ariaLabel (value: { ACTION_BAR: string }) {\n\t\tthis.actionBarLabel.override(value.ACTION_BAR);\n\t}\n\t@Input() set cancelText(value: { CANCEL: string }) {\n\t\tthis._cancelText.override(value.CANCEL);\n\t}\n\t@Input() size: TableRowSize = \"md\";\n\n\tget cancelText(): { CANCEL: string } {\n\t\treturn { CANCEL: this._cancelText.value as string };\n\t}\n\n\t@Output() cancel = new EventEmitter();\n\n\tactionBarLabel: Overridable = this.i18n.getOverridable(\"TABLE_TOOLBAR.ACTION_BAR\");\n\t_cancelText: Overridable = this.i18n.getOverridable(\"TABLE_TOOLBAR.CANCEL\");\n\t_batchTextLegacy: Overridable = this.i18n.getOverridable(\"TABLE_TOOLBAR.BATCH_TEXT\");\n\t_batchTextSingle: Overridable = this.i18n.getOverridable(\"TABLE_TOOLBAR.BATCH_TEXT_SINGLE\");\n\t_batchTextMultiple: Overridable = this.i18n.getOverridable(\"TABLE_TOOLBAR.BATCH_TEXT_MULTIPLE\");\n\n\tconstructor(protected i18n: I18n) {}\n\n\tget count() {\n\t\treturn this.model.totalDataLength > 0 ? this.model.rowsSelected.reduce((previous, current) => previous + (current ? 1 : 0), 0) : 0;\n\t}\n\tget selected() {\n\t\treturn this.model.totalDataLength > 0 ? this.model.rowsSelected.some(item => item) : false;\n\t}\n\n\tonCancel() {\n\t\tthis.model.selectAll(false);\n\t\tthis.cancel.emit();\n\t}\n}\n","import { Component, HostBinding } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-table-toolbar-actions\",\n\ttemplate: `<ng-content></ng-content>`\n})\nexport class TableToolbarActions {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Search } from \"carbon-components-angular/search\";\nimport {\n\tComponent,\n\tHostBinding,\n\tInput,\n\tOnInit,\n\tAfterViewInit\n} from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n\tselector: \"ibm-table-toolbar-search\",\n\ttemplateUrl: \"../../search/search.component.html\",\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: TableToolbarSearch,\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class TableToolbarSearch extends Search implements AfterViewInit {\n\ttableSearch = true;\n\n\t@HostBinding(\"class.bx--toolbar-content\") hostClass = true;\n\n\tngAfterViewInit() {\n\t\tsetTimeout(() => {\n\t\t\tif (this.value) {\n\t\t\t\tthis.openSearch();\n\t\t\t}\n\t\t});\n\t}\n}\n","import { Component, HostBinding } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-table-toolbar-content\",\n\ttemplate: `<ng-content></ng-content>`\n})\nexport class TableToolbarContent {\n\t@HostBinding(\"class.bx--toolbar-content\") class = true;\n}\n","import { Component, HostBinding } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-table-container\",\n\ttemplate: `<ng-content></ng-content>`,\n\tstyles: [`\n\t\t:host { display: block }\n\t`]\n})\nexport class TableContainer {\n\t@HostBinding(\"class.bx--data-table-container\") containerClass = true;\n}\n","import { Component, HostBinding } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-table-header\",\n\ttemplate: `\n\t\t<ng-content></ng-content>\n\t`\n})\nexport class TableHeader {\n\t@HostBinding(\"class.bx--data-table-header\") headerClass = true;\n\t@HostBinding(\"style.display\") displayStyle = \"block\";\n}\n","import { Directive, HostBinding } from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmTableHeaderTitle]\"\n})\nexport class TableHeaderTitle {\n\t@HostBinding(\"class.bx--data-table-header__title\") titleClass = true;\n\t@HostBinding(\"attr.role\") role = \"caption\";\n}\n","import {\n\tDirective,\n\tHostBinding\n} from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmTableHeadCellLabel]\"\n})\n\n\nexport class TableHeadCellLabel {\n\t@HostBinding(\"class.bx--table-header-label\") baseClass = true;\n}\n","import { Directive, HostBinding } from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmTableHeaderDescription]\"\n})\nexport class TableHeaderDescription {\n\t@HostBinding(\"class.bx--data-table-header__description\") descriptionClass = true;\n\t@HostBinding(\"attr.role\") role = \"summary\";\n}\n","import {\n\tDirective,\n\tHostListener\n} from \"@angular/core\";\n\n@Directive({\n\tselector: \"[ibmExpandedRowHover]\"\n})\nexport class ExpandedRowHover {\n\t@HostListener(\"mouseenter\", [\"$event\"])\n\taddHoverClass(event) {\n\t\tevent.target.previousElementSibling.classList.add(\"bx--expandable-row--hover\");\n\t}\n\n\t@HostListener(\"mouseleave\", [\"$event\"])\n\tremoveHoverClass(event) {\n\t\tevent.target.previousElementSibling.classList.remove(\"bx--expandable-row--hover\");\n\t}\n}\n","import { TableItem } from \"./table-item.class\";\nimport {\n\tEventEmitter,\n\tTemplateRef\n} from \"@angular/core\";\n\nexport class TableHeaderItem {\n\t/**\n\t * Defines if column under this TableHeaderItem should be displayed.\n\t *\n\t */\n\tvisible = true;\n\n\t/**\n\t * Disables sorting by default.\n\t *\n\t */\n\tsorted = false;\n\n\t/**\n\t * Enables sorting on click by default.\n\t * If false then this column won't show a sorting arrow at all.\n\t *\n\t */\n\tsortable = true;\n\n\t/**\n\t * Number of applied filters.\n\t *\n\t * `filter()` should set it to appropriate number.\n\t *\n\t */\n\tfilterCount = 0;\n\n\t/**\n\t * The number of rows to span\n\t * **NOTE:** not supported by the default carbon table\n\t */\n\trowSpan = 1;\n\n\t/**\n\t * The number of columns to span\n\t */\n\tcolSpan = 1;\n\n\t/**\n\t * Attach a class to the column, both the header and column cells.\n\t *\n\t */\n\tclassName: string;\n\n\t/**\n\t * Style for the column, applied to every element in the column.\n\t *\n\t * ngStyle-like format\n\t *\n\t */\n\tstyle = {};\n\n\t/**\n\t * If true, sort is set to ascending, if false descending will be true.\n\t *\n\t */\n\tset ascending(asc) {\n\t\tthis._ascending = asc;\n\t}\n\tget ascending() {\n\t\treturn this._ascending;\n\t}\n\n\t/**\n\t * If true, sort is set to descending, if false ascending will be true.\n\t *\n\t */\n\tset descending(desc) {\n\t\tthis._ascending = !desc;\n\t}\n\tget descending() {\n\t\treturn !this._ascending;\n\t}\n\n\t/**\n\t * Data for the header item.\n\t */\n\tdata: any;\n\n\t/**\n\t * Data for the header item for general usage in the controller.\n\t * For example, which `field` is this column related to.\n\t */\n\tmetadata: any;\n\n\t/**\n\t * Used to display data in a desired way.\n\t *\n\t * If not provided, displays data as a simple string.\n\t *\n\t * Usage:\n\t *\n\t * In a component where you're using the table create a template like:\n\t *\n\t * ```html\n\t * <ng-template #customHeaderTemplate let-data=\"data\">\n\t * \t\t<i><a [routerLink]=\"data.link\">{{data.name}}</a></i>\n\t * </ng-template>\n\t * ```\n\t * where we assume your data contains `link` and `name`. `let-data=\"data\"` is\n\t * necessary for you to be able to access item's data in the template.\n\t *\n\t * Create `ViewChild` property with:\n\t *\n\t * ```typescript\n\t * (at)ViewChild(\"customHeaderTemplate\")\n\t * protected customHeaderTemplate: TemplateRef<any>;\n\t * ```\n\t *\n\t * Set the template to the header item, for example:\n\t *\n\t * ```typescript\n\t * this.model.header = [\n\t * \t\tnew TableHeaderItem({data: {name: \"Custom header\", link: \"/table\"}, template: this.customHeaderTemplate})\n\t * ];\n\t * ```\n\t */\n\ttemplate: TemplateRef<any>;\n\n\t/**\n\t * The label for the sort button\n\t */\n\tariaSortLabel: string;\n\n\t/**\n\t * A callback function to format the sort label. Will be heavily called.\n\t */\n\tformatSortLabel: (label: string, staticLabel?: string) => string;\n\n\t/**\n\t * Used as a template for popover filter.\n\t *\n\t * `let-popover=\"popover\"` will give you access to popover component and allow you to\n\t * manipulate it if needed.\n\t *\n\t * `let-filter=\"filter\"` will give you access to the \"filter\". The main takeaway is\n\t * store the data you need to `filter.data`. You will be able to access it as\n\t * `this.filterData.data` from your `filter()` function when you extend `TableHeaderItem`\n\t *\n\t * Example:\n\t * ```html\n\t * <ng-template #filter let-popover=\"popover\">\n\t * \t<ibm-label class=\"first-label\">\n\t * \t\tValue\n\t * \t\t<input type=\"text\" [(ngModel)]=\"filter1\" class=\"input-field\">\n\t * \t</ibm-label>\n\t * </ng-template>\n\t *\n\t * <ng-template #filterFooter let-popover=\"popover\" let-filter=\"data\">\n\t * \t<button class=\"btn--primary\" (click)=\"filter.data = filter1; popover.onClose()\">Apply</button>\n\t * \t<button class=\"btn--secondary\" (click)=\"popover.onClose()\">Cancel</button>\n\t * </ng-template>\n\t * ```\n\t *\n\t * Set the template with, for example:\n\t * ```typescript\n\t * new FilterableHeaderItem({\n\t * \tfilterTemplate: this.filter,\n\t *\tfilterFooter: this.filterFooter\n\t * })\n\t * ```\n\t *\n\t * ```typescript\n\t * class FilterableHeaderItem extends TableHeaderItem {\n\t * \t// custom filter function\n\t * \tfilter(item: TableItem): boolean {\n\t * \t\tif (typeof item.data === \"string\" && item.data.indexOf(this.filterData.data) >= 0) {\n\t * \t\t\tthis.filterCount = 1;\n\t * \t\t\treturn false;\n\t * \t\t}\n\t * \t\tthis.filterCount = 0;\n\t * \t\treturn true;\n\t * \t}\n\t * }\n\t * ```\n\t */\n\tfilterTemplate: TemplateRef<any>;\n\n\t/**\n\t * Used along with `filterTemplate` to construct the filter popover\n\t */\n\tfilterFooter: TemplateRef<any>;\n\n\t/**\n\t * This is where you store your data when applying filter.\n\t *\n\t * It is the actual object you have access to with `let-filter=\"data\"` in your template.\n\t *\n\t * Make sure to store data in `filter.data` in your template, and you will have it\n\t * available in `filterData.data` in your extension of `TableHeaderItem`.\n\t *\n\t * Because angular and object references.\n\t */\n\tfilterData: any;\n\n\t/**\n\t * used in `ascending`\n\t *\n\t * @protected\n\t */\n\tprotected _ascending = true;\n\n\tget title() {\n\t\tif (this._title) {\n\t\t\treturn this._title;\n\t\t}\n\n\t\tif (!this.data) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tif (typeof this.data === \"string\") {\n\t\t\treturn this.data;\n\t\t}\n\n\t\tif (\n\t\t\tthis.data.toString &&\n\t\t\tthis.data.constructor !== ({}).constructor\n\t\t) {\n\t\t\treturn this.data.toString();\n\t\t}\n\n\t\t// data canât be reasonably converted to an end user readable string\n\t\treturn \"\";\n\t}\n\n\tset title(title) {\n\t\tthis._title = title;\n\t}\n\n\tprivate _title: string;\n\n\t/**\n\t * Creates an instance of TableHeaderItem.\n\t */\n\tconstructor(rawData?: any) {\n\t\t// defaults so we dont leave things empty\n\t\tconst defaults = {\n\t\t\tdata: \"\",\n\t\t\tvisible: this.visible,\n\t\t\tstyle: this.style,\n\t\t\tfilterCount: this.filterCount,\n\t\t\tfilterData: {data: \"\"}\n\t\t};\n\t\t// fill our object with provided props, and fallback to defaults\n\t\tconst data = Object.assign({}, defaults, rawData);\n\t\tfor (let property of Object.getOwnPropertyNames(data)) {\n\t\t\tif (data.hasOwnProperty(property)) {\n\t\t\t\tthis[property] = data[property];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Used for sorting rows of the table.\n\t *\n\t * Override to enable different sorting.\n\t *\n\t * < 0 if `one` should go before `two`\n\t * > 0 if `one` should go after `two`\n\t * 0 if it doesn't matter (they are the same)\n\t */\n\tcompare(one: TableItem, two: TableItem): number {\n\t\tif (!one || !two) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (typeof one.data === \"string\") {\n\t\t\treturn one.data.localeCompare(two.data);\n\t\t}\n\n\t\tif (one.data < two.data) {\n\t\t\treturn -1;\n\t\t} else if (one.data > two.data) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Used to filter rows in the table.\n\t *\n\t * Override to make a custom filter.\n\t *\n\t * Even though there is just one filter function, there can be multiple filters.\n\t * When implementing filter, set `filterCount` before returning.\n\t *\n\t * `true` to hide the row\n\t * `false` to show the row\n\t */\n\tfilter(item: TableItem): boolean {\n\t\tthis.filterCount = 0;\n\t\treturn false;\n\t}\n}\n","import {\n\tTemplateRef\n} from \"@angular/core\";\n\nexport class TableItem {\n\t/**\n\t * Data for the table item.\n\t */\n\tdata: any;\n\n\t/**\n\t * Data for the expanded part of the row.\n\t *\n\t * You only need to set it for the first item in the row.\n\t *\n\t * See `expandAsTable` documentation if you need to the table to expand to additional\n\t * table rows.\n\t */\n\texpandedData: any;\n\n\t/**\n\t * Used to display data in a desired way.\n\t *\n\t * If not provided, displays data as a simple string.\n\t *\n\t * Usage:\n\t *\n\t * In a component where you're using the table create a template like:\n\t *\n\t * ```html\n\t * <ng-template #customItemTemplate let-data=\"data\">\n\t * \t<i><a [routerLink]=\"data.link\">{{data.name}}</a></i>\n\t * </ng-template>\n\t * ```\n\t * where we assume your data contains `link` and `name`. `let-data=\"data\"` is\n\t * necessary for you to be able to access item's data in the template.\n\t *\n\t * Create `ViewChild` property with:\n\t *\n\t * ```typescript\n\t * (at)ViewChild(\"customItemTemplate\")\n\t * protected customItemTemplate: TemplateRef<any>;\n\t * ```\n\t *\n\t * Set the template to the table item, for example:\n\t *\n\t * ```typescript\n\t * this.model.data = [\n\t * \t[new TableItem({data: {name: \"Custom item\", link: \"/table\"}, template: this.customItemTemplate})]\n\t * ];\n\t * ```\n\t */\n\ttemplate: TemplateRef<any>;\n\n\t/**\n\t * Template for rendering `expandedData`\n\t *\n\t * You only need to set it for the first item in the row.\n\t *\n\t */\n\texpandedTemplate: TemplateRef<any>;\n\n\t/**\n\t * Setting this to `true` makes table interpret `expandedData` as additional rows to insert in place\n\t * for expanded data. `expandedTemplate` is then ignored.\n\t *\n\t * You can apply the template for individual cells as usual.\n\t *\n\t * Example model data:\n\t *\n\t * ```typescript\n\t * this.model.data = [\n\t * \t[new TableItem({ data: \"Name 4\" }), new TableItem({ data: \"twer\" })], // regular row\n\t * \t[\n\t * \t\tnew TableItem({\n\t * \t\t\tdata: \"Name 3.1\",\n\t * \t\t\t// `expandedData` mimics the format of the rest of the table\n\t * \t\t\texpandedData: [\n\t * \t\t\t\t[\n\t * \t\t\t\t\tnew TableItem({ data: \"More names\", expandedData: \"No template\" }),\n\t * \t\t\t\t\tnew TableItem({ data: { name: \"Morey\", link: \"#\" }, template: this.customTableItemTemplate })\n\t * \t\t\t\t],\n\t * \t\t\t\t[\n\t * \t\t\t\t\tnew TableItem({ data: \"Core names\", expandedData: \"No template\" }),\n\t * \t\t\t\t\tnew TableItem({ data: { name: \"Corey\", link: \"#\" }, template: this.customTableItemTemplate })\n\t * \t\t\t\t]\n\t * \t\t\t],\n\t * \t\t\t// `expandAsTable` tells the table to interpret `expandedData` as table data\n\t * \t\t\texpandAsTable: true\n\t * \t\t}),\n\t * \t\tnew TableItem({ data: \"swer\" })\n\t * \t],\n\t * \t[new TableItem({ data: \"Name 7\" }), new TableItem({data: \"twer\"})] // regular row\n\t * ];\n\t * ```\n\t */\n\texpandAsTable: false;\n\n\t/**\n\t * The number of rows to span\n\t */\n\trowSpan = 1;\n\n\t/**\n\t * The number of columns to span\n\t */\n\tcolSpan = 1;\n\n\tget title() {\n\t\tif (typeof this._title === \"string\") {\n\t\t\treturn this._title;\n\t\t}\n\n\t\tif (!this.data) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tif (typeof this.data === \"string\") {\n\t\t\treturn this.data;\n\t\t}\n\n\t\tif (\n\t\t\tthis.data.toString &&\n\t\t\tthis.data.constructor !== ({}).constructor\n\t\t) {\n\t\t\treturn this.data.toString();\n\t\t}\n\n\t\t// data canât be reasonably converted to an end user readable string\n\t\treturn \"\";\n\t}\n\n\tset title(title) {\n\t\tthis._title = title;\n\t}\n\n\tprivate _title: string;\n\n\t/**\n\t * Creates an instance of TableItem.\n\t */\n\tconstructor(rawData?: any) {\n\t\t// defaults so we dont leave things empty\n\t\tconst defaults = {\n\t\t\tdata: \"\"\n\t\t};\n\t\t// fill our object with provided props, and fallback to defaults\n\t\tconst data = Object.assign({}, defaults, rawData);\n\t\tfor (const property of Object.getOwnPropertyNames(data)) {\n\t\t\tif (data.hasOwnProperty(property)) {\n\t\t\t\tthis[property] = data[property];\n\t\t\t}\n\t\t}\n\t}\n}\n","import {\n\tEventEmitter\n} from \"@angular/core\";\n\nimport { PaginationModel } from \"carbon-components-angular/pagination\";\nimport { TableHeaderItem } from \"./table-header-item.class\";\nimport { TableItem } from \"./table-item.class\";\nimport { TableRow } from \"./table-row.class\";\nimport { Subject } from \"rxjs\";\n\nexport type HeaderType = number | \"select\" | \"expand\";\n\n/**\n * TableModel represents a data model for two-dimensional data. It's used for all things table\n * (table component, table toolbar, pagination, etc)\n *\n * TableModel manages its internal data integrity very well if you use the provided helper\n * functions for modifying rows and columns and assigning header and data in that order.\n *\n * It also provides direct access to the data so you can read and modify it.\n * If you change the structure of the data (by directly pushing into the arrays or otherwise),\n * keep in mind to keep the data structure intact.\n *\n * Header length and length of every line in the data should be equal.\n *\n * If they are not consistent, unexpected things will happen.\n *\n * Use the provided functions when in doubt.\n */\nexport class TableModel implements PaginationModel {\n\t/**\n\t * The number of models instantiated, used for (among other things) unique id generation\n\t */\n\tprotected static COUNT = 0;\n\n\t/**\n\t * Sets data of the table.\n\t *\n\t * Make sure all rows are the same length to keep the column count accurate.\n\t */\n\tset data(newData: TableItem[][]) {\n\t\tif (!newData || (Array.isArray(newData) && newData.length === 0) ) {\n\t\t\tnewData = [[]];\n\t\t}\n\n\t\tthis._data = newData;\n\n\t\t// init rowsSelected\n\t\tthis.rowsSelected = new Array<boolean>(this._data.length).fill(false);\n\t\tthis.rowsExpanded = new Array<boolean>(this._data.length).fill(false);\n\n\t\t// init rowsContext\n\t\tthis.rowsContext = new Array<string>(this._data.length);\n\n\t\t// init rowsClass\n\t\tthis.rowsClass = new Array<string>(this._data.length);\n\n\t\t// only create a fresh header if necessary (header doesn't exist or differs in length)\n\t\tif (this.header == null || (this.header.length !== this._data[0].length && this._data[0].length > 0)) {\n\t\t\tlet header = new Array<TableHeaderItem>();\n\t\t\tfor (let i = 0; i < this._data[0].length; i++) {\n\t\t\t\theader.push(new TableHeaderItem());\n\t\t\t}\n\t\t\tthis.header = header;\n\t\t}\n\n\t\tthis.dataChange.emit();\n\t}\n\n\tdataChange = new EventEmitter();\n\trowsSelectedChange = new EventEmitter<number>();\n\trowsExpandedChange = new EventEmitter<number>();\n\t/**\n\t * Gets emitted when `selectAll` is called. Emits false if all rows are deselected and true if\n\t * all rows are selected.\n\t */\n\tselectAllChange = new Subject<boolean>();\n\n\t/**\n\t * Gets the full data.\n\t *\n\t * You can use it to alter individual `TableItem`s but if you need to change\n\t * table structure, use `addRow()` and/or `addColumn()`\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * Contains information about selection state of rows in the table.\n\t */\n\trowsSelected: boolean[] = [];\n\n\t/**\n\t * Contains information about expanded state of rows in the table.\n\t */\n\trowsExpanded: boolean[] = [];\n\n\t/**\n\t * Contains information about the context of the row.\n\t *\n\t * It affects styling of the row to reflect the context.\n\t *\n\t * string can be one of `\"success\" | \"warning\" | \"info\" | \"error\" | \"\"` and it's\n\t * empty or undefined by default\n\t */\n\trowsContext: string[] = [];\n\n\t/**\n\t * Contains class name(s) of the row.\n\t *\n\t * It affects styling of the row to reflect the appended class name(s).\n\t *\n\t * It's empty or undefined by default\n\t */\n\trowsClass: string[] = [];\n\n\t/**\n\t * Contains information about the header cells of the table.\n\t */\n\theader: TableHeaderItem[] = [];\n\n\t/**\n\t * Tracks the current page.\n\t */\n\tcurrentPage = 1;\n\n\t/**\n\t * Length of page.\n\t */\n\tpageLength = 10;\n\n\t/**\n\t * Set to true when there is no more data to load in the table\n\t */\n\tisEnd = false;\n\n\t/**\n\t * Set to true when lazy loading to show loading indicator\n\t */\n\tisLoading = false;\n\n\t/**\n\t * Absolute total number of rows of the table.\n\t */\n\tprotected _totalDataLength: number;\n\n\t/**\n\t * Manually set data length in case the data in the table doesn't\n\t * correctly reflect all the data that table is to display.\n\t *\n\t * Example: if you have multiple pages of data that table will display\n\t * but you're loading one at a time.\n\t *\n\t * Set to `null` to reset to default behavior.\n\t */\n\tset totalDataLength(length: number) {\n\t\t// if this function is called without a parameter we need to set to null to avoid having undefined != null\n\t\tthis._totalDataLength = isNaN(length) ? null : length;\n\t}\n\n\t/**\n\t * Total length of data that table has access to, or the amount manually set\n\t */\n\tget totalDataLength() {\n\t\t// if manually set data length\n\t\tif (this._totalDataLength !== null && this._totalDataLength >= 0) {\n\t\t\treturn this._totalDataLength;\n\t\t}\n\n\t\t// if empty dataset\n\t\tif (this.data && this.data.length === 1 && this.data[0].length === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Used in `data`\n\t */\n\tprotected _data: TableItem[][] = [[]];\n\n\t/**\n\t * The number of models instantiated, this is to make sure each table has a different\n\t * model count for unique id generation.\n\t */\n\tprotected tableModelCount = 0;\n\n\tconstructor() {\n\t\tthis.tableModelCount = TableModel.COUNT++;\n\t}\n\n\t/**\n\t * Returns an id for the given column\n\t *\n\t * @param column the column to generate an id for\n\t * @param row the row of the header to generate an id for\n\t */\n\tgetId(column: HeaderType, row = 0): string {\n\t\treturn `table-header-${row}-${column}-${this.tableModelCount}`;\n\t}\n\n\t/**\n\t * Returns the id of the header. Used to link the cells with headers (or headers with headers)\n\t *\n\t * @param column the column to start getting headers for\n\t * @param colSpan the number of columns to get headers for (defaults to 1)\n\t */\n\tgetHeaderId(column: HeaderType, colSpan = 1): string {\n\t\tif (column === \"select\" || column === \"expand\") {\n\t\t\treturn this.getId(column);\n\t\t}\n\n\t\tlet ids = [];\n\t\tfor (let i = column; i >= 0; i--) {\n\t\t\tif (this.header[i]) {\n\t\t\t\tfor (let j = 0; j < colSpan; j++) {\n\t\t\t\t\tids.push(this.getId(i + j));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn ids.join(\" \");\n\t}\n\n\t/**\n\t * Finds closest header by trying the `column` and then working its way to the left\n\t *\n\t * @param column the target column\n\t */\n\tgetHeader(column: number): TableHeaderItem {\n\t\tif (!this.header) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (let i = column; i >= 0; i--) {\n\t\t\tconst headerCell = this.header[i];\n\t\t\tif (headerCell) {\n\t\t\t\treturn headerCell;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns how many rows is currently selected\n\t */\n\tselectedRowsCount(): number {\n\t\tlet count = 0;\n\t\tif (this.rowsSelected) {\n\t\t\tthis.rowsSelected.forEach(rowSelected => {\n\t\t\t\tif (rowSelected) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * Returns how many rows is currently expanded\n\t */\n\texpandedRowsCount(): number {\n\t\tlet count = 0;\n\t\tif (this.rowsExpanded) {\n\t\t\tthis.rowsExpanded.forEach(rowExpanded => {\n\t\t\t\tif (rowExpanded) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * Returns `index`th row of the table.\n\t *\n\t * Negative index starts from the end. -1 being the last element.\n\t *\n\t * @param index\n\t */\n\trow(index: number): TableItem[] {\n\t\treturn this.data[this.realRowIndex(index)];\n\t}\n\n\t/**\n\t * Adds a row to the `index`th row or appends to table if index not provided.\n\t *\n\t * If row is shorter than other rows or not provided, it will be padded with\n\t * empty `TableItem` elements.\n\t *\n\t * If row is longer than other rows, others will be extended to match so no data is lost.\n\t *\n\t * If called on an empty table with no parameters, it creates a 1x1 table.\n\t *\n\t * Negative index starts from the end. -1 being the last element.\n\t *\n\t * @param [row]\n\t * @param [index]\n\t */\n\taddRow(row?: TableItem[], index?: number) {\n\t\t// if table empty create table with row\n\t\tif (!this.data || this.data.length === 0 || this.data[0].length === 0) {\n\t\t\tlet newData = new Array<Array<TableItem>>();\n\t\t\tnewData.push(row ? row : [new TableItem()]);  // row or one empty one column row\n\t\t\tthis.data = newData;\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet realRow = row;\n\t\tconst columnCount = this.data[0].length;\n\n\t\tif (row == null) {\n\t\t\trealRow = new Array<TableItem>();\n\t\t\tfor (let i = 0; i < columnCount; i++) {\n\t\t\t\trealRow.push(new TableItem());\n\t\t\t}\n\t\t}\n\n\t\tif (realRow.length < columnCount) {\n\t\t\t// extend the length of realRow\n\t\t\tconst difference = columnCount - realRow.length;\n\t\t\tfor (let i = 0; i < difference; i++) {\n\t\t\t\trealRow.push(new TableItem());\n\t\t\t}\n\t\t} else if (realRow.length > columnCount) {\n\t\t\t// extend the length of header\n\t\t\tlet difference = realRow.length - this.header.length;\n\t\t\tfor (let j = 0; j < difference; j++) {\n\t\t\t\tthis.header.push(new TableHeaderItem());\n\t\t\t}\n\t\t\t// extend the length of every other row\n\t\t\tfor (let i = 0; i < this.data.length; i++) {\n\t\t\t\tlet currentRow = this.data[i];\n\t\t\t\tdifference = realRow.length - currentRow.length;\n\t\t\t\tfor (let j = 0; j < difference; j++) {\n\t\t\t\t\tcurrentRow.push(new TableItem());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (index == null) {\n\t\t\tthis.data.push(realRow);\n\n\t\t\t// update rowsSelected property for length\n\t\t\tthis.rowsSelected.push(false);\n\n\t\t\t// update rowsExpanded property for length\n\t\t\tthis.rowsExpanded.push(false);\n\n\t\t\t// update rowsContext property for length\n\t\t\tthis.rowsContext.push(undefined);\n\n\t\t\t// update rowsClass property for length\n\t\t\tthis.rowsClass.push(undefined);\n\t\t} else {\n\t\t\tconst ri = this.realRowIndex(index);\n\t\t\tthis.data.splice(ri, 0, realRow);\n\n\t\t\t// update rowsSelected property for length\n\t\t\tthis.rowsSelected.splice(ri, 0, false);\n\n\t\t\t// update rowsExpanded property for length\n\t\t\tthis.rowsExpanded.splice(ri, 0, false);\n\n\t\t\t// update rowsContext property for length\n\t\t\tthis.rowsContext.splice(ri, 0, undefined);\n\n\t\t\t// update rowsClass property for length\n\t\t\tthis.rowsClass.splice(ri, 0, undefined);\n\t\t}\n\n\t\tthis.dataChange.emit();\n\t}\n\n\t/**\n\t * Deletes `index`th row.\n\t *\n\t * Negative index starts from the end. -1 being the last element.\n\t *\n\t * @param index\n\t */\n\tdeleteRow(index: number) {\n\t\tconst rri = this.realRowIndex(index);\n\t\tthis.data.splice(rri, 1);\n\t\tthis.rowsSelected.splice(rri, 1);\n\t\tthis.rowsExpanded.splice(rri, 1);\n\t\tthis.rowsContext.splice(rri, 1);\n\t\tthis.rowsClass.splice(rri, 1);\n\n\t\tthis.dataChange.emit();\n\t}\n\n\thasExpandableRows() {\n\t\treturn this.data.some(data => data.some(d => d && d.expandedData)); // checking for some in 2D array\n\t}\n\n\tisRowExpandable(index: number) {\n\t\treturn this.data[index].some(d => d && d.expandedData);\n\t}\n\n\tisRowExpanded(index: number) {\n\t\treturn this.rowsExpanded[index];\n\t}\n\n\tgetRowContext(index: number) {\n\t\treturn this.rowsContext[index];\n\t}\n\n\t/**\n\t * Returns `index`th column of the table.\n\t *\n\t * Negative index starts from the end. -1 being the last element.\n\t *\n\t * @param index\n\t */\n\tcolumn(index: number): TableItem[] {\n\t\tlet column = new Array<TableItem>();\n\t\tconst ri = this.realColumnIndex(index);\n\t\tconst rc = this.data.length;\n\n\t\tfor (let i = 0; i < rc; i++) {\n\t\t\tconst row = this.data[i];\n\t\t\tcolumn.push(row[ri]);\n\t\t}\n\n\t\treturn column;\n\t}\n\n\t/**\n\t * Adds a column to the `index`th column or appends to table if index not provided.\n\t *\n\t * If column is shorter than other columns or not provided, it will be padded with\n\t * empty `TableItem` elements.\n\t *\n\t * If column is longer than other columns, others will be extended to match so no data is lost.\n\t *\n\t * If called on an empty table with no parameters, it creates a 1x1 table.\n\t *\n\t * Negative index starts from the end. -1 being the last element.\n\t *\n\t * @param [column]\n\t * @param [index]\n\t */\n\taddColumn(column?: TableItem[], index?: number) {\n\t\t// if table empty create table with row\n\t\tif (!this.data || this.data.length === 0 || this.data[0].length === 0) {\n\t\t\tlet newData = new Array<Array<TableItem>>();\n\t\t\tif (column == null) {\n\t\t\t\tnewData.push([new TableItem()]);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < column.length; i++) {\n\t\t\t\t\tlet item = column[i];\n\t\t\t\t\tnewData.push([item]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.data = newData;\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet rc = this.data.length;  // row count\n\t\tlet ci = this.realColumnIndex(index);\n\n\t\t// append missing rows\n\t\tfor (let i = 0; column != null && i < column.length - rc; i++) {\n\t\t\tthis.addRow();\n\t\t}\n\t\trc = this.data.length;\n\t\tif (index == null) {\n\t\t\t// append to end\n\t\t\tfor (let i = 0; i < rc; i++) {\n\t\t\t\tlet row = this.data[i];\n\t\t\t\trow.push(column == null || column[i] == null ? new TableItem() : column[i]);\n\t\t\t}\n\t\t\t// update header if not already set by user\n\t\t\tif (this.header.length < this.data[0].length) {\n\t\t\t\tthis.header.push(new TableHeaderItem());\n\t\t\t}\n\t\t} else {\n\t\t\tif (index >= this.data[0].length) {\n\t\t\t\t// if trying to append\n\t\t\t\tci++;\n\t\t\t}\n\t\t\t// insert\n\t\t\tfor (let i = 0; i < rc; i++) {\n\t\t\t\tlet row = this.data[i];\n\t\t\t\trow.splice(ci, 0, column == null || column[i] == null ? new TableItem() : column[i]);\n\t\t\t}\n\t\t\t// update header if not already set by user\n\t\t\tif (this.header.length < this.data[0].length) {\n\t\t\t\tthis.header.splice(ci, 0, new TableHeaderItem());\n\t\t\t}\n\t\t}\n\n\t\tthis.dataChange.emit();\n\t}\n\n\t/**\n\t * Deletes `index`th column.\n\t *\n\t * Negative index starts from the end. -1 being the last element.\n\t *\n\t * @param index\n\t */\n\tdeleteColumn(index: number) {\n\t\tconst rci = this.realColumnIndex(index);\n\t\tconst rowCount = this.data.length;\n\t\tfor (let i = 0; i < rowCount; i++) {\n\t\t\tthis.data[i].splice(rci, 1);\n\t\t}\n\t\t// update header if not already set by user\n\t\tif (this.header.length > this.data[0].length) {\n\t\t\tthis.header.splice(rci, 1);\n\t\t}\n\n\t\tthis.dataChange.emit();\n\t}\n\n\tmoveColumn(indexFrom: number, indexTo: number) {\n\t\tconst headerFrom = this.header[indexFrom];\n\n\t\tthis.addColumn(this.column(indexFrom), indexTo);\n\t\tthis.deleteColumn(indexFrom + (indexTo < indexFrom ? 1 : 0));\n\n\t\tthis.header[indexTo + (indexTo > indexFrom ? -1 : 0)] = headerFrom;\n\t}\n\n\t/**\n\t * Sorts the data currently present in the model based on `compare()`\n\t *\n\t * Direction is set by `ascending` and `descending` properties of `TableHeaderItem`\n\t * in `index`th column.\n\t *\n\t * @param index The column based on which it's sorting\n\t */\n\tsort(index: number) {\n\t\tthis.pushRowStateToModelData();\n\t\tthis.data.sort((a, b) => (this.header[index].descending ? -1 : 1) * this.header[index].compare(a[index], b[index]));\n\t\tthis.popRowStateFromModelData();\n\t\tthis.header.forEach(column => column.sorted = false);\n\t\tthis.header[index].sorted = true;\n\t}\n\n\t/**\n\t * Appends `rowsSelected` and `rowsExpanded` info to model data.\n\t *\n\t * When sorting rows, do this first so information about row selection\n\t * gets sorted with the other row info.\n\t *\n\t * Call `popRowSelectionFromModelData()` after sorting to make everything\n\t * right with the world again.\n\t */\n\tpushRowStateToModelData() {\n\t\tfor (let i = 0; i < this.data.length; i++) {\n\t\t\tconst rowSelectedMark = new TableItem();\n\t\t\trowSelectedMark.data = this.rowsSelected[i];\n\t\t\tthis.data[i].push(rowSelectedMark);\n\n\t\t\tconst rowExpandedMark = new TableItem();\n\t\t\trowExpandedMark.data = this.rowsExpanded[i];\n\t\t\tthis.data[i].push(rowExpandedMark);\n\n\t\t\tconst rowContext = new TableItem();\n\t\t\trowContext.data = this.rowsContext[i];\n\t\t\tthis.data[i].push(rowContext);\n\n\t\t\tconst rowClass = new TableItem();\n\t\t\trowClass.data = this.rowsClass[i];\n\t\t\tthis.data[i].push(rowClass);\n\t\t}\n\t}\n\n\t/**\n\t * Restores `rowsSelected` from data pushed by `pushRowSelectionToModelData()`\n\t *\n\t * Call after sorting data (if you previously pushed to maintain selection order)\n\t * to make everything right with the world again.\n\t */\n\tpopRowStateFromModelData() {\n\t\tfor (let i = 0; i < this.data.length; i++) {\n\t\t\tthis.rowsClass[i] = this.data[i].pop().data;\n\t\t\tthis.rowsContext[i] = this.data[i].pop().data;\n\t\t\tthis.rowsExpanded[i] = !!this.data[i].pop().data;\n\t\t\tthis.rowsSelected[i] = !!this.data[i].pop().data;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if row is filtered out.\n\t *\n\t * @param index\n\t * @returns true if any of the filters in header filters out the `index`th row\n\t */\n\tisRowFiltered(index: number): boolean {\n\t\tconst realIndex = this.realRowIndex(index);\n\t\treturn this.header.some((item, i) => item && item.filter(this.row(realIndex)[i]));\n\t}\n\n\t/**\n\t * Select/deselect `index`th row based on value\n\t *\n\t * @param index index of the row to select\n\t * @param value state to set the row to. Defaults to `true`\n\t */\n\tselectRow(index: number, value = true) {\n\t\tif (this.isRowDisabled(index)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.rowsSelected[index] = value;\n\t\tthis.rowsSelectedChange.emit(index);\n\t}\n\n\t/**\n\t * Selects or deselects all rows in the model\n\t *\n\t * @param value state to set all rows to. Defaults to `true`\n\t */\n\tselectAll(value = true) {\n\t\tif (this.data.length >= 1 && this.data[0].length >= 1) {\n\t\t\tfor (let i = 0; i < this.rowsSelected.length; i++) {\n\t\t\t\tthis.selectRow(i, value);\n\t\t\t}\n\t\t}\n\t\tthis.selectAllChange.next(value);\n\t}\n\n\tisRowSelected(index: number) {\n\t\treturn this.rowsSelected[index];\n\t}\n\n\t/**\n\t * Checks if row is disabled or not.\n\t */\n\tisRowDisabled(index: number) {\n\t\tconst row = this.data[index] as TableRow;\n\t\treturn !!row.disabled;\n\t}\n\n\t/**\n\t * Expands/Collapses `index`th row based on value\n\t *\n\t * @param index index of the row to expand or collapse\n\t * @param value expanded state of the row. `true` is expanded and `false` is collapsed\n\t */\n\texpandRow(index: number, value = true) {\n\t\tthis.rowsExpanded[index] = value;\n\t\tthis.rowsExpandedChange.emit(index);\n\t}\n\n\t/**\n\t * Gets the true index of a row based on it's relative position.\n\t * Like in Python, positive numbers start from the top and\n\t * negative numbers start from the bottom.\n\t *\n\t * @param index\n\t */\n\tprotected realRowIndex(index: number): number {\n\t\treturn this.realIndex(index, this.data.length);\n\t}\n\n\t/**\n\t * Gets the true index of a column based on it's relative position.\n\t * Like in Python, positive numbers start from the top and\n\t * negative numbers start from the bottom.\n\t *\n\t * @param index\n\t */\n\tprotected realColumnIndex(index: number): number {\n\t\treturn this.realIndex(index, this.data[0].length);\n\t}\n\n\t/**\n\t * Generic function to calculate the real index of something.\n\t * Used by `realRowIndex()` and `realColumnIndex()`\n\t *\n\t * @param index\n\t * @param length\n\t */\n\tprotected realIndex(index: number, length: number): number {\n\t\tif (index == null) {\n\t\t\treturn length - 1;\n\t\t} else if (index >= 0) {\n\t\t\treturn index >= length ? length - 1 : index;\n\t\t} else {\n\t\t\treturn -index >= length ? 0 : length + index;\n\t\t}\n\t}\n}\n","import {\n\tBehaviorSubject,\n\tObservable,\n\tcombineLatest\n} from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { TableAdapter } from \"./table-adapter.class\";\nimport { tabbableSelectorIgnoreTabIndex, getFocusElementList } from \"carbon-components-angular/common\";\n\n/**\n * The current and previous position in the grid.\n *\n * `current` and `previous` are tuples that follow the `[row, column]` convention.\n */\nexport interface DataGridPosition {\n\tcurrent: [number, number];\n\tprevious: [number, number];\n}\n\n/**\n * `DataGridInteractionModel` provides centralized control over arbitrary 2d grids, following the w3 specs.\n *\n * Refs:\n *  - https://www.w3.org/TR/wai-aria-practices/examples/grid/dataGrids.html\n *  - https://www.w3.org/TR/wai-aria-practices/#grid\n *\n * Example usage (taken from `table.component`):\n```typescript\n// a standard HTML table\nconst table = this.elementRef.nativeElement.querySelector(\"table\") as HTMLTableElement;\n\n// `TableDomAdapter` implements `TableAdapter` and provides a consistent interface to query rows and columns in a table\nconst tableAdapter = new TableDomAdapter(table);\n\n// the keydown events that we'll use for keyboard navigation of the table\nconst keydownEventStream = fromEvent<KeyboardEvent>(table, \"keydown\");\n\n// the click events we'll use to ensure focus is updated correctly on click\nconst clickEventStream = fromEvent<MouseEvent>(table, \"click\");\n\n// the `DataGridInteractionModel` instance!\nthis.interactionModel = new DataGridInteractionModel(keydownEventStream, clickEventStream, tableAdapter);\n\n// subscribe to the combined position updates\nthis.interactionModel.position.subscribe(event => {\n\tconst [currentRow, currentColumn] = event.current;\n\tconst [previousRow, previousColumn] = event.previous;\n\n\t// query the TableAdapter for the cell at the current row and column ...\n\tconst currentElement = tableAdapter.getCell(currentRow, currentColumn);\n\t// ... and make it focusable it\n\tTable.setTabIndex(currentElement, 0);\n\n\t// if the model has just initialized don't focus or reset anything\n\tif (previousRow === -1 || previousColumn === -1) { return; }\n\n\t// query the TableAdapter for the cell at the previous row and column ...\n\tconst previousElement = tableAdapter.getCell(previousRow, previousColumn);\n\t// ... and make it unfocusable (now there is only a single focusable cell)\n\tTable.setTabIndex(previousElement, -1);\n\n\t// finally, focus the current cell (skipped during initilzation)\n\tTable.focus(currentElement);\n});\n```\n */\nexport class DataGridInteractionModel {\n\t/**\n\t * An Observable that provides an aggregated view of the `rowIndex` and `columnIndex` Observables\n\t */\n\treadonly position: Observable<DataGridPosition>;\n\t/**\n\t * An Observable that provides the current and previous row indexes.\n\t */\n\treadonly rowIndex: Observable<{ current: number, previous: number }>;\n\t/**\n\t * An Observable that provides the current and previous column indexes.\n\t */\n\treadonly columnIndex: Observable<{ current: number, previous: number }>;\n\n\t/**\n\t * Internal subject to handle changes in row\n\t */\n\tprotected rowSubject = new BehaviorSubject({ current: 0, previous: -1 });\n\t/**\n\t * Internal subject to handle changes in column\n\t */\n\tprotected columnSubject = new BehaviorSubject({ current: 0, previous: -1 });\n\n\t/**\n\t * The latest value emitted by the rowSubject\n\t */\n\tprotected get currentRow() {\n\t\treturn this.rowSubject.getValue().current;\n\t}\n\n\t/**\n\t * The latest value emitted by the columnSubject\n\t */\n\tprotected get currentColumn() {\n\t\treturn this.columnSubject.getValue().current;\n\t}\n\n\t/**\n\t * The last column as reported by the adapter\n\t */\n\tprotected get lastColumn() {\n\t\treturn this.tableAdapter.lastColumnIndex;\n\t}\n\n\t/**\n\t * The last row as reported by the adapter\n\t */\n\tprotected get lastRow() {\n\t\treturn this.tableAdapter.lastRowIndex;\n\t}\n\n\t/**\n\t * `DataGridInteractionModel` requires knowledge of events, and a representation of your table/grid to be useful.\n\t *\n\t * @param keyboardEventStream an Observable of KeyboardEvents. Should be scoped to the table container.\n\t * @param clickEventStream an Observable of ClickEvents. should only include clicks that take action on items known by the TableAdapter\n\t * @param tableAdapter an instance of a concrete class that implements TableAdapter. The standard carbon table uses TableDomAdapter\n\t */\n\tconstructor(\n\t\tprotected keyboardEventStream: Observable<KeyboardEvent>,\n\t\tprotected clickEventStream: Observable<MouseEvent>,\n\t\tprotected tableAdapter: TableAdapter\n\t) {\n\t\tthis.rowIndex = this.rowSubject.asObservable();\n\t\tthis.columnIndex = this.columnSubject.asObservable();\n\t\tthis.position = combineLatest(this.rowIndex, this.columnIndex).pipe(map(positions => {\n\t\t\tconst [row, column] = positions;\n\t\t\treturn {\n\t\t\t\tcurrent: [row.current, column.current],\n\t\t\t\tprevious: [row.previous, column.previous]\n\t\t\t};\n\t\t})) as Observable<DataGridPosition>;\n\t\tthis.keyboardEventStream.subscribe(this.handleKeyboardEvent.bind(this));\n\t\tthis.clickEventStream.subscribe(this.handleClickEvent.bind(this));\n\t}\n\n\t/**\n\t * Handles moving the position according to the w3 datagrid navigation specs\n\t *\n\t * Refs:\n\t *  - https://www.w3.org/TR/wai-aria-practices/examples/grid/dataGrids.html\n\t *  - https://www.w3.org/TR/wai-aria-practices/#grid\n\t *\n\t * @param event the KeyboardEvent to handle\n\t */\n\thandleKeyboardEvent(event: KeyboardEvent) {\n\t\tconst currentCell = this.tableAdapter.getCell(this.currentRow, this.currentColumn);\n\t\tlet currentColumn = this.tableAdapter.findColumnIndex(currentCell);\n\t\tlet currentRow = this.tableAdapter.findRowIndex(currentCell);\n\n\t\tswitch (event.key) {\n\t\t\tcase \"Right\": // IE specific value\n\t\t\tcase \"ArrowRight\":\n\t\t\t\tevent.preventDefault();\n\t\t\t\t// add the colspan since findColumnIndex will return the\n\t\t\t\t// first column containing the cell (of N columns it may span)\n\t\t\t\t// and we want to navigate to the next \"real\" column\n\t\t\t\tthis.goToColumn(currentColumn + currentCell.colSpan);\n\t\t\t\tbreak;\n\t\t\tcase \"Left\": // IE specific value\n\t\t\tcase \"ArrowLeft\":\n\t\t\t\tevent.preventDefault();\n\t\t\t\t// we only ever need to subtract 1 from the column, since findColumnIndex returns the\n\t\t\t\t// first of N columns containing the cell\n\t\t\t\tthis.goToColumn(currentColumn - 1);\n\t\t\t\tbreak;\n\t\t\tcase \"Down\": // IE specific value\n\t\t\tcase \"ArrowDown\":\n\t\t\t\tevent.preventDefault();\n\t\t\t\tthis.goToRow(currentRow + currentCell.rowSpan);\n\t\t\t\tbreak;\n\t\t\tcase \"Up\": // IE specific value\n\t\t\tcase \"ArrowUp\":\n\t\t\t\tevent.preventDefault();\n\t\t\t\tthis.goToRow(currentRow - 1);\n\t\t\t\tbreak;\n\t\t\tcase \"Home\":\n\t\t\t\tevent.preventDefault();\n\t\t\t\tif (event.ctrlKey) {\n\t\t\t\t\tthis.goTo({row: 0, column: 0});\n\t\t\t\t} else {\n\t\t\t\t\tthis.goToColumn(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"End\":\n\t\t\t\tevent.preventDefault();\n\t\t\t\tif (event.ctrlKey) {\n\t\t\t\t\tthis.goTo({ row: this.lastRow, column: this.lastColumn });\n\t\t\t\t} else {\n\t\t\t\t\tthis.goToColumn(this.lastColumn);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Handles moving the position to the clicked cell\n\t *\n\t * @param event the MouseEvent to handle\n\t */\n\thandleClickEvent(event: MouseEvent) {\n\t\tconst cell = (event.target as HTMLElement).closest(\"td, th\") as HTMLTableCellElement;\n\t\tconst [rowIndex, cellIndex] = this.tableAdapter.findIndex(cell);\n\t\tthis.goTo({ row: rowIndex, column: cellIndex });\n\t}\n\n\t/**\n\t * Jump to a specific column without changing the row\n\t *\n\t * @param index column to jump to\n\t */\n\tgoToColumn(index: number) {\n\t\tif (index > this.lastColumn || index < 0) { return; }\n\t\tthis.goTo({ row: this.currentRow, column: index});\n\t}\n\n\t/**\n\t * Jump to a specific row without changing the column\n\t *\n\t * @param index row to jump to\n\t */\n\tgoToRow(index: number) {\n\t\tif (index > this.lastRow || index < 0) { return; }\n\t\tthis.goTo({row: index, column: this.currentColumn});\n\t}\n\n\t/**\n\t * Jump to the specified row and column\n\t *\n\t * @param param0 an object that contains `row` and `column` properties\n\t */\n\tgoTo({row, column}) {\n\t\tthis.rowSubject.next({ current: row, previous: this.currentRow });\n\t\tthis.columnSubject.next({ current: column, previous: this.currentColumn });\n\t}\n\n\t/**\n\t * Convenience method to reset the tab indexes on a standard carbon table.\n\t * For custom tables you may want to reset the indexes manually and simply call `.reset()`\n\t */\n\tresetTabIndexes(newTabIndex = -1) {\n\t\tfor (let i = 0; i < this.tableAdapter.lastRowIndex; i++) {\n\t\t\tconst row = this.tableAdapter.getRow(i) as HTMLTableRowElement;\n\t\t\tfor (const cell of Array.from(row.cells)) {\n\t\t\t\tconst tabbableElements = getFocusElementList(cell, tabbableSelectorIgnoreTabIndex);\n\t\t\t\ttabbableElements.forEach((node: HTMLElement) => node.tabIndex = newTabIndex);\n\t\t\t\tcell.tabIndex = newTabIndex;\n\t\t\t}\n\t\t}\n\n\t\tthis.reset();\n\t}\n\n\t/**\n\t * Resets the models focus position\n\t */\n\treset() {\n\t\tthis.rowSubject.next({ current: 0, previous: -1 });\n\t\tthis.columnSubject.next({ current: 0, previous: -1 });\n\t}\n}\n","/**\n * An abstract class that represents a cell in a table\n */\nexport abstract class TableCellAdapter {\n\t/**\n\t * The index of the cell in the table\n\t */\n\tcellIndex: number;\n\t/**\n\t * The number of columns spanned by this cell\n\t */\n\tcolSpan: number;\n\t/**\n\t * The number of rows spanned by this cell\n\t */\n\trowSpan: number;\n}\n\n/**\n * An abstract class that represents a row in a table\n */\nexport abstract class TableRowAdapter {\n\t/**\n\t * The index of the row in the table\n\t */\n\trowIndex: number;\n\t/**\n\t * An array (or `HTMLCollection`) of `TableCellAdapter`s\n\t */\n\tcells: HTMLCollection | TableCellAdapter[];\n}\n\n/**\n * An abstract representation of a table that provides\n * a standard interface to query 2d tables for cell and row information.\n */\nexport abstract class TableAdapter {\n\t/**\n\t * The last accessible column in the table\n\t */\n\tpublic get lastColumnIndex(): number { return; }\n\n\t/**\n\t * The last accessible row in the table\n\t */\n\tpublic get lastRowIndex(): number { return; }\n\n\t/**\n\t * Returns a cell from the table\n\t *\n\t * @param row index of the row\n\t * @param column index of the column\n\t */\n\tgetCell(row: number, column: number): TableCellAdapter { return; }\n\n\t/**\n\t * Returns a row from the table\n\t *\n\t * @param column index of the column\n\t */\n\tgetColumn(column: number): TableCellAdapter[] { return; }\n\n\t/**\n\t * Returns a row from the table\n\t *\n\t * @param row index of the row\n\t */\n\tgetRow(row: number): TableRowAdapter { return; }\n\n\t/**\n\t * Finds the column index of a given cell\n\t *\n\t * @param cell the cell to search for\n\t */\n\tfindColumnIndex(cell: TableCellAdapter): number { return; }\n\n\t/**\n\t * Finds the row index of a given cell\n\t *\n\t * @param cell the cell to search for\n\t */\n\tfindRowIndex(cell: TableCellAdapter): number { return; }\n\n\t/**\n\t * Finds the row and column index of a given cell\n\t *\n\t * @param cell the cell to search for\n\t * @returns a tuple that follows the `[row, column]` convention\n\t */\n\tfindIndex(cell: TableCellAdapter): [number, number] { return; }\n}\n\nenum TableDomSpanDirection {\n\tcolSpan = \"colSpan\",\n\trowSpan = \"rowSpan\"\n}\n\n/**\n * A concrete implementation of `TableAdapter`\n *\n * Provides standard and consistent access to table cells and rows\n */\nexport class TableDomAdapter implements TableAdapter {\n\t/**\n\t * The last accessible column in the table\n\t */\n\tpublic get lastColumnIndex() {\n\t\treturn this.getRealRowLength(this.tableElement.rows[0]);\n\t}\n\n\t/**\n\t * The last accessible row in the table\n\t */\n\tpublic get lastRowIndex() {\n\t\treturn this.tableElement.rows.length - 1;\n\t}\n\n\t/**\n\t * `TableDomAdapter` works on a normal HTML table structure.\n\t * Custom tables that don't follow the standard structure should use a custom implementation of `TableAdapter`.\n\t *\n\t * The standard structure allows us to directly query rows for cells and indexes - though we do have to handle colspans specially.\n\t *\n\t * @param tableElement the root HTML table element.\n\t */\n\tconstructor(public tableElement: HTMLTableElement) { }\n\n\t/**\n\t * Returns a cell from the table taking colspans in to account.\n\t *\n\t * @param row index of the row\n\t * @param column index of the column\n\t */\n\tgetCell(row: number, column: number): HTMLTableCellElement {\n\t\tconst col = this.getColumn(column);\n\n\t\treturn this.findCellInColumn(col, row).cell;\n\t}\n\n\t/**\n\t * Returns a column from the table, using the `id` and `headers` attributes\n\t *\n\t * See here for more detail these attributes: https://www.w3.org/TR/WCAG20-TECHS/H43.html\n\t *\n\t * @param column the index of the column\n\t */\n\tgetColumn(column: number): HTMLTableCellElement[] {\n\t\tconst firstHeader = Array.from(this.tableElement.rows[0].cells);\n\n\t\tconst { cell: header, realIndex: realColumnIndex } = this.findCellInRow(firstHeader, column);\n\n\t\tconst linkedCells: HTMLTableCellElement[] = [];\n\n\t\tfor (let i = 1; i < this.tableElement.rows.length; i++) {\n\t\t\tconst row = this.tableElement.rows[i];\n\t\t\t// query for any cells that are linked to the given header id\n\t\t\t// `~=` matches values in space separated lists - so `[headers~='foo']` would match `headers=\"foo bar\"` and `headers=\"foo\"`\n\t\t\t// but not `headers=\"bar\"` or `headers=\"bar baz\"`\n\t\t\tconst linkedRowCells: NodeListOf<HTMLTableCellElement> = row.querySelectorAll(`[headers~='${header.id}']`);\n\t\t\t// if we have more than one cell, get the one that is closest to the column\n\t\t\tif (linkedRowCells.length > 1) {\n\t\t\t\tconst { cell } = this.findCellInRow(Array.from(linkedRowCells), column - realColumnIndex);\n\t\t\t\tlinkedCells.push(cell);\n\t\t\t} else if (linkedRowCells[0]) {\n\t\t\t\tlinkedCells.push(linkedRowCells[0]);\n\t\t\t}\n\t\t}\n\n\t\t// return an empty array if we can't find any linked cells\n\t\t// returning anything else would be a lie\n\t\tif (!linkedCells) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn [header, ...linkedCells];\n\t}\n\n\t/**\n\t * Returns a row from the table\n\t *\n\t * @param row index of the row\n\t */\n\tgetRow(row: number): HTMLTableRowElement {\n\t\treturn this.tableElement.rows[row];\n\t}\n\n\t/**\n\t * Finds the column index of a given cell\n\t *\n\t * @param cell the cell to search for\n\t */\n\tfindColumnIndex(cell: HTMLTableCellElement): number {\n\t\tconst row = this.getRow(this.findRowIndex(cell));\n\t\tif (!row) {\n\t\t\treturn;\n\t\t}\n\t\t// if the cell has linked headers we can do a more accurate lookup\n\t\tif (cell && cell.headers) {\n\t\t\tconst ids = cell.headers.split(\" \");\n\t\t\tconst headerRows = Array.from(this.tableElement.tHead.rows);\n\t\t\tconst indexes = [];\n\n\t\t\t// start from the last row and work up\n\t\t\tfor (const headerRow of headerRows.reverse()) {\n\t\t\t\tconst headerCells = Array.from(headerRow.cells);\n\t\t\t\tconst header = headerCells.find(headerCell => ids.includes(headerCell.id));\n\t\t\t\t// if we have a matching header, find it's index (adjusting for colspans)\n\t\t\t\tif (header) {\n\t\t\t\t\t// this is borrowed from below\n\t\t\t\t\tlet cellIndex = 0;\n\t\t\t\t\tfor (const c of headerCells) {\n\t\t\t\t\t\tif (c === header) { break; }\n\t\t\t\t\t\tcellIndex += c.colSpan;\n\t\t\t\t\t}\n\t\t\t\t\tindexes.push(cellIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// sort the indexes largest to smallest to find the closest matching header index\n\t\t\tconst firstIndex = indexes.sort((a, b) => b - a)[0];\n\n\t\t\t// search the row for cells that share the header\n\t\t\tlet similarCells = [];\n\t\t\tfor (const id of ids) {\n\t\t\t\t// there's no selector that will match two space separated lists,\n\t\t\t\t// so we have to iterate through the ids and query the row for each\n\t\t\t\tconst rowCells = Array.from(row.querySelectorAll(`[headers~='${id}']`));\n\t\t\t\tfor (const rowCell of rowCells) {\n\t\t\t\t\t// only keep one set of cells\n\t\t\t\t\tif (!similarCells.includes(rowCell)) {\n\t\t\t\t\t\tsimilarCells.push(rowCell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// DOM order is not preserved, so we have to sort the row\n\t\t\tsimilarCells = similarCells.sort((a: HTMLTableCellElement, b: HTMLTableCellElement) => a.cellIndex - b.cellIndex);\n\n\t\t\t// return the header index plus any adjustment within that headers column\n\t\t\treturn firstIndex + similarCells.indexOf(cell);\n\t\t}\n\n\t\t// fallback if the cell isn't linked to any headers\n\t\tlet cellIndex = 0;\n\t\tfor (const c of Array.from(row.cells)) {\n\t\t\tif (c === cell) { break; }\n\t\t\tcellIndex += c.colSpan;\n\t\t}\n\t\treturn cellIndex;\n\t}\n\n\t/**\n\t * Finds the row index of a given cell\n\t *\n\t * @param cell the cell to search for\n\t */\n\tfindRowIndex(cell: HTMLTableCellElement): number {\n\t\tfor (const row of Array.from(this.tableElement.rows)) {\n\t\t\tif (row.contains(cell)) {\n\t\t\t\treturn row.rowIndex;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Finds the row and column index of a given cell\n\t *\n\t * @param cell the cell to search for\n\t * @returns a tuple that follows the `[row, column]` convention\n\t */\n\tfindIndex(cell: HTMLTableCellElement): [number, number] {\n\t\treturn [this.findRowIndex(cell), this.findColumnIndex(cell)];\n\t}\n\n\t/**\n\t * Helper function that returns the \"real\" length of a row.\n\t * Only accurate with regard to colspans (though that's sufficient for it's uses here)\n\t *\n\t * TODO: Take rowSpan into account\n\t *\n\t * @param row the row to get the length of\n\t */\n\tprotected getRealRowLength(row: HTMLTableRowElement): number {\n\t\t// start at -1 since the colspans will sum to 1 index greater than the total\n\t\treturn Array.from(row.cells).reduce((count, cell) => count + cell.colSpan, -1);\n\t}\n\n\t/**\n\t * Finds a cell and it's real index given an array of cells, a target index, and the spanning direction\n\t *\n\t * @param cells An array of cells to search\n\t * @param targetIndex The index we think the cell is located at\n\t * @param spanDirection The direction of the cell spans. Should be `\"colSpan\"` for a row and `\"rowSpan\"` for a column\n\t */\n\tprotected findCell(cells: HTMLTableCellElement[], targetIndex: number, spanDirection: TableDomSpanDirection) {\n\t\t// rows/cols can have fewer total cells than the actual table\n\t\t// the model pretends all rows/cols behave the same (with col/row spans > 1 being N cells long)\n\t\t// this maps that view to the HTML view (col/row spans > 1 are one element, so the array is shorter)\n\t\tlet realIndex = 0;\n\t\t// i is only used for iterating the cells\n\t\tfor (let i = 0; i < targetIndex;) {\n\t\t\t// skip the next N cells\n\t\t\ti += cells[realIndex][spanDirection];\n\t\t\t// don't bump realIndex if i now exceeds the cell we're shooting for\n\t\t\tif (i > targetIndex) { break; }\n\t\t\t// finally, increment realIndex (to keep it generally in step with i)\n\t\t\trealIndex++;\n\t\t}\n\n\t\treturn {\n\t\t\tcell: cells[realIndex],\n\t\t\trealIndex\n\t\t};\n\t}\n\n\t/**\n\t * Helper method around `findCell`, searches based on a row of cells\n\t *\n\t * @param row the row of elements to search\n\t * @param index the index of the element\n\t */\n\tprotected findCellInRow(row: HTMLTableCellElement[], index: number) {\n\t\treturn this.findCell(row, index, TableDomSpanDirection.colSpan);\n\t}\n\n\t/**\n\t * Helper method around `findCell`, searches based on a column of cells\n\t *\n\t * @param col the column of elements to search\n\t * @param index the index of the element\n\t */\n\tprotected findCellInColumn(col: HTMLTableCellElement[], index: number) {\n\t\treturn this.findCell(col, index, TableDomSpanDirection.rowSpan);\n\t}\n}\n","import {\n\tComponent,\n\tApplicationRef,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tElementRef,\n\tAfterViewInit,\n\tTemplateRef,\n\tOnDestroy,\n\tHostBinding\n} from \"@angular/core\";\nimport { Subscription, fromEvent, Observable } from \"rxjs\";\n\nimport { TableModel } from \"./table-model.class\";\nimport { TableHeaderItem } from \"./table-header-item.class\";\nimport { TableItem } from \"./table-item.class\";\n\nimport { getFocusElementList, tabbableSelectorIgnoreTabIndex } from \"carbon-components-angular/common\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { merge } from \"carbon-components-angular/utils\";\nimport { DataGridInteractionModel } from \"./data-grid-interaction-model.class\";\nimport { TableDomAdapter } from \"./table-adapter.class\";\nimport { TableRowSize } from \"./table.types\";\n\n/**\n * Build your table with this component by extending things that differ from default.\n *\n * [See demo](../../?path=/story/components-table--basic)\n *\n * Instead of the usual write-your-own-html approach you had with `<table>`,\n * carbon table uses model-view-controller approach.\n *\n * Here, you create a view (with built-in controller) and provide it a model.\n * Changes you make to the model are reflected in the view. Provide same model you use\n * in the table to the `<ibm-pagination>` components.\n * They provide a different view over the same data.\n *\n * ## Basic usage\n *\n * ```html\n * <ibm-table [model]=\"model\"></ibm-table>\n * ```\n *\n * ```typescript\n * public model = new TableModel();\n *\n * this.model.data = [\n * \t[new TableItem({data: \"asdf\"}), new TableItem({data: \"qwer\"})],\n * \t[new TableItem({data: \"csdf\"}), new TableItem({data: \"zwer\"})],\n * \t[new TableItem({data: \"bsdf\"}), new TableItem({data: \"swer\"})],\n * \t[new TableItem({data: \"csdf\"}), new TableItem({data: \"twer\"})]\n * ];\n * ```\n *\n * ## Customization\n *\n * If you have custom data in your table, you need a way to display it. You can do that\n * by providing a template to `TableItem`.\n *\n * ```html\n * <ng-template #customTableItemTemplate let-data=\"data\">\n * \t<a [routerLink]=\"data.link\">{{data.name}} {{data.surname}}</a>\n * </ng-template>\n * ```\n *\n * ```typescript\n * customTableItemTemplate: TemplateRef<any>;\n *\n * this.customModel.data = [\n * \t[new TableItem({data: \"asdf\"}), new TableItem({data: {name: \"Lessy\", link: \"/table\"}, template: this.customTableItemTemplate})],\n * \t[new TableItem({data: \"csdf\"}), new TableItem({data: \"swer\"})],\n * \t[new TableItem({data: \"bsdf\"}), new TableItem({data: {name: \"Alice\", surname: \"Bob\"}, template: this.customTableItemTemplate})],\n * \t[new TableItem({data: \"csdf\"}), new TableItem({data: \"twer\"})],\n * ];\n * ```\n *\n * ### Sorting and filtering\n *\n * In case you need custom sorting and/or filtering you should subclass `TableHeaderItem`\n * and override needed functions.\n *\n * ```typescript\n * class FilterableHeaderItem extends TableHeaderItem {\n * \t// custom filter function\n * \tfilter(item: TableItem): boolean {\n * \t\tif (typeof item.data === \"string\" && item.data.toLowerCase().indexOf(this.filterData.data.toLowerCase()) >= 0 ||\n * \t\titem.data.name && item.data.name.toLowerCase().indexOf(this.filterData.data.toLowerCase()) >= 0 ||\n * \t\titem.data.surname && item.data.surname.toLowerCase().indexOf(this.filterData.data.toLowerCase()) >= 0) {\n * \t\t\treturn false;\n * \t\t}\n * \t\treturn true;\n * \t}\n *\n * \tset filterCount(n) {}\n * \tget filterCount() {\n * \t\treturn (this.filterData && this.filterData.data && this.filterData.data.length > 0) ? 1 : 0;\n * \t}\n *\n * \t// used for custom sorting\n * \tcompare(one: TableItem, two: TableItem) {\n * \t\tconst stringOne = (one.data.name || one.data.surname || one.data).toLowerCase();\n * \t\tconst stringTwo = (two.data.name || two.data.surname || two.data).toLowerCase();\n *\n * \t\tif (stringOne > stringTwo) {\n * \t\t\treturn 1;\n * \t\t} else if (stringOne < stringTwo) {\n * \t\t\treturn -1;\n * \t\t} else {\n * \t\t\treturn 0;\n * \t\t}\n * \t}\n * }\n * ```\n *\n * If you want to do your sorting on the backend or query for sorted data as a result of user\n * clicking the table header, check table [`sort`](#sort) output documentation\n *\n * See `TableHeaderItem` class for more information.\n *\n * ## No data template\n *\n * When table has no data to show, it can show a message you provide it instead.\n *\n * ```html\n * <ibm-table [model]=\"model\">No data.</ibm-table>\n * ```\n *\n * ... will show `No data.` message, but you can get creative and provide any template you want\n * to replace table's default `tbody`.\n *\n * ## Use pagination as table footer\n *\n * ```html\n * <ibm-pagination [model]=\"model\" (selectPage)=\"selectPage($event)\"></ibm-pagination>\n * ```\n *\n * `selectPage()` function should fetch the data from backend, create new `data`, apply it to `model.data`,\n * and update `model.currentPage`.\n *\n * If the data your server returns is a two dimensional array of objects, it would look something like this:\n *\n * ```typescript\n * selectPage(page) {\n * \tthis.getPage(page).then((data: Array<Array<any>>) => {\n * \t\t// set the data and update page\n * \t\tthis.model.data = this.prepareData(data);\n * \t\tthis.model.currentPage = page;\n * \t});\n * }\n *\n * protected prepareData(data: Array<Array<any>>) {\n * \t// create new data from the service data\n * \tlet newData = [];\n * \tdata.forEach(dataRow => {\n * \t\tlet row = [];\n * \t\tdataRow.forEach(dataElement => {\n * \t\t\trow.push(new TableItem({\n * \t\t\t\tdata: dataElement,\n * \t\t\t\ttemplate: typeof dataElement === \"string\" ? undefined : this.paginationTableItemTemplate\n * \t\t\t\t// your template can handle all the data types so you don't have to conditionally set it\n * \t\t\t\t// you can also set different templates for different columns based on index\n * \t\t\t}));\n * \t\t});\n * \t\tnewData.push(row);\n * \t});\n * \treturn newData;\n * }\n * ```\n *\n * <example-url>../../iframe.html?id=components-table--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-table\",\n\ttemplate: `\n\t<table\n\t\tibmTable\n\t\t[sortable]=\"sortable\"\n\t\t[noBorder]=\"noBorder\"\n\t\t[ngClass]=\"{'bx--data-table--sticky-header': stickyHeader}\"\n\t\t[size]=\"size\"\n\t\t[striped]=\"striped\"\n\t\t[skeleton]=\"skeleton\">\n\t\t<thead\n\t\t\tibmTableHead\n\t\t\t[sortable]=\"sortable\"\n\t\t\t(deselectAll)=\"onDeselectAll()\"\n\t\t\t(selectAll)=\"onSelectAll()\"\n\t\t\t(sort)=\"doSort($event)\"\n\t\t\t[checkboxHeaderLabel]=\"getCheckboxHeaderLabel()\"\n\t\t\t[filterTitle]=\"getFilterTitle()\"\n\t\t\t[model]=\"model\"\n\t\t\t[size]=\"size\"\n\t\t\t[selectAllCheckbox]=\"selectAllCheckbox\"\n\t\t\t[selectAllCheckboxSomeSelected]=\"selectAllCheckboxSomeSelected\"\n\t\t\t[showSelectionColumn]=\"showSelectionColumn\"\n\t\t\t[enableSingleSelect]=\"enableSingleSelect\"\n\t\t\t[skeleton]=\"skeleton\"\n\t\t\t[sortAscendingLabel]=\"sortAscendingLabel\"\n\t\t\t[sortDescendingLabel]=\"sortDescendingLabel\"\n\t\t\t[stickyHeader]=\"stickyHeader\">\n\t\t</thead>\n\t\t<tbody\n\t\t\tibmTableBody\n\t\t\t(deselectRow)=\"onSelectRow($event)\"\n\t\t\t(scroll)=\"onScroll($event)\"\n\t\t\t(selectRow)=\"onSelectRow($event)\"\n\t\t\t[checkboxRowLabel]=\"getCheckboxRowLabel()\"\n\t\t\t[enableSingleSelect]=\"enableSingleSelect\"\n\t\t\t(rowClick)=\"onRowClick($event)\"\n\t\t\t[expandButtonAriaLabel]=\"expandButtonAriaLabel\"\n\t\t\t[model]=\"model\"\n\t\t\t[size]=\"size\"\n\t\t\t[ngStyle]=\"{'overflow-y': 'scroll'}\"\n\t\t\t[selectionLabelColumn]=\"selectionLabelColumn\"\n\t\t\t[showSelectionColumn]=\"showSelectionColumn\"\n\t\t\t[skeleton]=\"skeleton\"\n\t\t\t*ngIf=\"!noData; else noDataTemplate\">\n\t\t</tbody>\n\t\t<ng-template #noDataTemplate><ng-content></ng-content></ng-template>\n\t\t<tfoot>\n\t\t\t<ng-template\n\t\t\t\t[ngTemplateOutlet]=\"footerTemplate\">\n\t\t\t</ng-template>\n\t\t\t<tr *ngIf=\"this.model.isLoading\">\n\t\t\t\t<td class=\"table_loading-indicator\">\n\t\t\t\t\t<div class=\"bx--loading bx--loading--small\">\n\t\t\t\t\t\t<svg class=\"bx--loading__svg\" viewBox=\"-75 -75 150 150\">\n\t\t\t\t\t\t\t<circle class=\"bx--loading__stroke\" cx=\"0\" cy=\"0\" r=\"37.5\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr *ngIf=\"this.model.isEnd\">\n\t\t\t\t<td class=\"table_end-indicator\">\n\t\t\t\t\t<h5>{{getEndOfDataText() | async}}</h5>\n\t\t\t\t\t<button (click)=\"scrollToTop($event)\" class=\"btn--secondary-sm\">\n\t\t\t\t\t\t{{getScrollTopText() | async}}\n\t\t\t\t\t</button>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tfoot>\n\t</table>\n\t`\n})\nexport class Table implements AfterViewInit, OnDestroy {\n\t/**\n\t * Creates a skeleton model with a row and column count specified by the user\n\t *\n\t * Example:\n\t *\n\t * ```typescript\n\t * this.model = Table.skeletonModel(5, 5);\n\t * ```\n\t */\n\tstatic skeletonModel(rowCount: number, columnCount: number) {\n\t\tconst model = new TableModel();\n\t\tlet header = new Array<TableHeaderItem>();\n\t\tlet data = new Array<Array<TableItem>>();\n\t\tlet row = new Array<TableItem>();\n\n\t\tfor (let i = 0; i < columnCount; i++) {\n\t\t\theader.push(new TableHeaderItem());\n\t\t\trow.push(new TableItem());\n\t\t}\n\t\tfor (let i = 0; i < rowCount - 1; i++) {\n\t\t\tdata.push(row);\n\t\t}\n\n\t\tmodel.header = header;\n\t\tmodel.data = data;\n\t\treturn model;\n\t}\n\n\tstatic setTabIndex(element: HTMLElement, index: -1 | 0) {\n\t\tconst focusElementList = getFocusElementList(element, tabbableSelectorIgnoreTabIndex);\n\t\tif (element.firstElementChild && element.firstElementChild.classList.contains(\"bx--table-sort\") && focusElementList.length > 0) {\n\t\t\tfocusElementList[0].tabIndex = index;\n\t\t} else {\n\t\t\telement.tabIndex = index;\n\t\t}\n\t}\n\n\tstatic focus(element: HTMLElement) {\n\t\tconst focusElementList = getFocusElementList(element, tabbableSelectorIgnoreTabIndex);\n\t\tif (element.firstElementChild && element.firstElementChild.classList.contains(\"bx--table-sort\") && focusElementList.length > 0) {\n\t\t\tfocusElementList[0].focus();\n\t\t} else {\n\t\t\telement.focus();\n\t\t}\n\t}\n\n\t/**\n\t * `TableModel` with data the table is to display.\n\t */\n\t@Input()\n\tset model(m: TableModel) {\n\t\tif (this._model) {\n\t\t\tthis.subscriptions.unsubscribe();\n\t\t\t// Need to create a new subscription instance here because unsubscribing prevents any new subscriptions\n\t\t\t// from being added for some reason. When a new model is set, none of the subscriptions would exist.\n\t\t\tthis.subscriptions = new Subscription();\n\t\t}\n\n\t\tthis._model = m;\n\n\t\tconst rowsChange = this._model.rowsSelectedChange.subscribe(() => this.updateSelectAllCheckbox());\n\t\tconst dataChange = this._model.dataChange.subscribe(() => {\n\t\t\tif (this.isDataGrid) {\n\t\t\t\tthis.resetTabIndex();\n\t\t\t}\n\t\t\tthis.updateSelectAllCheckbox();\n\t\t});\n\n\t\tthis.subscriptions.add(rowsChange);\n\t\tthis.subscriptions.add(dataChange);\n\n\t\tif (this.isDataGrid) {\n\t\t\tconst expandedChange = this._model.rowsExpandedChange.subscribe(() => {\n\t\t\t\t// Allows the expanded row to have a focus state when it exists in the DOM\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst expandedRows = this.elementRef.nativeElement.querySelectorAll(\".bx--expandable-row:not(.bx--parent-row)\");\n\t\t\t\t\tArray.from<any>(expandedRows).forEach(row => {\n\t\t\t\t\t\tif (row.firstElementChild.tabIndex === undefined || row.firstElementChild.tabIndex !== -1) {\n\t\t\t\t\t\t\trow.firstElementChild.tabIndex = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.subscriptions.add(expandedChange);\n\t\t}\n\t}\n\n\tget model(): TableModel {\n\t\treturn this._model;\n\t}\n\n\t/**\n\t * Size of the table rows.\n\t */\n\t@Input() size: TableRowSize = \"md\";\n\t/**\n\t * Set to `true` for a loading table.\n\t */\n\t@Input() skeleton = false;\n\t/**\n\t * Set to `true` for a data grid with keyboard interactions.\n\t */\n\t@Input() set isDataGrid(value: boolean) {\n\t\tthis._isDataGrid = value;\n\t\tif (this.isViewReady) {\n\t\t\tif (value) {\n\t\t\t\tthis.enableDataGridInteractions();\n\t\t\t} else {\n\t\t\t\tthis.disableDataGridInteractions();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Setting sortable to false will disable all headers including headers which are sortable. Is is\n\t * possible to set the sortable state on the header item to disable/enable sorting for only some headers.\n\t */\n\t@Input() sortable = true;\n\n\t@Input() noBorder = true;\n\n\tget isDataGrid(): boolean {\n\t\treturn this._isDataGrid;\n\t}\n\n\t/**\n\t * Controls whether to show the selection checkboxes column or not.\n\t */\n\t@Input() showSelectionColumn = true;\n\n\t/**\n\t * Controls whether to enable multiple or single row selection.\n\t */\n\t@Input() enableSingleSelect = false;\n\n\t/**\n\t * Distance (in px) from the bottom that view has to reach before\n\t * `scrollLoad` event is emitted.\n\t */\n\t@Input() scrollLoadDistance = 0;\n\n\t/**\n\t * Set to `true` to enable users to resize columns.\n\t *\n\t * Works for columns with width set in pixels.\n\t *\n\t */\n\t@Input() columnsResizable = false;\n\n\t/**\n\t * Set to `true` to enable users to drag and drop columns.\n\t *\n\t * Changing the column order in table changes table model. Be aware of it when you add additional data\n\t * to the model.\n\t *\n\t */\n\t@Input() columnsDraggable = false;\n\n\t@Input()\n\tset expandButtonAriaLabel(value: string | Observable<string>) {\n\t\tthis._expandButtonAriaLabel.override(value);\n\t}\n\tget expandButtonAriaLabel() {\n\t\treturn this._expandButtonAriaLabel.value;\n\t}\n\t@Input()\n\tset sortDescendingLabel(value: string | Observable<string>) {\n\t\tthis._sortDescendingLabel.override(value);\n\t}\n\tget sortDescendingLabel() {\n\t\treturn this._sortDescendingLabel.value;\n\t}\n\t@Input()\n\tset sortAscendingLabel(value: string | Observable<string>) {\n\t\tthis._sortAscendingLabel.override(value);\n\t}\n\tget sortAscendingLabel() {\n\t\treturn this._sortAscendingLabel.value;\n\t}\n\n\t/**\n\t * Expects an object that contains some or all of:\n\t * ```\n\t * {\n\t *\t\t\"FILTER\": \"Filter\",\n\t *\t\t\"END_OF_DATA\": \"You've reached the end of your content\",\n\t *\t\t\"SCROLL_TOP\": \"Scroll to top\",\n\t *\t\t\"CHECKBOX_HEADER\": \"Select all rows\",\n\t *\t\t\"CHECKBOX_ROW\": \"Select row\"\n\t * }\n\t * ```\n\t */\n\t@Input()\n\tset translations (value) {\n\t\tconst valueWithDefaults = merge(this.i18n.getMultiple(\"TABLE\"), value);\n\t\tthis._filterTitle.override(valueWithDefaults.FILTER);\n\t\tthis._endOfDataText.override(valueWithDefaults.END_OF_DATA);\n\t\tthis._scrollTopText.override(valueWithDefaults.SCROLL_TOP);\n\t\tthis._checkboxHeaderLabel.override(valueWithDefaults.CHECKBOX_HEADER);\n\t\tthis._checkboxRowLabel.override(valueWithDefaults.CHECKBOX_ROW);\n\t}\n\n\t/**\n\t * Set to `false` to remove table rows (zebra) stripes.\n\t */\n\t@Input() striped = true;\n\n\t/**\n\t * Set to `true` to stick the header to the top of the table\n\t */\n\t@HostBinding(\"class.bx--data-table_inner-container\") @Input() stickyHeader = false;\n\n\t/**\n\t * Set footer template to customize what is displayed in the tfoot section of the table\n\t */\n\t@Input() footerTemplate: TemplateRef<any>;\n\n\t/**\n\t * Used to populate the row selection checkbox label with a useful value if set.\n\t *\n\t * Example:\n\t * ```\n\t * <ibm-table [selectionLabelColumn]=\"0\"></ibm-table>\n\t * <!-- results in aria-label=\"Select first column value\"\n\t * (where \"first column value\" is the value of the first column in the row -->\n\t * ```\n\t */\n\t@Input() selectionLabelColumn: number;\n\n\t/**\n\t * Emits an index of the column that wants to be sorted.\n\t *\n\t * If no observers are provided (default), table will attempt to do a simple sort of the data loaded\n\t * into the model.\n\t *\n\t * If an observer is provided, table will not attempt any sorting of its own and it is up to the observer\n\t * to sort the table. This is what you typically want if you're using a backend query to get the sorted\n\t * data or want to sort data across multiple pages.\n\t *\n\t * Usage:\n\t *\n\t * ```typescript\n\t * @Component({\n\t * \tselector: \"app-table\",\n\t * \ttemplate: `\n\t * \t\t<ibm-table\n\t * \t\t\t[model]=\"model\"\n\t * \t\t\t(sort)=\"simpleSort($event)\">\n\t * \t\t\tNo data.\n\t * \t\t</ibm-table>\n\t * \t`\n\t * })\n\t * export class TableApp implements OnInit, OnChanges {\n\t * \t@Input() model = new TableModel();\n\t *\n\t * \tngOnInit() {\n\t * \t\tthis.model.header = [\n\t * \t\t\tnew TableHeaderItem({ data: \"Name\" }),\n\t * \t\t\tnew TableHeaderItem({ data: \"hwer\" })\n\t * \t\t];\n\t *\n\t * \t\tthis.model.data = [\n\t * \t\t\t[new TableItem({ data: \"Name 1\" }), new TableItem({ data: \"qwer\" })],\n\t * \t\t\t[new TableItem({ data: \"Name 3\" }), new TableItem({ data: \"zwer\" })],\n\t * \t\t\t[new TableItem({ data: \"Name 2\" }), new TableItem({ data: \"swer\" })],\n\t * \t\t\t[new TableItem({ data: \"Name 4\" }), new TableItem({data: \"twer\"})],\n\t * \t\t\t[new TableItem({ data: \"Name 5\" }), new TableItem({data: \"twer\"})],\n\t * \t\t\t[new TableItem({ data: \"Name 6\" }), new TableItem({data: \"twer\"})]\n\t * \t\t];\n\t * \t}\n\t *\n\t * \tsimpleSort(index: number) {\n\t * \t\t// this function does a simple sort, which is the default for the table and if that's\n\t * \t\t// all you want, you don't need to do this.\n\t *\n\t * \t\t// here you can query your backend and update the model.data based on the result\n\t * \t\tif (this.model.header[index].sorted) {\n\t * \t\t\t// if already sorted flip sorting direction\n\t * \t\t\tthis.model.header[index].ascending = this.model.header[index].descending;\n\t * \t\t}\n\t * \t\tthis.model.sort(index);\n\t * \t}\n\t * }\n\t * ```\n\t */\n\t@Output() sort = new EventEmitter<number>();\n\n\t/**\n\t * Emits if all rows are selected.\n\t *\n\t * @param model\n\t */\n\t@Output() selectAll = new EventEmitter<Object>();\n\n\t/**\n\t * Emits if all rows are deselected.\n\t *\n\t * @param model\n\t */\n\t@Output() deselectAll = new EventEmitter<Object>();\n\n\t/**\n\t * Emits if a single row is selected.\n\t *\n\t * @param ({model: this.model, selectedRowIndex: index})\n\t */\n\t@Output() selectRow = new EventEmitter<Object>();\n\n\t/**\n\t * Emits if a single row is deselected.\n\t *\n\t * @param ({model: this.model, deselectedRowIndex: index})\n\t */\n\t@Output() deselectRow = new EventEmitter<Object>();\n\n\t/**\n\t * Emits if a row item excluding expandButtons, checkboxes, or radios is clicked.\n\t */\n\t@Output() rowClick = new EventEmitter<number>();\n\n\t/**\n\t * Emits when table requires more data to be loaded.\n\t */\n\t@Output() scrollLoad = new EventEmitter<TableModel>();\n\n\t/**\n\t * Controls if all checkboxes are viewed as selected.\n\t */\n\tselectAllCheckbox = false;\n\n\t/**\n\t * Controls the indeterminate state of the header checkbox.\n\t */\n\tselectAllCheckboxSomeSelected = false;\n\n\tget noData() {\n\t\treturn !this.model.data ||\n\t\t\tthis.model.data.length === 0 ||\n\t\t\tthis.model.data.length === 1 && this.model.data[0].length === 0;\n\t}\n\n\tpublic isColumnDragging = false;\n\tpublic columnDraggedHoverIndex = -1;\n\tpublic columnDraggedPosition = \"\";\n\n\tprotected _model: TableModel;\n\tprotected _isDataGrid = false;\n\t// flag to prevent getters/setters from querying the view before it's fully instantiated\n\tprotected isViewReady = false;\n\n\tprotected subscriptions = new Subscription();\n\tprotected positionSubscription: Subscription;\n\n\tprotected interactionModel: DataGridInteractionModel;\n\tprotected interactionPositionSubscription: Subscription;\n\n\tprotected _expandButtonAriaLabel  = this.i18n.getOverridable(\"TABLE.EXPAND_BUTTON\");\n\tprotected _sortDescendingLabel = this.i18n.getOverridable(\"TABLE.SORT_DESCENDING\");\n\tprotected _sortAscendingLabel = this.i18n.getOverridable(\"TABLE.SORT_ASCENDING\");\n\tprotected _checkboxHeaderLabel = this.i18n.getOverridable(\"TABLE.CHECKBOX_HEADER\");\n\tprotected _checkboxRowLabel = this.i18n.getOverridable(\"TABLE.CHECKBOX_ROW\");\n\tprotected _endOfDataText = this.i18n.getOverridable(\"TABLE.END_OF_DATA\");\n\tprotected _scrollTopText = this.i18n.getOverridable(\"TABLE.SCROLL_TOP\");\n\tprotected _filterTitle = this.i18n.getOverridable(\"TABLE.FILTER\");\n\n\tprotected columnResizeWidth: number;\n\tprotected columnResizeMouseX: number;\n\tprotected mouseMoveSubscription: Subscription;\n\tprotected mouseUpSubscription: Subscription;\n\n\t/**\n\t * Creates an instance of Table.\n\t */\n\tconstructor(\n\t\tprotected elementRef: ElementRef,\n\t\tprotected applicationRef: ApplicationRef,\n\t\tprotected i18n: I18n\n\t) {}\n\n\tngAfterViewInit() {\n\t\tthis.isViewReady = true;\n\t\tif (this.isDataGrid) {\n\t\t\tthis.enableDataGridInteractions();\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tthis.subscriptions.unsubscribe();\n\t\tif (this.positionSubscription) {\n\t\t\tthis.positionSubscription.unsubscribe();\n\t\t}\n\t}\n\n\tenableDataGridInteractions() {\n\t\t// if we have an `interactioModel` we've already enabled datagrid\n\t\tif (this.interactionModel) {\n\t\t\treturn;\n\t\t}\n\t\tconst table = this.elementRef.nativeElement.querySelector(\"table\") as HTMLTableElement;\n\t\tconst tableAdapter = new TableDomAdapter(table);\n\t\tconst keydownEventStream = fromEvent<KeyboardEvent>(table, \"keydown\");\n\t\tconst clickEventStream = fromEvent<MouseEvent>(table, \"click\");\n\t\tthis.interactionModel = new DataGridInteractionModel(keydownEventStream, clickEventStream, tableAdapter);\n\t\tthis.positionSubscription = this.interactionModel.position.subscribe(event => {\n\t\t\tconst [currentRow, currentColumn] = event.current;\n\t\t\tconst [previousRow, previousColumn] = event.previous;\n\n\t\t\tconst currentElement = tableAdapter.getCell(currentRow, currentColumn);\n\t\t\tTable.setTabIndex(currentElement, 0);\n\n\t\t\t// if the model has just initialized don't focus or reset anything\n\t\t\tif (previousRow === -1 || previousColumn === -1) { return; }\n\t\t\t// Make the previous cell unfocusable (if it's not the current)\n\t\t\tif (previousRow !== currentRow || previousColumn !== currentColumn) {\n\t\t\t\tconst previousElement = tableAdapter.getCell(previousRow, previousColumn);\n\t\t\t\tTable.setTabIndex(previousElement, -1);\n\t\t\t}\n\t\t\tTable.focus(currentElement);\n\t\t});\n\t\t// call this after assigning `this.interactionModel` since it depends on it\n\t\tthis.resetTabIndex();\n\t}\n\n\tdisableDataGridInteractions() {\n\t\t// unsubscribe first so we don't cause the focus to fly around\n\t\tif (this.positionSubscription) {\n\t\t\tthis.positionSubscription.unsubscribe();\n\t\t}\n\t\t// undo tab indexing (also resets the model)\n\t\tthis.resetTabIndex(0);\n\t\t// null out the model ref\n\t\tthis.interactionModel = null;\n\t}\n\n\tonSelectAll() {\n\t\tthis.model.selectAll(true);\n\t\tthis.selectAll.emit(this.model);\n\t}\n\n\tonDeselectAll() {\n\t\tthis.model.selectAll(false);\n\t\tthis.deselectAll.emit(this.model);\n\t}\n\n\tonSelectRow(event) {\n\t\t// check for the existence of the selectedRowIndex property\n\t\tif (Object.keys(event).includes(\"selectedRowIndex\")) {\n\t\t\tif (this.enableSingleSelect) {\n\t\t\t\tthis.model.selectAll(false);\n\t\t\t}\n\t\t\tthis.model.selectRow(event.selectedRowIndex, true);\n\t\t\tthis.selectRow.emit(event);\n\t\t} else {\n\t\t\tthis.model.selectRow(event.deselectedRowIndex, false);\n\t\t\tthis.deselectRow.emit(event);\n\t\t}\n\t}\n\n\tonRowClick(index: number) {\n\t\tthis.rowClick.emit(index);\n\t}\n\n\tupdateSelectAllCheckbox() {\n\t\tconst selectedRowsCount = this.model.selectedRowsCount();\n\n\t\tif (selectedRowsCount <= 0) {\n\t\t\t// reset select all checkbox if nothing selected\n\t\t\tthis.selectAllCheckbox = false;\n\t\t\tthis.selectAllCheckboxSomeSelected = false;\n\t\t} else if (selectedRowsCount < this.model.data.length) {\n\t\t\tthis.selectAllCheckbox = true;\n\t\t\tthis.selectAllCheckboxSomeSelected = true;\n\t\t} else {\n\t\t\tthis.selectAllCheckbox = true;\n\t\t\tthis.selectAllCheckboxSomeSelected = false;\n\t\t}\n\t}\n\n\tresetTabIndex(newTabIndex = -1) {\n\t\t// ensure the view is ready for the reset before we preform the actual reset\n\t\tsetTimeout(() => {\n\t\t\t// reset all the tabIndexes we can find\n\t\t\tconst focusElementList = getFocusElementList(this.elementRef.nativeElement, tabbableSelectorIgnoreTabIndex);\n\t\t\tif (focusElementList) {\n\t\t\t\tfocusElementList.forEach(tabbable => {\n\t\t\t\t\ttabbable.tabIndex = newTabIndex;\n\t\t\t\t});\n\t\t\t}\n\t\t\t// reset interaction model positions and tabIndexes\n\t\t\tif (this.interactionModel) {\n\t\t\t\tthis.interactionModel.resetTabIndexes(newTabIndex);\n\t\t\t}\n\t\t});\n\t}\n\n\tcolumnResizeStart(event, column) {\n\t\tthis.columnResizeWidth = parseInt(column.style.width, 10);\n\t\tthis.columnResizeMouseX = event.clientX;\n\t\tevent.preventDefault();\n\n\t\tthis.mouseMoveSubscription = fromEvent(document.body, \"mousemove\").subscribe(event => {\n\t\t\tthis.columnResizeProgress(event, column);\n\t\t});\n\t\tthis.mouseUpSubscription = fromEvent(document.body, \"mouseup\").subscribe(event => {\n\t\t\tthis.columnResizeEnd(event, column);\n\t\t});\n\t}\n\n\tcolumnResizeProgress(event, column) {\n\t\tconst move = event.clientX - this.columnResizeMouseX;\n\t\tcolumn.style.width = `${this.columnResizeWidth + move}px`;\n\t}\n\n\tcolumnResizeEnd(event, column) {\n\t\tthis.mouseMoveSubscription.unsubscribe();\n\t\tthis.mouseUpSubscription.unsubscribe();\n\t}\n\n\t/**\n\t * Triggered when the user scrolls on the `<tbody>` element.\n\t * Emits the `scrollLoad` event.\n\t */\n\tonScroll(event) {\n\t\tconst distanceFromBottom = event.target.scrollHeight - event.target.clientHeight - event.target.scrollTop;\n\n\t\tif (distanceFromBottom <= this.scrollLoadDistance) {\n\t\t\tthis.scrollLoad.emit(this.model);\n\t\t} else {\n\t\t\tthis.model.isEnd = false;\n\t\t}\n\t}\n\n\tcolumnDragStart(event, columnIndex) {\n\t\tthis.isColumnDragging = true;\n\t\tthis.columnDraggedHoverIndex = columnIndex;\n\t\tevent.dataTransfer.setData(\"columnIndex\", JSON.stringify(columnIndex));\n\t}\n\n\tcolumnDragEnd(event, columnIndex) {\n\t\tthis.isColumnDragging = false;\n\t\tthis.columnDraggedHoverIndex = -1;\n\t}\n\n\tcolumnDragEnter(event, position, columnIndex) {\n\t\tthis.columnDraggedPosition = position;\n\t\tthis.columnDraggedHoverIndex = columnIndex;\n\t}\n\n\tcolumnDragLeave(event, position, columnIndex) {\n\t\tthis.columnDraggedPosition = \"\";\n\t}\n\n\tcolumnDragover(event, position, columnIndex) {\n\t\tthis.columnDraggedHoverIndex = columnIndex;\n\t\tthis.columnDraggedPosition = position;\n\n\t\t// needed to tell browser to allow dropping\n\t\tevent.preventDefault();\n\t}\n\n\tcolumnDrop(event, position, columnIndex) {\n\t\tthis.isColumnDragging = false;\n\t\tthis.columnDraggedHoverIndex = -1;\n\t\tthis.columnDraggedPosition = \"\";\n\n\t\tthis.model.moveColumn(\n\t\t\tparseInt(event.dataTransfer.getData(\"columnIndex\"), 10),\n\t\t\tcolumnIndex + (position === \"right\" ? 1 : 0)\n\t\t);\n\t}\n\n\tdoSort(index: number) {\n\t\tif (this.sort.observers.length === 0) {\n\t\t\t// no sort provided so do the simple sort\n\t\t\tif (this.model.header[index].sorted) {\n\t\t\t\t// if already sorted flip sorting direction\n\t\t\t\tthis.model.header[index].ascending = this.model.header[index].descending;\n\t\t\t}\n\t\t\tthis.model.sort(index);\n\t\t}\n\n\t\tthis.sort.emit(index);\n\t}\n\n\t/**\n\t * Triggered when the user scrolls on the `<tbody>` element.\n\t * Emits the `scrollLoad` event.\n\t */\n\tscrollToTop(event) {\n\t\tevent.target.parentElement.parentElement.parentElement.parentElement.children[1].scrollTop = 0;\n\t\tthis.model.isEnd = false;\n\t}\n\n\tgetSelectionLabelValue(row: TableItem[]) {\n\t\tif (!this.selectionLabelColumn) {\n\t\t\treturn { value: this.i18n.get().TABLE.ROW };\n\t\t}\n\t\treturn { value: row[this.selectionLabelColumn].data };\n\t}\n\n\tgetExpandButtonAriaLabel() {\n\t\treturn this._expandButtonAriaLabel.subject;\n\t}\n\tgetSortDescendingLabel() {\n\t\treturn this._sortDescendingLabel.subject;\n\t}\n\tgetSortAscendingLabel() {\n\t\treturn this._sortAscendingLabel.subject;\n\t}\n\n\tgetCheckboxHeaderLabel() {\n\t\treturn this._checkboxHeaderLabel.subject;\n\t}\n\n\tgetCheckboxRowLabel() {\n\t\treturn this._checkboxRowLabel.subject;\n\t}\n\n\tgetEndOfDataText() {\n\t\treturn this._endOfDataText.subject;\n\t}\n\n\tgetScrollTopText() {\n\t\treturn this._scrollTopText.subject;\n\t}\n\n\tgetFilterTitle() {\n\t\treturn this._filterTitle.subject;\n\t}\n}\n","import { Directive, HostBinding, Input } from \"@angular/core\";\nimport { TableRowSize } from \"./table.types\";\n\n@Directive({\n\tselector: \"[ibmTable]\"\n})\nexport class TableDirective {\n\t@Input() @HostBinding(\"class.bx--data-table--sort\") sortable = true;\n\n\t@Input() @HostBinding(\"class.bx--data-table--no-border\") noBorder = true;\n\n\t@Input() @HostBinding(\"class.bx--data-table--zebra\") striped = false;\n\n\t@Input() @HostBinding(\"class.bx--skeleton\") skeleton = false;\n\n\t/**\n\t * Size of the table rows.\n\t */\n\t@Input() size: TableRowSize = \"md\";\n\n\t@HostBinding(\"class.bx--data-table\") tableClass = true;\n\n\t@HostBinding(\"class.bx--data-table--compact\") get compactClass() {\n\t\treturn this.size === \"sm\";\n\t}\n\n\t@HostBinding(\"class.bx--data-table--tall\") get tallClass() {\n\t\treturn this.size === \"lg\";\n\t}\n\n\t@HostBinding(\"class.bx--data-table--short\") get shortClass() {\n\t\treturn this.size === \"sh\";\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tAfterViewInit\n} from \"@angular/core\";\n\nimport { TableModel } from \"../table-model.class\";\nimport { getScrollbarWidth } from \"carbon-components-angular/utils\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { Observable } from \"rxjs\";\nimport { TableRowSize } from \"../table.types\";\n\n/**\n * A subcomponent that creates the thead of the table\n *\n * ## Basic usage\n *\n * ```html\n * \t<thead ibmTableHead [model]=\"model\"></thead>\n * ```\n */\n@Component({\n\t// tslint:disable-next-line:component-selector\n\tselector: \"[ibmTableHead]\",\n\ttemplate: `\n\t<ng-container *ngIf=\"model\">\n\t\t<tr>\n\t\t\t<th\n\t\t\t\tibmTableHeadExpand\n\t\t\t\t*ngIf=\"model.hasExpandableRows()\"\n\t\t\t\tscope=\"col\"\n\t\t\t\t[ngClass]=\"{'bx--table-expand-v2': stickyHeader}\"\n\t\t\t\t[id]=\"model.getId('expand')\">\n\t\t\t</th>\n\t\t\t<th\n\t\t\t\t*ngIf=\"!skeleton && showSelectionColumn && enableSingleSelect\"\n\t\t\t\tscope=\"col\"\n\t\t\t\tstyle=\"width: 0;\"\n\t\t\t\t[id]=\"model.getId('select')\">\n\t\t\t\t<!-- add width 0; since the carbon styles don't seem to constrain this headers width -->\n\t\t\t</th>\n\t\t\t<th\n\t\t\t\tibmTableHeadCheckbox\n\t\t\t\t*ngIf=\"!skeleton && showSelectionColumn && !enableSingleSelect\"\n\t\t\t\tscope=\"col\"\n\t\t\t\t[checked]=\"selectAllCheckbox\"\n\t\t\t\t[indeterminate]=\"selectAllCheckboxSomeSelected\"\n\t\t\t\t[ariaLabel]=\"getCheckboxHeaderLabel()\"\n\t\t\t\t[size]=\"size\"\n\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t[name]=\"model.getHeaderId('select')\"\n\t\t\t\t(change)=\"onSelectAllCheckboxChange()\"\n\t\t\t\t[id]=\"model.getId('select')\">\n\t\t\t</th>\n\t\t\t<ng-container *ngFor=\"let column of model.header; let i = index\">\n\t\t\t\t<th\n\t\t\t\t\t*ngIf=\"column && column.visible\"\n\t\t\t\t\t[ngStyle]=\"column.style\"\n\t\t\t\t\tibmTableHeadCell\n\t\t\t\t\tscope=\"col\"\n\t\t\t\t\t[class]=\"column.className\"\n\t\t\t\t\t[sortable]=\"sortable\"\n\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t[id]=\"model.getId(i)\"\n\t\t\t\t\t[column]=\"column\"\n\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t[filterTitle]=\"getFilterTitle()\"\n\t\t\t\t\t[attr.colspan]=\"column.colSpan\"\n\t\t\t\t\t[attr.rowspan]=\"column.rowSpan\"\n\t\t\t\t\t(sort)=\"sort.emit(i)\">\n\t\t\t\t</th>\n\t\t\t</ng-container>\n\t\t\t<th *ngIf=\"!skeleton && stickyHeader && scrollbarWidth\"\n\t\t\t\tscope=\"col\"\n\t\t\t\t[ngStyle]=\"{'width': scrollbarWidth + 'px', 'padding': 0, 'border': 0}\">\n\t\t\t\t<!--\n\t\t\t\t\tScrollbar pushes body to the left so this header column is added to push\n\t\t\t\t\tthe title bar the same amount and keep the header and body columns aligned.\n\t\t\t\t-->\n\t\t\t</th>\n\t\t</tr>\n\t</ng-container>\n\t<ng-content></ng-content>\n\t`,\n\tstyles: [`\n\t\t.bx--table-expand-v2 {\n\t\t\tpadding-left: 2.5rem;\n\t\t}\n\t`]\n})\nexport class TableHead implements AfterViewInit {\n\t@Input() model: TableModel;\n\n\t@Input() showSelectionColumn = true;\n\n\t@Input() enableSingleSelect = false;\n\n\t@Input() selectAllCheckboxSomeSelected = false;\n\n\t@Input() selectAllCheckbox = false;\n\n\t@Input() skeleton = false;\n\n\t@Input() stickyHeader = false;\n\n\t/**\n\t * Setting sortable to false will disable all headers including headers which are sortable. Is is\n\t * possible to set the sortable state on the header item to disable/enable sorting for only some headers.\n\t */\n\t@Input() sortable = true;\n\n\t/**\n\t * Size of the table rows.\n\t */\n\t@Input() size: TableRowSize = \"md\";\n\n\t@Input()\n\tset checkboxHeaderLabel(value: string | Observable<string>) {\n\t\tthis._checkboxHeaderLabel.override(value);\n\t}\n\n\tget checkboxHeaderLabel() {\n\t\treturn this._checkboxHeaderLabel.value;\n\t}\n\n\t@Input()\n\tset sortDescendingLabel(value: string | Observable<string>) {\n\t\tthis._sortDescendingLabel.override(value);\n\t}\n\n\tget sortDescendingLabel() {\n\t\treturn this._sortDescendingLabel.value;\n\t}\n\n\t@Input()\n\tset sortAscendingLabel(value: string | Observable<string>) {\n\t\tthis._sortAscendingLabel.override(value);\n\t}\n\n\tget sortAscendingLabel() {\n\t\treturn this._sortAscendingLabel.value;\n\t}\n\n\t@Input()\n\tset filterTitle(value: string | Observable<string>) {\n\t\tthis._filterTitle.override(value);\n\t}\n\n\tget filterTitle() {\n\t\treturn this._filterTitle.value;\n\t}\n\n\t/**\n\t * Emits an index of the column that wants to be sorted.\n\t */\n\t@Output() sort = new EventEmitter<number>();\n\t/**\n\t * Emits if all rows are selected.\n\t *\n\t * @param model\n\t */\n\t@Output() selectAll = new EventEmitter<TableModel>();\n\t/**\n\t * Emits if all rows are deselected.\n\t *\n\t * @param model\n\t */\n\t@Output() deselectAll = new EventEmitter<TableModel>();\n\n\tpublic scrollbarWidth = 0;\n\n\tprotected _checkboxHeaderLabel = this.i18n.getOverridable(\"TABLE.CHECKBOX_HEADER\");\n\tprotected _sortDescendingLabel = this.i18n.getOverridable(\"TABLE.SORT_DESCENDING\");\n\tprotected _sortAscendingLabel = this.i18n.getOverridable(\"TABLE.SORT_ASCENDING\");\n\tprotected _filterTitle = this.i18n.getOverridable(\"TABLE.FILTER\");\n\n\tconstructor(protected i18n: I18n) {}\n\n\tngAfterViewInit() {\n\t\tsetTimeout(() => {\n\t\t\tthis.scrollbarWidth = getScrollbarWidth();\n\t\t});\n\t}\n\n\tonSelectAllCheckboxChange() {\n\t\tif (!this.selectAllCheckbox && !this.selectAllCheckboxSomeSelected) {\n\t\t\tthis.selectAll.emit(this.model);\n\t\t} else {\n\t\t\tthis.deselectAll.emit(this.model);\n\t\t}\n\t}\n\n\tgetCheckboxHeaderLabel(): Observable<string> {\n\t\treturn this._checkboxHeaderLabel.subject;\n\t}\n\n\tgetSortDescendingLabel(): Observable<string> {\n\t\treturn this._sortDescendingLabel.subject;\n\t}\n\n\tgetSortAscendingLabel(): Observable<string> {\n\t\treturn this._sortAscendingLabel.subject;\n\t}\n\n\tgetFilterTitle(): Observable<string> {\n\t\treturn this._filterTitle.subject;\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tHostBinding,\n\tOnChanges\n} from \"@angular/core\";\nimport { Observable, OperatorFunction } from \"rxjs\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { map } from \"rxjs/operators\";\nimport { TableHeaderItem } from \"../table-header-item.class\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableHeadCell]\",\n\ttemplate: `\n\t\t<button\n\t\t\tclass=\"bx--table-sort\"\n\t\t\t*ngIf=\"sortable && this.sort.observers.length > 0 && column.sortable\"\n\t\t\t[attr.aria-label]=\"(column.sorted && column.ascending ? getSortDescendingLabel() : getSortAscendingLabel()) | async\"\n\t\t\taria-live=\"polite\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--table-sort--active': column.sorted,\n\t\t\t\t'bx--table-sort--ascending': column.ascending\n\t\t\t}\"\n\t\t\t(click)=\"onClick()\">\n\t\t\t<span\n\t\t\t\tclass=\"bx--table-sort__flex\"\n\t\t\t\t[title]=\"column.title\"\n\t\t\t\ttabindex=\"-1\">\n\t\t\t\t<div *ngIf=\"!skeleton && !column.template\" ibmTableHeadCellLabel>\n\t\t\t\t\t{{column.data}}\n\t\t\t\t</div>\n\t\t\t\t<ng-template\n\t\t\t\t\t*ngIf=\"!skeleton && column.template\"\n\t\t\t\t\t[ngTemplateOutlet]=\"column.template\"\n\t\t\t\t\t[ngTemplateOutletContext]=\"{data: column.data}\">\n\t\t\t\t</ng-template>\n\t\t\t\t<svg\n\t\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tclass=\"bx--table-sort__icon\"\n\t\t\t\t\twidth=\"16\"\n\t\t\t\t\theight=\"16\"\n\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t<path d=\"M12.3 9.3l-3.8 3.8V1h-1v12.1L3.7 9.3 3 10l5 5 5-5z\"></path>\n\t\t\t\t</svg>\n\t\t\t\t<svg\n\t\t\t\t\t*ngIf=\"!skeleton\"\n\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\tstyle=\"will-change: transform;\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tclass=\"bx--table-sort__icon-unsorted\"\n\t\t\t\t\twidth=\"16\"\n\t\t\t\t\theight=\"16\"\n\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t<path d=\"M13.8 10.3L12 12.1V2h-1v10.1l-1.8-1.8-.7.7 3 3 3-3zM4.5 2l-3 3 .7.7L4 3.9V14h1V3.9l1.8 1.8.7-.7z\"></path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t</button>\n\t\t<div\n\t\t\tclass=\"bx--table-header-label\"\n\t\t\t*ngIf=\"!skeleton && this.sort.observers.length === 0 || (this.sort.observers.length > 0 && !column.sortable) || !sortable\">\n\t\t\t<span *ngIf=\"!column.template\" [title]=\"column.data\">{{column.data}}</span>\n\t\t\t<ng-template\n\t\t\t\t[ngTemplateOutlet]=\"column.template\" [ngTemplateOutletContext]=\"{data: column.data}\">\n\t\t\t</ng-template>\n\t\t</div>\n\t\t<button\n\t\t\t[ngClass]=\"{'active': column.filterCount > 0}\"\n\t\t\t*ngIf=\"column.filterTemplate\"\n\t\t\ttype=\"button\"\n\t\t\taria-expanded=\"false\"\n\t\t\taria-haspopup=\"true\"\n\t\t\t[ibmTooltip]=\"column.filterTemplate\"\n\t\t\ttrigger=\"click\"\n\t\t\t[title]=\"getFilterTitle() | async\"\n\t\t\tplacement=\"bottom,top\"\n\t\t\t[data]=\"column.filterData\">\n\t\t\t<svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tclass=\"icon--sm\"\n\t\t\t\twidth=\"16\"\n\t\t\t\theight=\"16\"\n\t\t\t\tviewBox=\"0 0 16 16\">\n\t\t\t\t<path d=\"M0 0v3l6 8v5h4v-5l6-8V0H0zm9 10.7V15H7v-4.3L1.3 3h13.5L9 10.7z\"/>\n\t\t\t</svg>\n\t\t\t<span *ngIf=\"column.filterCount > 0\">\n\t\t\t\t{{column.filterCount}}\n\t\t\t</span>\n\t\t</button>\n\t`\n})\nexport class TableHeadCell implements OnChanges {\n\t@Input() column: TableHeaderItem;\n\n\t@Input() skeleton = false;\n\n\t@Input() sortable = true;\n\n\t@Input()\n\tset sortDescendingLabel(value: string | Observable<string>) {\n\t\tthis._sortDescendingLabel.override(value);\n\t}\n\n\tget sortDescendingLabel() {\n\t\treturn this._sortDescendingLabel.value;\n\t}\n\n\t@Input()\n\tset sortAscendingLabel(value: string | Observable<string>) {\n\t\tthis._sortAscendingLabel.override(value);\n\t}\n\n\tget sortAscendingLabel() {\n\t\treturn this._sortAscendingLabel.value;\n\t}\n\n\t@Input()\n\tset filterTitle(value: string | Observable<string>) {\n\t\tthis._filterTitle.override(value);\n\t}\n\n\tget filterTitle() {\n\t\treturn this._filterTitle.value;\n\t}\n\n\t/**\n\t * Notifies that the column should be sorted\n\t */\n\t@Output() sort = new EventEmitter();\n\n\t@HostBinding(\"class.thead_action\") theadAction = false;\n\n\tprotected _sortDescendingLabel = this.i18n.getOverridable(\"TABLE.SORT_DESCENDING\");\n\tprotected _sortAscendingLabel = this.i18n.getOverridable(\"TABLE.SORT_ASCENDING\");\n\tprotected _filterTitle = this.i18n.getOverridable(\"TABLE.FILTER\");\n\n\tconstructor(protected i18n: I18n) { }\n\n\tngOnChanges() {\n\t\t// Since it's not an input, and it touches the view, we're using `ngOnChanges`\n\t\t// `get`ters have caused issues in the past with the view updating outside of change detection\n\t\tthis.theadAction = !!this.column.filterTemplate || this.sort.observers.length > 0;\n\t}\n\n\tgetSortDescendingLabel(): Observable<string> {\n\t\treturn this._sortDescendingLabel.subject.pipe(this.sortLabelMap());\n\t}\n\n\tgetSortAscendingLabel(): Observable<string> {\n\t\treturn this._sortAscendingLabel.subject.pipe(this.sortLabelMap());\n\t}\n\n\tgetFilterTitle(): Observable<string> {\n\t\treturn this._filterTitle.subject;\n\t}\n\n\tonClick() {\n\t\tif (!this.skeleton) {\n\t\t\tthis.sort.emit();\n\t\t}\n\t}\n\n\tprotected sortLabelMap(): OperatorFunction<string, string> {\n\t\treturn map((str: string) => {\n\t\t\tif (this.column.ariaSortLabel) {\n\t\t\t\treturn this.column.ariaSortLabel;\n\t\t\t}\n\t\t\tif (this.column.formatSortLabel) {\n\t\t\t\treturn this.column.formatSortLabel(str, this.column.ariaSortLabel);\n\t\t\t}\n\t\t\treturn `${this.column.data} - ${str}`;\n\t\t});\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tOutput,\n\tHostBinding,\n\tEventEmitter\n} from \"@angular/core\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { Observable } from \"rxjs\";\nimport { TableRowSize } from \"../table.types\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableHeadCheckbox]\",\n\ttemplate: `\n\t\t<ibm-checkbox\n\t\t\t*ngIf=\"!skeleton\"\n\t\t\tinline=\"true\"\n\t\t\t[size]=\"(size !== 'sm' ? 'md' : 'sm')\"\n\t\t\t[name]=\"name\"\n\t\t\t[checked]=\"checked\"\n\t\t\t[indeterminate]=\"indeterminate\"\n\t\t\t(checkedChange)=\"change.emit()\"\n\t\t\t[aria-label]=\"getAriaLabel() | async\">\n\t\t</ibm-checkbox>\n\t`,\n\tstyles: [`\n        :host { width: 10px; }\n    `]\n})\nexport class TableHeadCheckbox {\n\tprivate static tableSelectAllCount = 0;\n\t/**\n\t * Size of the table rows.\n\t */\n\t@Input() size: TableRowSize = \"md\";\n\n\t@Input() checked = false;\n\n\t@Input() indeterminate = false;\n\n\t@Input() skeleton = false;\n\n\t@Input() name = `select-all-${TableHeadCheckbox.tableSelectAllCount++}`;\n\n\t@Input()\n\tset ariaLabel(value: string | Observable<string>) {\n\t\tthis._ariaLabel.override(value);\n\t}\n\n\tget ariaLabel() {\n\t\treturn this._ariaLabel.value;\n\t}\n\n\t@Output() change = new EventEmitter<void>();\n\n\t@HostBinding(\"class.bx--table-column-checkbox\") hostClass = true;\n\n\tprotected _ariaLabel = this.i18n.getOverridable(\"TABLE.CHECKBOX_HEADER\");\n\n\tconstructor(protected i18n: I18n) { }\n\n\tgetAriaLabel(): Observable<string> {\n\t\treturn this._ariaLabel.subject;\n\t}\n}\n","import {\n\tComponent,\n\tHostBinding\n} from \"@angular/core\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableHeadExpand]\",\n\ttemplate: `\n\t\t<ng-content></ng-content>\n\t`\n})\nexport class TableHeadExpand {\n\t@HostBinding(\"class.bx--table-expand\") hostClass = true;\n}\n","import {\n\tComponent,\n\tInput,\n\tEventEmitter,\n\tOutput\n} from \"@angular/core\";\nimport { TableModel } from \"../table-model.class\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { Observable } from \"rxjs\";\nimport { TableRowSize } from \"../table.types\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableBody]\",\n\ttemplate: `\n\t\t<ng-container *ngIf=\"model\">\n\t\t\t<ng-container *ngFor=\"let row of model.data; let i = index\">\n\t\t\t\t<tr\n\t\t\t\t\tibmTableRow\n\t\t\t\t\t[model]=\"model\"\n\t\t\t\t\t[row]=\"row\"\n\t\t\t\t\t[size]=\"size\"\n\t\t\t\t\t[selected]=\"model.isRowSelected(i)\"\n\t\t\t\t\t[expandable]=\"model.isRowExpandable(i)\"\n\t\t\t\t\t[expanded]=\"model.isRowExpanded(i)\"\n\t\t\t\t\t[checkboxLabel]=\"getCheckboxRowLabel()\"\n\t\t\t\t\t[expandButtonAriaLabel]=\"getExpandButtonAriaLabel()\"\n\t\t\t\t\t[showSelectionColumn]=\"showSelectionColumn\"\n\t\t\t\t\t[enableSingleSelect]=\"enableSingleSelect\"\n\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t(selectRow)=\"onRowCheckboxChange(i)\"\n\t\t\t\t\t(deselectRow)=\"onRowCheckboxChange(i)\"\n\t\t\t\t\t(expandRow)=\"model.expandRow(i, !model.isRowExpanded(i))\"\n\t\t\t\t\t(rowClick)=\"onRowClick(i)\"\n\t\t\t\t\t*ngIf=\"!model.isRowFiltered(i)\"\n\t\t\t\t\t[class]=\"(model.rowsClass[i] ? model.rowsClass[i] : null)\"\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'tbody_row--success': !model.isRowSelected(i) && model.getRowContext(i) === 'success',\n\t\t\t\t\t\t'tbody_row--warning': !model.isRowSelected(i) && model.getRowContext(i) === 'warning',\n\t\t\t\t\t\t'tbody_row--info': !model.isRowSelected(i) && model.getRowContext(i) === 'info',\n\t\t\t\t\t\t'tbody_row--error': !model.isRowSelected(i) && model.getRowContext(i) === 'error'\n\t\t\t\t\t}\">\n\t\t\t\t</tr>\n\t\t\t\t<tr\n\t\t\t\t\t*ngIf=\"model.isRowExpandable(i) && !shouldExpandAsTable(row) && !model.isRowFiltered(i)\"\n\t\t\t\t\tibmTableExpandedRow\n\t\t\t\t\tibmExpandedRowHover\n\t\t\t\t\t[row]=\"row\"\n\t\t\t\t\t[expanded]=\"model.isRowExpanded(i)\"\n\t\t\t\t\t[skeleton]=\"skeleton\">\n\t\t\t\t</tr>\n\t\t\t\t<ng-container\n\t\t\t\t\t*ngIf=\"model.isRowExpandable(i) && shouldExpandAsTable(row) && model.isRowExpanded(i) && !model.isRowFiltered(i)\">\n\t\t\t\t\t<tr\n\t\t\t\t\t\t*ngFor=\"let expandedDataRow of firstExpandedDataInRow(row)\"\n\t\t\t\t\t\tibmTableRow\n\t\t\t\t\t\t[model]=\"model\"\n\t\t\t\t\t\t[showSelectionColumnCheckbox]=\"false\"\n\t\t\t\t\t\t[showSelectionColumn]=\"showSelectionColumn\"\n\t\t\t\t\t\t[row]=\"expandedDataRow\"\n\t\t\t\t\t\t[size]=\"size\"\n\t\t\t\t\t\t[skeleton]=\"skeleton\">\n\t\t\t\t\t</tr>\n\t\t\t\t</ng-container>\n\t\t\t</ng-container>\n\t\t</ng-container>\n\t\t<ng-content></ng-content>\n\t`\n})\nexport class TableBody {\n\t@Input() model: TableModel;\n\n\t/**\n\t * Controls whether to enable multiple or single row selection.\n\t */\n\t@Input() enableSingleSelect = false;\n\n\t@Input()\n\tset expandButtonAriaLabel(value: string | Observable<string>) {\n\t\tthis._expandButtonAriaLabel.override(value);\n\t}\n\n\tget expandButtonAriaLabel() {\n\t\treturn this._expandButtonAriaLabel.value;\n\t}\n\n\t@Input()\n\tset checkboxRowLabel(value: string | Observable<string>) {\n\t\tthis._checkboxRowLabel.override(value);\n\t}\n\n\tget checkboxRowLabel() {\n\t\treturn this._checkboxRowLabel.value;\n\t}\n\n\t/**\n\t * Controls whether to show the selection checkboxes column or not.\n\t */\n\t@Input() showSelectionColumn = true;\n\n\t/**\n\t * Size of the table rows.\n\t */\n\t@Input() size: TableRowSize = \"md\";\n\n\t/**\n\t * Used to populate the row selection checkbox label with a useful value if set.\n\t *\n\t * Example:\n\t * ```\n\t * <ibm-table [selectionLabelColumn]=\"0\"></ibm-table>\n\t * <!-- results in aria-label=\"Select first column value\"\n\t * (where \"first column value\" is the value of the first column in the row -->\n\t * ```\n\t */\n\t@Input() selectionLabelColumn: number;\n\n\t@Input() skeleton = false;\n\n\t/**\n\t * Emits if a single row is selected.\n\t *\n\t * @param ({model: this.model, selectedRowIndex: index})\n\t */\n\t@Output() selectRow = new EventEmitter<Object>();\n\n\t/**\n\t * Emits if a single row is deselected.\n\t *\n\t * @param ({model: this.model, deselectedRowIndex: index})\n\t */\n\t@Output() deselectRow = new EventEmitter<Object>();\n\n\t/**\n\t * Emits if a row item excluding expandButtons, checkboxes, or radios is clicked.\n\t */\n\t@Output() rowClick = new EventEmitter<number>();\n\n\tprotected _checkboxRowLabel = this.i18n.getOverridable(\"TABLE.CHECKBOX_ROW\");\n\tprotected _expandButtonAriaLabel = this.i18n.getOverridable(\"TABLE.EXPAND_BUTTON\");\n\n\tconstructor(protected i18n: I18n) { }\n\n\t/**\n\t * Triggered when a single row is clicked.\n\t * Updates the header checkbox state.\n\t * Emits the `selectRow` or `deselectRow` event.\n\t */\n\tonRowCheckboxChange(index: number) {\n\t\tif (this.model.isRowSelected(index)) {\n\t\t\tthis.deselectRow.emit({ model: this.model, deselectedRowIndex: index });\n\t\t} else {\n\t\t\tthis.selectRow.emit({ model: this.model, selectedRowIndex: index });\n\t\t}\n\t}\n\n\tonRowClick(index: number) {\n\t\tthis.rowClick.emit(index);\n\t}\n\n\tgetCheckboxRowLabel(): Observable<string> {\n\t\treturn this._checkboxRowLabel.subject;\n\t}\n\n\tgetExpandButtonAriaLabel(): Observable<string> {\n\t\treturn this._expandButtonAriaLabel.subject;\n\t}\n\n\tfirstExpandedDataInRow(row) {\n\t\tconst found = row.find(d => d.expandedData);\n\t\tif (found) {\n\t\t\treturn found.expandedData;\n\t\t}\n\t\treturn found;\n\t}\n\n\tshouldExpandAsTable(row) {\n\t\treturn row.some(d => d.expandAsTable);\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tHostBinding,\n\tHostListener\n} from \"@angular/core\";\nimport { TableModel } from \"../table-model.class\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { TableItem } from \"../table-item.class\";\nimport { Observable } from \"rxjs\";\nimport { TableRowSize } from \"../table.types\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableRow]\",\n\ttemplate: `\n\t\t<ng-container *ngIf=\"model\">\n\t\t\t<td\n\t\t\t\t*ngIf=\"model.hasExpandableRows()\"\n\t\t\t\tibmTableExpandButton\n\t\t\t\tclass=\"bx--table-expand-v2\"\n\t\t\t\t[expanded]=\"expanded\"\n\t\t\t\t[expandable]=\"expandable\"\n\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t[ariaLabel]=\"getExpandButtonAriaLabel()\"\n\t\t\t\t[headers]=\"model.getHeaderId('expand')\"\n\t\t\t\t(expandRow)=\"expandRow.emit()\">\n\t\t\t</td>\n\t\t\t<ng-container *ngIf=\"!skeleton && showSelectionColumn && !enableSingleSelect\">\n\t\t\t\t<td\n\t\t\t\t\t*ngIf=\"!showSelectionColumnCheckbox; else tableCheckboxTemplate\">\n\t\t\t\t</td>\n\t\t\t\t<ng-template #tableCheckboxTemplate>\n\t\t\t\t\t<td\n\t\t\t\t\t\tibmTableCheckbox\n\t\t\t\t\t\tclass=\"bx--table-column-checkbox\"\n\t\t\t\t\t\t[size]=\"size\"\n\t\t\t\t\t\t[selected]=\"selected\"\n\t\t\t\t\t\t[label]=\"getCheckboxLabel()\"\n\t\t\t\t\t\t[row]=\"row\"\n\t\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t\t[headers]=\"model.getHeaderId('select')\"\n\t\t\t\t\t\t(change)=\"onSelectionChange()\">\n\t\t\t\t\t</td>\n\t\t\t\t</ng-template>\n\t\t\t</ng-container>\n\t\t\t<td\n\t\t\t\t*ngIf=\"!skeleton && showSelectionColumn && enableSingleSelect\"\n\t\t\t\tibmTableRadio\n\t\t\t\t[selected]=\"selected\"\n\t\t\t\t[label]=\"getCheckboxLabel()\"\n\t\t\t\t[row]=\"row\"\n\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t[headers]=\"model.getHeaderId('select')\"\n\t\t\t\t(change)=\"onSelectionChange()\">\n\t\t\t</td>\n\t\t\t<ng-container *ngFor=\"let item of row; let j = index\">\n\t\t\t\t<td\n\t\t\t\t\t*ngIf=\"item && model.getHeader(j) && model.getHeader(j).visible\"\n\t\t\t\t\tibmTableData\n\t\t\t\t\t[headers]=\"model.getHeaderId(j, item.colSpan)\"\n\t\t\t\t\t[item]=\"item\"\n\t\t\t\t\t[title]=\"item.title\"\n\t\t\t\t\t[class]=\"model.getHeader(j).className\"\n\t\t\t\t\t[ngStyle]=\"model.getHeader(j).style\"\n\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t[attr.colspan]=\"item.colSpan\"\n\t\t\t\t\t[attr.rowspan]=\"item.rowSpan\"\n\t\t\t\t\t(click)=\"onRowClick()\"\n\t\t\t\t\t(keydown.enter)=\"onRowClick()\">\n\t\t\t\t</td>\n\t\t\t\t<td\n\t\t\t\t\t*ngIf=\"item && model.getHeader(j) == null\"\n\t\t\t\t\tibmTableData\n\t\t\t\t\t[headers]=\"model.getHeaderId(j, item.colSpan)\"\n\t\t\t\t\t[item]=\"item\"\n\t\t\t\t\t[title]=\"item.title\"\n\t\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t\t[attr.colspan]=\"item.colSpan\"\n\t\t\t\t\t[attr.rowspan]=\"item.rowSpan\"\n\t\t\t\t\t(click)=\"onRowClick()\"\n\t\t\t\t\t(keydown.enter)=\"onRowClick()\">\n\t\t\t\t</td>\n\t\t\t</ng-container>\n\t\t</ng-container>\n\t\t<ng-content></ng-content>\n\t`\n})\nexport class TableRowComponent {\n\t/**\n\t * `TableModel` with data the table is to display.\n\t */\n\t@Input() model: TableModel;\n\n\t@Input() row: TableItem[];\n\n\t@Input() expanded = false;\n\n\t@Input() expandable = false;\n\n\t@Input() selected = false;\n\n\t/**\n\t * Size of the table rows.\n\t */\n\t@Input() size: TableRowSize = \"md\";\n\n\t/**\n\t * Controls whether to enable multiple or single row selection.\n\t */\n\t@Input() enableSingleSelect = false;\n\n\t@Input()\n\tset expandButtonAriaLabel(value: string | Observable<string>) {\n\t\tthis._expandButtonAriaLabel.override(value);\n\t}\n\n\tget expandButtonAriaLabel() {\n\t\treturn this._expandButtonAriaLabel.value;\n\t}\n\n\t@Input()\n\tset checkboxLabel(value: string | Observable<string>) {\n\t\tthis._checkboxLabel.override(value);\n\t}\n\n\tget checkboxLabel() {\n\t\treturn this._checkboxLabel.value;\n\t}\n\n\t/**\n\t * Controls whether to show the selection checkboxes column or not.\n\t */\n\t@Input() showSelectionColumn = true;\n\n\t/**\n\t * Shows or hide the checkbox in the selection column when `showSelectionColumn`\n\t * is set to true\n\t */\n\t@Input() showSelectionColumnCheckbox = true;\n\n\t/**\n\t * Used to populate the row selection checkbox label with a useful value if set.\n\t *\n\t * Example:\n\t * ```\n\t * <ibm-table [selectionLabelColumn]=\"0\"></ibm-table>\n\t * <!-- results in aria-label=\"Select first column value\"\n\t * (where \"first column value\" is the value of the first column in the row -->\n\t * ```\n\t */\n\t@Input() selectionLabelColumn: number;\n\n\t@Input() skeleton = false;\n\n\t/**\n\t * Emits when the row is selected.\n\t */\n\t@Output() selectRow = new EventEmitter();\n\n\t/**\n\t * Emits when the row is deselected.\n\t */\n\t@Output() deselectRow = new EventEmitter();\n\n\t/**\n\t * Emits when the row is expanded\n\t */\n\t@Output() expandRow = new EventEmitter();\n\n\t/**\n\t * Emits when a row is clicked regardless of `enableSingleSelect` or `showSelectionColumn`.\n\t * Should only get emitted when a row item is selected excluding expand buttons,\n\t * checkboxes, or radios.\n\t */\n\t@Output() rowClick = new EventEmitter();\n\n\t@HostBinding(\"class.bx--data-table--selected\") get selectedClass() {\n\t\treturn this.selected;\n\t}\n\n\t@HostBinding(\"class.bx--parent-row\") get parentRowClass() {\n\t\treturn this.expandable;\n\t}\n\n\t@HostBinding(\"class.bx--expandable-row\") get expandableRowClass() {\n\t\treturn this.expanded;\n\t}\n\n\t@HostBinding(\"class.tbody_row--selectable\") get selectableClass() {\n\t\treturn false; // this.singleSelect\n\t}\n\n\t@HostBinding(\"attr.data-parent-row\") get isParentRow() {\n\t\treturn this.expandable ? true : null;\n\t}\n\n\t@HostBinding(\"attr.tabindex\") get isAccessible() {\n\t\treturn this.enableSingleSelect && !this.showSelectionColumn ? 0 : null;\n\t}\n\n\tprotected _checkboxLabel = this.i18n.getOverridable(\"TABLE.CHECKBOX_ROW\");\n\tprotected _expandButtonAriaLabel = this.i18n.getOverridable(\"TABLE.EXPAND_BUTTON\");\n\n\tconstructor(protected i18n: I18n) { }\n\n\t@HostListener(\"click\")\n\tonHostClick() {\n\t\tif (this.enableSingleSelect && !this.showSelectionColumn) {\n\t\t\tthis.onSelectionChange();\n\t\t}\n\t}\n\n\tonRowClick() {\n\t\tthis.rowClick.emit();\n\t}\n\n\tonSelectionChange() {\n\t\tif (this.selected) {\n\t\t\tthis.deselectRow.emit();\n\t\t} else {\n\t\t\tthis.selectRow.emit();\n\t\t}\n\t}\n\n\tgetCheckboxLabel(): Observable<string> {\n\t\treturn this._checkboxLabel.subject;\n\t}\n\n\tgetExpandButtonAriaLabel(): Observable<string> {\n\t\treturn this._expandButtonAriaLabel.subject;\n\t}\n}\n","import {\n\tComponent,\n\tHostBinding,\n\tInput\n} from \"@angular/core\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableExpandedRow]\",\n\ttemplate: `\n\t\t<td [attr.colspan]=\"row.length + 2\">\n\t\t\t<ng-container *ngIf=\"!firstExpandedTemplateInRow(row)\">\n\t\t\t\t{{firstExpandedDataInRow(row)}}\n\t\t\t</ng-container>\n\t\t\t<ng-template\n\t\t\t\t[ngTemplateOutlet]=\"firstExpandedTemplateInRow(row)\"\n\t\t\t\t[ngTemplateOutletContext]=\"{data: firstExpandedDataInRow(row)}\">\n\t\t\t</ng-template>\n\t\t</td>\n\t`\n})\nexport class TableExpandedRow {\n\t@Input() row: any[];\n\n\t@Input() skeleton = false;\n\n\t@HostBinding(\"class.bx--expandable-row\") expandableRowClass = true;\n\n\t@HostBinding(\"attr.data-child-row\") dataChildRow = true;\n\n\t@Input() expanded = false;\n\n\t@HostBinding(\"style.display\") get displayStyle() {\n\t\treturn this.expanded ? null : \"none\";\n\t}\n\n\tfirstExpandedTemplateInRow(row) {\n\t\tconst found = row.find(d => d.expandedTemplate);\n\t\tif (found) {\n\t\t\treturn found.expandedTemplate;\n\t\t}\n\t\treturn found;\n\t}\n\n\tfirstExpandedDataInRow(row) {\n\t\tconst found = row.find(d => d.expandedData);\n\t\tif (found) {\n\t\t\treturn found.expandedData;\n\t\t}\n\t\treturn found;\n\t}\n}\n","import {\n\tComponent,\n\tInput\n} from \"@angular/core\";\nimport { TableItem } from \"../table-item.class\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableData]\",\n\ttemplate: `\n\t\t<ng-container *ngIf=\"!skeleton && !item.template\">{{item.data}}</ng-container>\n\t\t<ng-template\n\t\t\t*ngIf=\"!skeleton\"\n\t\t\t[ngTemplateOutlet]=\"item.template\"\n\t\t\t[ngTemplateOutletContext]=\"{data: item.data}\">\n\t\t</ng-template>\n\t`\n})\nexport class TableData {\n\t@Input() item: TableItem;\n\n\t@Input() skeleton = false;\n}\n","import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter\n} from \"@angular/core\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { TableItem } from \"../table-item.class\";\nimport { TableRow } from \"../table-row.class\";\nimport { Observable } from \"rxjs\";\nimport { TableRowSize } from \"../table.types\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableCheckbox]\",\n\ttemplate: `\n\t\t<ibm-checkbox\n\t\t\t*ngIf=\"!skeleton\"\n\t\t\tinline=\"true\"\n\t\t\t[name]=\"name\"\n\t\t\t[aria-label]=\"getLabel() | i18nReplace:getSelectionLabelValue(row) | async\"\n\t\t\t[size]=\"(size !== 'sm' ? 'md' : 'sm')\"\n\t\t\t[checked]=\"selected\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t(change)=\"change.emit()\">\n\t\t</ibm-checkbox>\n\t`\n})\nexport class TableCheckbox {\n\t@Input() row: TableItem[];\n\n\t@Input() selected = false;\n\n\t@Input() name = \"\";\n\n\tget disabled(): boolean {\n\t\treturn this.row ? !!(this.row as TableRow).disabled : false;\n\t}\n\n\t/**\n\t * Size of the table rows.\n\t */\n\t@Input() size: TableRowSize = \"md\";\n\n\t@Input()\n\tset label(value: string | Observable<string>) {\n\t\tthis._label.override(value);\n\t}\n\n\tget label() {\n\t\treturn this._label.value;\n\t}\n\n\t/**\n\t * Used to populate the row selection checkbox label with a useful value if set.\n\t *\n\t * Example:\n\t * ```\n\t * <ibm-table [selectionLabelColumn]=\"0\"></ibm-table>\n\t * <!-- results in aria-label=\"Select first column value\"\n\t * (where \"first column value\" is the value of the first column in the row -->\n\t * ```\n\t */\n\t@Input() selectionLabelColumn: number;\n\n\t@Input() skeleton = false;\n\n\t/**\n\t * Emits if a single row is selected.\n\t */\n\t@Output() change = new EventEmitter();\n\n\tprotected _label = this.i18n.getOverridable(\"TABLE.CHECKBOX_ROW\");\n\n\tconstructor(protected i18n: I18n) { }\n\n\tgetSelectionLabelValue(row: TableItem[]) {\n\t\tif (!this.selectionLabelColumn) {\n\t\t\treturn { value: this.i18n.get().TABLE.ROW };\n\t\t}\n\t\treturn { value: row[this.selectionLabelColumn].data };\n\t}\n\n\tgetLabel(): Observable<string> {\n\t\treturn this._label.subject;\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter\n} from \"@angular/core\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { TableItem } from \"../table-item.class\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableRadio]\",\n\ttemplate: `\n\t\t<ibm-radio\n\t\t\t*ngIf=\"!skeleton\"\n\t\t\t[attr.aria-label]=\"getLabel() | i18nReplace:getSelectionLabelValue(row) | async\"\n\t\t\t[ariaLabel]=\"getLabel() | i18nReplace:getSelectionLabelValue(row) | async\"\n\t\t\t[checked]=\"selected\"\n\t\t\t(change)=\"change.emit()\">\n\t\t</ibm-radio>\n\t`\n})\nexport class TableRadio {\n\t@Input() row: any[];\n\n\t@Input() selected = false;\n\n\t@Input()\n\tset label(value: string | Observable<string>) {\n\t\tthis._label.override(value);\n\t}\n\n\tget label() {\n\t\treturn this._label.value;\n\t}\n\n\t/**\n\t * Used to populate the row selection checkbox label with a useful value if set.\n\t *\n\t * Example:\n\t * ```\n\t * <ibm-table [selectionLabelColumn]=\"0\"></ibm-table>\n\t * <!-- results in aria-label=\"Select first column value\"\n\t * (where \"first column value\" is the value of the first column in the row -->\n\t * ```\n\t */\n\t@Input() selectionLabelColumn: number;\n\n\t@Input() skeleton = false;\n\n\t/**\n\t * Emits if a single row is selected.\n\t */\n\t@Output() change = new EventEmitter();\n\n\tprotected _label = this.i18n.getOverridable(\"TABLE.CHECKBOX_ROW\");\n\n\tconstructor(protected i18n: I18n) { }\n\n\tgetSelectionLabelValue(row: TableItem[]) {\n\t\tif (!this.selectionLabelColumn) {\n\t\t\treturn { value: this.i18n.get().TABLE.ROW };\n\t\t}\n\t\treturn { value: row[this.selectionLabelColumn].data };\n\t}\n\n\tgetLabel(): Observable<string> {\n\t\treturn this._label.subject;\n\t}\n}\n","import {\n\tComponent,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tHostBinding\n} from \"@angular/core\";\nimport { I18n, Overridable } from \"carbon-components-angular/i18n\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: \"[ibmTableExpandButton]\",\n\ttemplate: `\n\t\t<button\n\t\t\t*ngIf=\"expandable\"\n\t\t\tclass=\"bx--table-expand__button\"\n\t\t\t[attr.aria-label]=\"getAriaLabel() | async\"\n\t\t\t(click)=\"expandRow.emit()\">\n\t\t\t<svg ibmIcon=\"chevron--right\" size=\"16\" class=\"bx--table-expand__svg\"></svg>\n\t\t</button>\n\t`\n})\nexport class TableExpandButton {\n\t/**\n\t * Set to true to indicate the row has expanded\n\t */\n\t@Input() expanded = false;\n\t/**\n\t * Set to true to indicate the row can be expanded.\n\t * Defaults to false to allow for correct column alignment\n\t */\n\t@Input() expandable = false;\n\n\t@Input()\n\tset ariaLabel(value: string | Observable<string>) {\n\t\tthis._ariaLabel.override(value);\n\t}\n\n\tget ariaLabel() {\n\t\treturn this._ariaLabel.value;\n\t}\n\n\t@Input() skeleton = false;\n\n\t@HostBinding(\"class.bx--table-expand\") expandClass = true;\n\n\t@HostBinding(\"attr.data-previous-value\") get previousValue() {\n\t\treturn this.expanded ? \"collapsed\" : null;\n\t}\n\n\t@Output() expandRow = new EventEmitter<void>();\n\n\tprotected _ariaLabel = this.i18n.getOverridable(\"TABLE.EXPAND_BUTTON\");\n\n\tconstructor(protected i18n: I18n) { }\n\n\tgetAriaLabel(): Observable<string> {\n\t\treturn this._ariaLabel.subject;\n\t}\n}\n","import { TableItem } from \"./table-item.class\";\n\n/**\n * Represents a table row, which is essentially an array of TableItem.\n */\nexport class TableRow extends Array<TableItem> {\n\t/**\n\t * Whether row is disabled or not.\n\t */\n\tdisabled = false;\n}\n","// modules\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\n\n// internal module imports\nimport { NFormsModule } from \"carbon-components-angular/forms\";\nimport { DialogModule } from \"carbon-components-angular/dialog\";\nimport { I18nModule } from \"carbon-components-angular/i18n\";\nimport { ButtonModule } from \"carbon-components-angular/button\";\nimport { SearchModule } from \"carbon-components-angular/search\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n// table utilities/toolbar imports\nimport { TableToolbar } from \"./toolbar/table-toolbar.component\";\nimport { TableToolbarActions } from \"./toolbar/table-toolbar-actions.component\";\nimport { TableToolbarSearch } from \"./toolbar/table-toolbar-search.component\";\nimport { TableToolbarContent } from \"./toolbar/table-toolbar-content.component\";\n\nimport { TableContainer } from \"./table-container.component\";\nimport { TableHeader } from \"./header/table-header.component\";\nimport { TableHeaderTitle } from \"./header/table-header-title.directive\";\nimport { TableHeaderDescription } from \"./header/table-header-description.directive\";\n\nimport { ExpandedRowHover } from \"./expanded-row-hover.directive\";\n\n// core table imports\nimport { Table } from \"./table.component\";\nimport { TableDirective } from \"./table.directive\";\nimport { TableHead } from \"./head/table-head.component\";\nimport { TableHeadCell } from \"./head/table-head-cell.component\";\nimport { TableHeadCheckbox } from \"./head/table-head-checkbox.component\";\nimport { TableHeadExpand } from \"./head/table-head-expand.component\";\nimport { TableBody } from \"./body/table-body.component\";\nimport { TableRowComponent } from \"./body/table-row.component\";\nimport { TableExpandedRow } from \"./body/table-expanded-row.component\";\nimport { TableData } from \"./cell/table-data.component\";\nimport { TableCheckbox } from \"./cell/table-checkbox.component\";\nimport { TableRadio } from \"./cell/table-radio.component\";\nimport { TableExpandButton } from \"./cell/table-expand-button.component\";\nimport { TableHeadCellLabel } from \"./head/table-head-cell-label.directive\";\n\n// model exports\nexport { TableModel } from \"./table-model.class\";\nexport { TableRow } from \"./table-row.class\";\nexport { TableItem } from \"./table-item.class\";\nexport { TableHeaderItem } from \"./table-header-item.class\";\nexport * from \"./table-adapter.class\";\nexport * from \"./data-grid-interaction-model.class\";\n\n@NgModule({\n\tdeclarations: [\n\t\t// toolbar and utility components\n\t\tTableToolbar,\n\t\tTableContainer,\n\t\tTableHeader,\n\t\tTableHeaderTitle,\n\t\tTableHeaderDescription,\n\t\tTableHeadCellLabel,\n\t\tTableToolbarActions,\n\t\tTableToolbarSearch,\n\t\tTableToolbarContent,\n\t\tExpandedRowHover,\n\t\t// core table components\n\t\tTable,\n\t\tTableDirective,\n\t\tTableHead,\n\t\tTableHeadCell,\n\t\tTableHeadCheckbox,\n\t\tTableHeadExpand,\n\t\tTableBody,\n\t\tTableRowComponent,\n\t\tTableExpandedRow,\n\t\tTableData,\n\t\tTableCheckbox,\n\t\tTableRadio,\n\t\tTableExpandButton\n\t],\n\texports: [\n\t\t// toolbar and utility components\n\t\tTableToolbar,\n\t\tTableContainer,\n\t\tTableHeader,\n\t\tTableHeaderTitle,\n\t\tTableHeaderDescription,\n\t\tTableHeadCellLabel,\n\t\tTableToolbarActions,\n\t\tTableToolbarSearch,\n\t\tTableToolbarContent,\n\t\tExpandedRowHover,\n\t\t// core table components\n\t\tTable,\n\t\tTableDirective,\n\t\tTableHead,\n\t\tTableHeadCell,\n\t\tTableHeadCheckbox,\n\t\tTableHeadExpand,\n\t\tTableBody,\n\t\tTableRowComponent,\n\t\tTableExpandedRow,\n\t\tTableData,\n\t\tTableCheckbox,\n\t\tTableRadio,\n\t\tTableExpandButton\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tNFormsModule,\n\t\tFormsModule,\n\t\tDialogModule,\n\t\tButtonModule,\n\t\tSearchModule,\n\t\tI18nModule,\n\t\tIconModule\n\t]\n})\nexport class TableModule {}\n"],"names":["TableToolbar","Object","defineProperty","prototype","value","this","_batchTextSingle","override","SINGLE","_batchTextMultiple","MULTIPLE","_batchTextLegacy","actionBarLabel","ACTION_BAR","CANCEL","_cancelText","model","totalDataLength","rowsSelected","reduce","previous","current","some","item","onCancel","selectAll","cancel","emit","Component","args","selector","template","I18n","Input","Output","i18n","size","EventEmitter","getOverridable","TableToolbarActions","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__values","o","m","Symbol","iterator","i","call","next","length","done","__read","n","r","e","ar","push","error","tslib_1.__extends","Search","TableToolbarSearch","ngAfterViewInit","_this","setTimeout","openSearch","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","HostBinding","_super","apply","arguments","tableSearch","hostClass","TableToolbarContent","class","TableContainer","containerClass","TableHeader","headerClass","displayStyle","Directive","TableHeaderTitle","titleClass","role","TableHeadCellLabel","baseClass","TableHeaderDescription","descriptionClass","ExpandedRowHover","addHoverClass","event","target","previousElementSibling","classList","add","removeHoverClass","remove","HostListener","TableHeaderItem","_ascending","asc","desc","_title","data","toString","title","compare","one","two","localeCompare","filter","filterCount","rawData","visible","sorted","sortable","rowSpan","colSpan","style","defaults","filterData","assign","_b","tslib_1.__values","getOwnPropertyNames","_c","property","TableItem","TableModel","_data","newData","isArray","fill","rowsExpanded","rowsContext","rowsClass","header","dataChange","_totalDataLength","isNaN","getId","column","row","tableModelCount","getHeaderId","ids","j","join","getHeader","headerCell","selectedRowsCount","count","forEach","rowSelected","expandedRowsCount","rowExpanded","index","realRowIndex","addRow","ri","realRow","columnCount","difference","currentRow","undefined","splice","deleteRow","rri","hasExpandableRows","expandedData","isRowExpandable","isRowExpanded","getRowContext","realColumnIndex","rc","addColumn","ci","deleteColumn","rci","rowCount","moveColumn","indexFrom","indexTo","headerFrom","sort","pushRowStateToModelData","a","descending","popRowStateFromModelData","rowSelectedMark","rowExpandedMark","rowContext","rowClass","pop","isRowFiltered","realIndex","selectRow","isRowDisabled","rowsSelectedChange","selectAllChange","isRowSelected","disabled","expandRow","rowsExpandedChange","COUNT","Subject","currentPage","pageLength","isEnd","isLoading","DataGridInteractionModel","rowSubject","getValue","columnSubject","tableAdapter","lastColumnIndex","lastRowIndex","handleKeyboardEvent","currentCell","getCell","currentColumn","findColumnIndex","findRowIndex","key","preventDefault","goToColumn","goToRow","ctrlKey","goTo","lastRow","lastColumn","handleClickEvent","cell","closest","_a","findIndex","rowIndex","cellIndex","resetTabIndexes","newTabIndex","getRow","from","cells","getFocusElementList","tabbableSelectorIgnoreTabIndex","node","tabIndex","reset","keyboardEventStream","clickEventStream","BehaviorSubject","asObservable","columnIndex","position","combineLatest","pipe","map","positions","subscribe","bind","TableDomSpanDirection","TableCellAdapter","TableRowAdapter","TableAdapter","getColumn","TableDomAdapter","getRealRowLength","tableElement","rows","col","findCellInColumn","firstHeader","findCellInRow","linkedCells","linkedRowCells","querySelectorAll","id","concat","__spread","headers","ids_2","split","headerRows","tHead","indexes","_f","reverse","_g","headerRow","headerCells","find","includes","cellIndex_1","headerCells_1","headerCells_1_1","c","firstIndex","similarCells","ids_1","ids_1_1","rowCells","rowCells_1","rowCells_1_1","rowCell","indexOf","_h","_j","contains","findCell","targetIndex","spanDirection","Table","skeletonModel","setTabIndex","element","focusElementList","firstElementChild","focus","_model","subscriptions","unsubscribe","Subscription","expandedChange","rowsChange","updateSelectAllCheckbox","isDataGrid","resetTabIndex","expandedRows","elementRef","nativeElement","_isDataGrid","isViewReady","enableDataGridInteractions","disableDataGridInteractions","_expandButtonAriaLabel","_sortDescendingLabel","_sortAscendingLabel","valueWithDefaults","merge","getMultiple","_filterTitle","FILTER","_endOfDataText","END_OF_DATA","_scrollTopText","SCROLL_TOP","_checkboxHeaderLabel","CHECKBOX_HEADER","_checkboxRowLabel","CHECKBOX_ROW","ngOnDestroy","positionSubscription","table","keydownEventStream","interactionModel","querySelector","fromEvent","previousElement","previousRow","previousColumn","currentElement","onSelectAll","onDeselectAll","deselectAll","onSelectRow","keys","enableSingleSelect","selectedRowIndex","deselectedRowIndex","deselectRow","onRowClick","rowClick","selectAllCheckbox","selectAllCheckboxSomeSelected","tabbable","columnResizeStart","columnResizeWidth","parseInt","width","columnResizeMouseX","clientX","mouseMoveSubscription","document","body","columnResizeProgress","mouseUpSubscription","columnResizeEnd","move","onScroll","scrollHeight","clientHeight","scrollTop","scrollLoadDistance","scrollLoad","columnDragStart","isColumnDragging","columnDraggedHoverIndex","dataTransfer","setData","JSON","stringify","columnDragEnd","columnDragEnter","columnDraggedPosition","columnDragLeave","columnDragover","columnDrop","getData","doSort","observers","ascending","scrollToTop","parentElement","children","getSelectionLabelValue","selectionLabelColumn","get","TABLE","ROW","getExpandButtonAriaLabel","subject","getSortDescendingLabel","getSortAscendingLabel","getCheckboxHeaderLabel","getCheckboxRowLabel","getEndOfDataText","getScrollTopText","getFilterTitle","ElementRef","ApplicationRef","type","applicationRef","skeleton","noBorder","showSelectionColumn","columnsResizable","columnsDraggable","striped","stickyHeader","TableDirective","tableClass","TableHead","scrollbarWidth","getScrollbarWidth","onSelectAllCheckboxChange","TableHeadCell","ngOnChanges","theadAction","filterTemplate","sortLabelMap","onClick","str","ariaSortLabel","formatSortLabel","TableHeadCheckbox","_ariaLabel","getAriaLabel","tableSelectAllCount","checked","indeterminate","name","change","TableHeadExpand","TableBody","onRowCheckboxChange","firstExpandedDataInRow","found","shouldExpandAsTable","expandAsTable","TableRowComponent","_checkboxLabel","selected","expandable","expanded","onHostClick","onSelectionChange","getCheckboxLabel","showSelectionColumnCheckbox","TableExpandedRow","firstExpandedTemplateInRow","expandedTemplate","expandableRowClass","dataChildRow","TableData","TableCheckbox","_label","getLabel","TableRadio","TableExpandButton","expandClass","TableRow","TableModule","NgModule","declarations","exports","imports","CommonModule","NFormsModule","FormsModule","DialogModule","ButtonModule","SearchModule","I18nModule","IconModule"],"mappings":"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"}