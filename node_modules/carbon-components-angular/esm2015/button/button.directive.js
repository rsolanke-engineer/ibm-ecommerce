/**
 *
 * carbon-angular v0.0.0 | button.directive.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, Input } from "@angular/core";
/**
 * A convenience directive for applying styling to a button.
 *
 * [See demo](../../?path=/story/components-button--basic)
 *
 * Example:
 *
 * ```html
 * <button ibmButton>A button</button>
 * <button ibmButton="secondary">A secondary button</button>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/button/code) for more detail.
 *
 * <example-url>../../iframe.html?id=components-button--basic</example-url>
 */
export class Button {
    constructor() {
        /**
         * sets the button type
         */
        this.ibmButton = "primary";
        /**
         * If assistive text is used, this specifies the placement.
         * Possible placements are `top`, `bottom`, `left`, `right`.
         * If assistive text is not used, this can be left undefined.
         */
        this.assistiveTextPlacement = "top";
        /**
         * If assistive text is used, this specifies the alignment.
         * Possible alignments are `center`, `start`, `end`.
         * If assistive text is not used, this can be left undefined.
         */
        this.assistiveTextAlignment = "center";
        /**
         * Set to `true` for a skeleton state button
         */
        this.skeleton = false;
        /**
         * Set to `true` if the button contains only an icon, and a span with `.bx--assistive-text` containing the content
         * For example:
         *
         * <button ibmButton="primary" [iconOnly]="true" [hasAssistiveText]="true">
         *    <svg class="bx--btn__icon" ibmIconCopy size="20"></svg>
         *    <span class="bx--assistive-text">Icon description</span>
         * </button>
         */
        this.iconOnly = false;
        /**
         * Set to `true` for a "expressive" style button
         */
        this.isExpressive = false;
        this.toolbarAction = false;
        this.overflowMenu = false;
        /**
         * `hasAssistiveText` input specifies whether the button contains assistive text or not.
         * Assistive text can be utilized as follows:
         * ```typescript
         *	<button
         *		ibmButton="tertiary"
         *		[iconOnly]="true"
         *		[hasAssistiveText]="true"
         *		assistiveTextPlacement="top"
         *		assistiveTextAlignment="center">
         *		<svg class="bx--btn__icon" ibmIcon="copy" size="20"></svg>
         *		<span class="bx--assistive-text">Icon description</span>
         *	</button>
         * ```
         */
        this.hasAssistiveText = false;
    }
    // a whole lot of HostBindings ... this way we don't have to touch the elementRef directly
    get baseClass() {
        return !this.toolbarAction;
    }
    get primaryButton() {
        return this.ibmButton === "primary";
    }
    get secondaryButton() {
        return this.ibmButton === "secondary";
    }
    get tertiaryButton() {
        return this.ibmButton === "tertiary";
    }
    get ghostButton() {
        return this.ibmButton === "ghost";
    }
    get dangerButton() {
        return this.ibmButton === "danger" || this.ibmButton === "danger--primary";
    }
    get dangerTertiary() {
        return this.ibmButton === "danger--tertiary";
    }
    get dangerGhost() {
        return this.ibmButton === "danger--ghost";
    }
    get smallSize() {
        return this.size === "sm";
    }
    get largeSize() {
        return this.size === "lg";
    }
    get extraLargeSize() {
        return this.size === "xl";
    }
    get fieldSize() {
        return this.size === "field";
    }
    get isAssistiveTextCenterAligned() {
        return this.hasAssistiveText && this.assistiveTextAlignment === "center";
    }
    get isAssistiveTextStartAligned() {
        return this.hasAssistiveText && this.assistiveTextAlignment === "start";
    }
    get isAssistiveTextEndAligned() {
        return this.hasAssistiveText && this.assistiveTextAlignment === "end";
    }
    get isAssistiveTextTopPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "top";
    }
    get isAssistiveTextBottomPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "bottom";
    }
    get isAssistiveTextLeftPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "left";
    }
    get isAssistiveTextRightPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "right";
    }
    ngOnInit() {
        if (!this.ibmButton) {
            this.ibmButton = "primary";
        }
    }
}
Button.decorators = [
    { type: Directive, args: [{
                selector: "[ibmButton]"
            },] }
];
Button.propDecorators = {
    ibmButton: [{ type: Input }],
    size: [{ type: Input }],
    assistiveTextPlacement: [{ type: Input }],
    assistiveTextAlignment: [{ type: Input }],
    skeleton: [{ type: HostBinding, args: ["class.bx--skeleton",] }, { type: Input }],
    iconOnly: [{ type: HostBinding, args: ["class.bx--btn--icon-only",] }, { type: Input }],
    isExpressive: [{ type: HostBinding, args: ["class.bx--btn--expressive",] }, { type: Input }],
    baseClass: [{ type: HostBinding, args: ["class.bx--btn",] }],
    primaryButton: [{ type: HostBinding, args: ["class.bx--btn--primary",] }],
    secondaryButton: [{ type: HostBinding, args: ["class.bx--btn--secondary",] }],
    tertiaryButton: [{ type: HostBinding, args: ["class.bx--btn--tertiary",] }],
    ghostButton: [{ type: HostBinding, args: ["class.bx--btn--ghost",] }],
    dangerButton: [{ type: HostBinding, args: ["class.bx--btn--danger",] }],
    dangerTertiary: [{ type: HostBinding, args: ["class.bx--btn--danger--tertiary",] }],
    dangerGhost: [{ type: HostBinding, args: ["class.bx--btn--danger--ghost",] }],
    smallSize: [{ type: HostBinding, args: ["class.bx--btn--sm",] }],
    largeSize: [{ type: HostBinding, args: ["class.bx--btn--lg",] }],
    extraLargeSize: [{ type: HostBinding, args: ["class.bx--btn--xl",] }],
    fieldSize: [{ type: HostBinding, args: ["class.bx--btn--field",] }],
    toolbarAction: [{ type: HostBinding, args: ["class.bx--toolbar-action",] }],
    overflowMenu: [{ type: HostBinding, args: ["class.bx--overflow-menu",] }],
    hasAssistiveText: [{ type: HostBinding, args: ["class.bx--tooltip__trigger",] }, { type: HostBinding, args: ["class.bx--tooltip--a11y",] }, { type: Input }],
    isAssistiveTextCenterAligned: [{ type: HostBinding, args: ["class.bx--tooltip--align-center",] }],
    isAssistiveTextStartAligned: [{ type: HostBinding, args: ["class.bx--tooltip--align-start",] }],
    isAssistiveTextEndAligned: [{ type: HostBinding, args: ["class.bx--tooltip--align-end",] }],
    isAssistiveTextTopPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--top",] }],
    isAssistiveTextBottomPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--bottom",] }],
    isAssistiveTextLeftPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--left",] }],
    isAssistiveTextRightPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--right",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvYnV0dG9uLyIsInNvdXJjZXMiOlsiYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBRUwsTUFBTSxlQUFlLENBQUM7QUFHdkI7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxPQUFPLE1BQU07SUFIbkI7UUFJQzs7V0FFRztRQUNNLGNBQVMsR0FBZSxTQUFTLENBQUM7UUFLM0M7Ozs7V0FJRztRQUNNLDJCQUFzQixHQUF3QyxLQUFLLENBQUM7UUFDN0U7Ozs7V0FJRztRQUNNLDJCQUFzQixHQUErQixRQUFRLENBQUM7UUFDdkU7O1dBRUc7UUFDeUMsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUM3RDs7Ozs7Ozs7V0FRRztRQUMrQyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRW5FOztXQUVHO1FBQ2dELGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBdUMvQixrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUN2QixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUc3RDs7Ozs7Ozs7Ozs7Ozs7V0FjRztRQUU4QyxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7SUFtQzNFLENBQUM7SUE1RkEsMEZBQTBGO0lBQzFGLElBQWtDLFNBQVM7UUFDMUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUNELElBQTJDLGFBQWE7UUFDdkQsT0FBTyxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQztJQUNyQyxDQUFDO0lBQ0QsSUFBNkMsZUFBZTtRQUMzRCxPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssV0FBVyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxJQUE0QyxjQUFjO1FBQ3pELE9BQU8sSUFBSSxDQUFDLFNBQVMsS0FBSyxVQUFVLENBQUM7SUFDdEMs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V0FBVyxTQUFDLHNCQUFzQjs0QkFHbEMsV0FBVyxTQUFDLDBCQUEwQjsyQkFDdEMsV0FBVyxTQUFDLHlCQUF5QjsrQkFrQnJDLFdBQVcsU0FBQyw0QkFBNEIsY0FDeEMsV0FBVyxTQUFDLHlCQUF5QixjQUFHLEtBQUs7MkNBRTdDLFdBQVcsU0FBQyxpQ0FBaUM7MENBSTdDLFdBQVcsU0FBQyxnQ0FBZ0M7d0NBSTVDLFdBQVcsU0FBQyw4QkFBOEI7MkNBSTFDLFdBQVcsU0FBQyx3QkFBd0I7OENBSXBDLFdBQVcsU0FBQywyQkFBMkI7NENBSXZDLFdBQVcsU0FBQyx5QkFBeUI7NkNBSXJDLFdBQVcsU0FBQywwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHREaXJlY3RpdmUsXG5cdEhvc3RCaW5kaW5nLFxuXHRJbnB1dCxcblx0T25Jbml0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBCdXR0b25TaXplLCBCdXR0b25UeXBlIH0gZnJvbSBcIi4vYnV0dG9uLnR5cGVzXCI7XG5cbi8qKlxuICogQSBjb252ZW5pZW5jZSBkaXJlY3RpdmUgZm9yIGFwcGx5aW5nIHN0eWxpbmcgdG8gYSBidXR0b24uXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy1idXR0b24tLWJhc2ljKVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgaHRtbFxuICogPGJ1dHRvbiBpYm1CdXR0b24+QSBidXR0b248L2J1dHRvbj5cbiAqIDxidXR0b24gaWJtQnV0dG9uPVwic2Vjb25kYXJ5XCI+QSBzZWNvbmRhcnkgYnV0dG9uPC9idXR0b24+XG4gKiBgYGBcbiAqXG4gKiBTZWUgdGhlIFt2YW5pbGxhIGNhcmJvbiBkb2NzXShodHRwOi8vd3d3LmNhcmJvbmRlc2lnbnN5c3RlbS5jb20vY29tcG9uZW50cy9idXR0b24vY29kZSkgZm9yIG1vcmUgZGV0YWlsLlxuICpcbiAqIDxleGFtcGxlLXVybD4uLi8uLi9pZnJhbWUuaHRtbD9pZD1jb21wb25lbnRzLWJ1dHRvbi0tYmFzaWM8L2V4YW1wbGUtdXJsPlxuICovXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6IFwiW2libUJ1dHRvbl1cIlxufSlcbmV4cG9ydCBjbGFzcyBCdXR0b24gaW1wbGVtZW50cyBPbkluaXQge1xuXHQvKipcblx0ICogc2V0cyB0aGUgYnV0dG9uIHR5cGVcblx0ICovXG5cdEBJbnB1dCgpIGlibUJ1dHRvbjogQnV0dG9uVHlwZSA9IFwicHJpbWFyeVwiO1xuXHQvKipcblx0ICogU3BlY2lmeSB0aGUgc2l6ZSBvZiB0aGUgYnV0dG9uXG5cdCAqL1xuXHRASW5wdXQoKSBzaXplOiBCdXR0b25TaXplO1xuXHQvKipcblx0ICogSWYgYXNzaXN0aXZlIHRleHQgaXMgdXNlZCwgdGhpcyBzcGVjaWZpZXMgdGhlIHBsYWNlbWVudC5cblx0ICogUG9zc2libGUgcGxhY2VtZW50cyBhcmUgYHRvcGAsIGBib3R0b21gLCBgbGVmdGAsIGByaWdodGAuXG5cdCAqIElmIGFzc2lzdGl2ZSB0ZXh0IGlzIG5vdCB1c2VkLCB0aGlzIGNhbiBiZSBsZWZ0IHVuZGVmaW5lZC5cblx0ICovXG5cdEBJbnB1dCgpIGFzc2lzdGl2ZVRleHRQbGFjZW1lbnQ6IFwidG9wXCIgfCBcImJvdHRvbVwiIHwgXCJsZWZ0XCIgfCBcInJpZ2h0XCIgPSBcInRvcFwiO1xuXHQvKipcblx0ICogSWYgYXNzaXN0aXZlIHRleHQgaXMgdXNlZCwgdGhpcyBzcGVjaWZpZXMgdGhlIGFsaWdubWVudC5cblx0ICogUG9zc2libGUgYWxpZ25tZW50cyBhcmUgYGNlbnRlcmAsIGBzdGFydGAsIGBlbmRgLlxuXHQgKiBJZiBhc3Npc3RpdmUgdGV4dCBpcyBub3QgdXNlZCwgdGhpcyBjYW4gYmUgbGVmdCB1bmRlZmluZWQuXG5cdCAqL1xuXHRASW5wdXQoKSBhc3Npc3RpdmVUZXh0QWxpZ25tZW50OiBcImNlbnRlclwiIHwgXCJzdGFydFwiIHwgXCJlbmRcIiA9IFwiY2VudGVyXCI7XG5cdC8qKlxuXHQgKiBTZXQgdG8gYHRydWVgIGZvciBhIHNrZWxldG9uIHN0YXRlIGJ1dHRvblxuXHQgKi9cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXNrZWxldG9uXCIpIEBJbnB1dCgpIHNrZWxldG9uID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBTZXQgdG8gYHRydWVgIGlmIHRoZSBidXR0b24gY29udGFpbnMgb25seSBhbiBpY29uLCBhbmQgYSBzcGFuIHdpdGggYC5ieC0tYXNzaXN0aXZlLXRleHRgIGNvbnRhaW5pbmcgdGhlIGNvbnRlbnRcblx0ICogRm9yIGV4YW1wbGU6XG5cdCAqXG5cdCAqIDxidXR0b24gaWJtQnV0dG9uPVwicHJpbWFyeVwiIFtpY29uT25seV09XCJ0cnVlXCIgW2hhc0Fzc2lzdGl2ZVRleHRdPVwidHJ1ZVwiPlxuXHQgKiAgICA8c3ZnIGNsYXNzPVwiYngtLWJ0bl9faWNvblwiIGlibUljb25Db3B5IHNpemU9XCIyMFwiPjwvc3ZnPlxuXHQgKiAgICA8c3BhbiBjbGFzcz1cImJ4LS1hc3Npc3RpdmUtdGV4dFwiPkljb24gZGVzY3JpcHRpb248L3NwYW4+XG5cdCAqIDwvYnV0dG9uPlxuXHQgKi9cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWJ0bi0taWNvbi1vbmx5XCIpIEBJbnB1dCgpIGljb25Pbmx5ID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIFNldCB0byBgdHJ1ZWAgZm9yIGEgXCJleHByZXNzaXZlXCIgc3R5bGUgYnV0dG9uXG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tYnRuLS1leHByZXNzaXZlXCIpIEBJbnB1dCgpIGlzRXhwcmVzc2l2ZSA9IGZhbHNlO1xuXG5cdC8vIGEgd2hvbGUgbG90IG9mIEhvc3RCaW5kaW5ncyAuLi4gdGhpcyB3YXkgd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgZWxlbWVudFJlZiBkaXJlY3RseVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tYnRuXCIpIGdldCBiYXNlQ2xhc3MoKSB7XG5cdFx0cmV0dXJuICF0aGlzLnRvb2xiYXJBY3Rpb247XG5cdH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWJ0bi0tcHJpbWFyeVwiKSBnZXQgcHJpbWFyeUJ1dHRvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5pYm1CdXR0b24gPT09IFwicHJpbWFyeVwiO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1idG4tLXNlY29uZGFyeVwiKSBnZXQgc2Vjb25kYXJ5QnV0dG9uKCkge1xuXHRcdHJldHVybiB0aGlzLmlibUJ1dHRvbiA9PT0gXCJzZWNvbmRhcnlcIjtcblx0fVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tYnRuLS10ZXJ0aWFyeVwiKSBnZXQgdGVydGlhcnlCdXR0b24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuaWJtQnV0dG9uID09PSBcInRlcnRpYXJ5XCI7XG5cdH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWJ0bi0tZ2hvc3RcIikgZ2V0IGdob3N0QnV0dG9uKCkge1xuXHRcdHJldHVybiB0aGlzLmlibUJ1dHRvbiA9PT0gXCJnaG9zdFwiO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1idG4tLWRhbmdlclwiKSBnZXQgZGFuZ2VyQnV0dG9uKCkge1xuXHRcdHJldHVybiB0aGlzLmlibUJ1dHRvbiA9PT0gXCJkYW5nZXJcIiB8fCB0aGlzLmlibUJ1dHRvbiA9PT0gXCJkYW5nZXItLXByaW1hcnlcIjtcblx0fVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tYnRuLS1kYW5nZXItLXRlcnRpYXJ5XCIpIGdldCBkYW5nZXJUZXJ0aWFyeSgpIHtcblx0XHRyZXR1cm4gdGhpcy5pYm1CdXR0b24gPT09IFwiZGFuZ2VyLS10ZXJ0aWFyeVwiO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1idG4tLWRhbmdlci0tZ2hvc3RcIikgZ2V0IGRhbmdlckdob3N0KCkge1xuXHRcdHJldHVybiB0aGlzLmlibUJ1dHRvbiA9PT0gXCJkYW5nZXItLWdob3N0XCI7XG5cdH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWJ0bi0tc21cIikgZ2V0IHNtYWxsU2l6ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5zaXplID09PSBcInNtXCI7XG5cdH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWJ0bi0tbGdcIikgZ2V0IGxhcmdlU2l6ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5zaXplID09PSBcImxnXCI7XG5cdH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWJ0bi0teGxcIikgZ2V0IGV4dHJhTGFyZ2VTaXplKCkge1xuXHRcdHJldHVybiB0aGlzLnNpemUgPT09IFwieGxcIjtcblx0fVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tYnRuLS1maWVsZFwiKSBnZXQgZmllbGRTaXplKCkge1xuXHRcdHJldHVybiB0aGlzLnNpemUgPT09IFwiZmllbGRcIjtcblx0fVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9vbGJhci1hY3Rpb25cIikgdG9vbGJhckFjdGlvbiA9IGZhbHNlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tb3ZlcmZsb3ctbWVudVwiKSBvdmVyZmxvd01lbnUgPSBmYWxzZTtcblxuXG5cdC8qKlxuXHQgKiBgaGFzQXNzaXN0aXZlVGV4dGAgaW5wdXQgc3BlY2lmaWVzIHdoZXRoZXIgdGhlIGJ1dHRvbiBjb250YWlucyBhc3Npc3RpdmUgdGV4dCBvciBub3QuXG5cdCAqIEFzc2lzdGl2ZSB0ZXh0IGNhbiBiZSB1dGlsaXplZCBhcyBmb2xsb3dzOlxuXHQgKiBgYGB0eXBlc2NyaXB0XG5cdCAqXHQ8YnV0dG9uXG5cdCAqXHRcdGlibUJ1dHRvbj1cInRlcnRpYXJ5XCJcblx0ICpcdFx0W2ljb25Pbmx5XT1cInRydWVcIlxuXHQgKlx0XHRbaGFzQXNzaXN0aXZlVGV4dF09XCJ0cnVlXCJcblx0ICpcdFx0YXNzaXN0aXZlVGV4dFBsYWNlbWVudD1cInRvcFwiXG5cdCAqXHRcdGFzc2lzdGl2ZVRleHRBbGlnbm1lbnQ9XCJjZW50ZXJcIj5cblx0ICpcdFx0PHN2ZyBjbGFzcz1cImJ4LS1idG5fX2ljb25cIiBpYm1JY29uPVwiY29weVwiIHNpemU9XCIyMFwiPjwvc3ZnPlxuXHQgKlx0XHQ8c3BhbiBjbGFzcz1cImJ4LS1hc3Npc3RpdmUtdGV4dFwiPkljb24gZGVzY3JpcHRpb248L3NwYW4+XG5cdCAqXHQ8L2J1dHRvbj5cblx0ICogYGBgXG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9vbHRpcF9fdHJpZ2dlclwiKVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9vbHRpcC0tYTExeVwiKSBASW5wdXQoKSBoYXNBc3Npc3RpdmVUZXh0ID0gZmFsc2U7XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXRvb2x0aXAtLWFsaWduLWNlbnRlclwiKSBnZXQgaXNBc3Npc3RpdmVUZXh0Q2VudGVyQWxpZ25lZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5oYXNBc3Npc3RpdmVUZXh0ICYmIHRoaXMuYXNzaXN0aXZlVGV4dEFsaWdubWVudCA9PT0gXCJjZW50ZXJcIjtcblx0fVxuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS10b29sdGlwLS1hbGlnbi1zdGFydFwiKSBnZXQgaXNBc3Npc3RpdmVUZXh0U3RhcnRBbGlnbmVkKCkge1xuXHRcdHJldHVybiB0aGlzLmhhc0Fzc2lzdGl2ZVRleHQgJiYgdGhpcy5hc3Npc3RpdmVUZXh0QWxpZ25tZW50ID09PSBcInN0YXJ0XCI7XG5cdH1cblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9vbHRpcC0tYWxpZ24tZW5kXCIpIGdldCBpc0Fzc2lzdGl2ZVRleHRFbmRBbGlnbmVkKCkge1xuXHRcdHJldHVybiB0aGlzLmhhc0Fzc2lzdGl2ZVRleHQgJiYgdGhpcy5hc3Npc3RpdmVUZXh0QWxpZ25tZW50ID09PSBcImVuZFwiO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXRvb2x0aXAtLXRvcFwiKSBnZXQgaXNBc3Npc3RpdmVUZXh0VG9wUG9zaXRpb25lZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5oYXNBc3Npc3RpdmVUZXh0ICYmIHRoaXMuYXNzaXN0aXZlVGV4dFBsYWNlbWVudCA9PT0gXCJ0b3BcIjtcblx0fVxuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS10b29sdGlwLS1ib3R0b21cIikgZ2V0IGlzQXNzaXN0aXZlVGV4dEJvdHRvbVBvc2l0aW9uZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaGFzQXNzaXN0aXZlVGV4dCAmJiB0aGlzLmFzc2lzdGl2ZVRleHRQbGFjZW1lbnQgPT09IFwiYm90dG9tXCI7XG5cdH1cblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9vbHRpcC0tbGVmdFwiKSBnZXQgaXNBc3Npc3RpdmVUZXh0TGVmdFBvc2l0aW9uZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaGFzQXNzaXN0aXZlVGV4dCAmJiB0aGlzLmFzc2lzdGl2ZVRleHRQbGFjZW1lbnQgPT09IFwibGVmdFwiO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXRvb2x0aXAtLXJpZ2h0XCIpIGdldCBpc0Fzc2lzdGl2ZVRleHRSaWdodFBvc2l0aW9uZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaGFzQXNzaXN0aXZlVGV4dCAmJiB0aGlzLmFzc2lzdGl2ZVRleHRQbGFjZW1lbnQgPT09IFwicmlnaHRcIjtcblx0fVxuXG5cdG5nT25Jbml0KCkge1xuXHRcdGlmICghdGhpcy5pYm1CdXR0b24pIHtcblx0XHRcdHRoaXMuaWJtQnV0dG9uID0gXCJwcmltYXJ5XCI7XG5cdFx0fVxuXHR9XG59XG4iXX0=