/**
 *
 * carbon-angular v0.0.0 | content-switcher-option.directive.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, Input, HostListener, Output, EventEmitter, ElementRef, Renderer2 } from "@angular/core";
export class ContentSwitcherOption {
    constructor(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        /**
         * Internal name for the option.
         * Should be something that identifies the option to the application.
         * Accessible from the `ContentSwitcher` `selected` emitter
         */
        this.name = "option";
        /**
         * Emits when the option is selected.
         */
        this.selected = new EventEmitter();
        this.onClick = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.switcherClass = "bx--content-switcher-btn";
        this.selectedClass = false;
        this.role = "tab";
        this.ariaSelected = false;
        this.tabindex = "-1";
        this._active = false;
    }
    /**
     * Used to activate the option. Only one option may be `active` at a time
     */
    set active(value) {
        this._active = value;
        this.selectedClass = value;
        this.ariaSelected = value;
        this.tabindex = value ? "0" : "-1";
    }
    get active() {
        return this._active;
    }
    hostClick(event) {
        this.onClick.emit(event);
        // skip setting and emitting if the option is already active
        if (this.active) {
            return;
        }
        this.active = true;
        this.selected.emit(true);
    }
    doFocus(event) {
        this.onFocus.emit(event);
        // skip setting and emitting if the option is already active
        if (this.active) {
            return;
        }
        this.active = true;
        this.selected.emit(true);
    }
    /*
    * encapsulating the content in a span with bx--content-switcher__label class
    * to mimic what is done in the react version
    */
    ngOnInit() {
        const hostNativeElement = this.hostElement.nativeElement;
        const spanWrapper = this.renderer.createElement("span");
        this.renderer.addClass(spanWrapper, "bx--content-switcher__label");
        const hostChildren = [];
        hostNativeElement.childNodes.forEach(node => hostChildren.push(node));
        hostChildren.forEach(node => {
            this.renderer.removeChild(hostNativeElement, node);
            this.renderer.appendChild(spanWrapper, node);
        });
        this.renderer.appendChild(hostNativeElement, spanWrapper);
    }
}
ContentSwitcherOption.decorators = [
    { type: Directive, args: [{
                selector: "[ibmContentOption]"
            },] }
];
/** @nocollapse */
ContentSwitcherOption.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
ContentSwitcherOption.propDecorators = {
    active: [{ type: Input }],
    name: [{ type: Input }],
    selected: [{ type: Output }],
    onClick: [{ type: Output }],
    onFocus: [{ type: Output }],
    switcherClass: [{ type: HostBinding, args: ["class",] }],
    selectedClass: [{ type: HostBinding, args: ["class.bx--content-switcher--selected",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    ariaSelected: [{ type: HostBinding, args: ["attr.aria-selected",] }],
    tabindex: [{ type: HostBinding, args: ["attr.tabIndex",] }],
    hostClick: [{ type: HostListener, args: ["click", ["$event"],] }],
    doFocus: [{ type: HostListener, args: ["focus", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1zd2l0Y2hlci1vcHRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9jb250ZW50LXN3aXRjaGVyLyIsInNvdXJjZXMiOlsiY29udGVudC1zd2l0Y2hlci1vcHRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsV0FBVyxFQUNYLEtBQUssRUFDTCxZQUFZLEVBQ1osTUFBTSxFQUNOLFlBQVksRUFDWixVQUFVLEVBRVYsU0FBUyxFQUNULE1BQU0sZUFBZSxDQUFDO0FBS3ZCLE1BQU0sT0FBTyxxQkFBcUI7SUF1Q2pDLFlBQW9CLFFBQW1CLEVBQVUsV0FBdUI7UUFBcEQsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBeEJ4RTs7OztXQUlHO1FBQ00sU0FBSSxHQUFHLFFBQVEsQ0FBQztRQUV6Qjs7V0FFRztRQUNPLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBRXZDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBYyxDQUFDO1FBRXpDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBYyxDQUFDO1FBRTdCLGtCQUFhLEdBQUcsMEJBQTBCLENBQUM7UUFDWixrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUNqRCxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ0osaUJBQVksR0FBRyxLQUFLLENBQUM7UUFDMUIsYUFBUSxHQUFHLElBQUksQ0FBQztRQUVwQyxZQUFPLEdBQUcsS0FBSyxDQUFDO0lBRWlELENBQUM7SUF0QzVFOztPQUVHO0lBQ0gsSUFBYSxNQUFNLENBQUUsS0FBYztRQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQUksTUFBTTtRQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUNyQixDQUFDO0lBNkJELFNBQVMsQ0FBQyxLQUFpQjtRQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6Qiw0REFBNEQ7UUFDNUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFHRCxPQUFPLENBQUMsS0FBaUI7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsNERBQTREO1FBQzVELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUFFLE9BQU87U0FBRTtRQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7OztNQUdFO0lBQ0YsUUFBUTtRQUNQLE1BQU0saUJBQWlCLEdBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUE2QixDQUFDO1FBQzFFLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO1FBQ25FLE1BQU0sWUFBWSxHQUFnQixFQUFFLENBQUM7UUFDckMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0RSxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzNELENBQUM7OztZQTdFRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLG9CQUFvQjthQUM5Qjs7OztZQUxBLFNBQVM7WUFGVCxVQUFVOzs7cUJBWVQsS0FBSzttQkFnQkwsS0FBSzt1QkFLTCxNQUFNO3NCQUVOLE1BQU07c0JBRU4sTUFBTTs0QkFFTixXQUFXLFNBQUMsT0FBTzs0QkFDbkIsV0FBVyxTQUFDLHNDQUFzQzttQkFDbEQsV0FBVyxTQUFDLFdBQVc7MkJBQ3ZCLFdBQVcsU0FBQyxvQkFBb0I7dUJBQ2hDLFdBQVcsU0FBQyxlQUFlO3dCQU0zQixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO3NCQVNoQyxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0RGlyZWN0aXZlLFxuXHRIb3N0QmluZGluZyxcblx0SW5wdXQsXG5cdEhvc3RMaXN0ZW5lcixcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXIsXG5cdEVsZW1lbnRSZWYsXG5cdE9uSW5pdCxcblx0UmVuZGVyZXIyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogXCJbaWJtQ29udGVudE9wdGlvbl1cIlxufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50U3dpdGNoZXJPcHRpb24gaW1wbGVtZW50cyBPbkluaXQge1xuXHQvKipcblx0ICogVXNlZCB0byBhY3RpdmF0ZSB0aGUgb3B0aW9uLiBPbmx5IG9uZSBvcHRpb24gbWF5IGJlIGBhY3RpdmVgIGF0IGEgdGltZVxuXHQgKi9cblx0QElucHV0KCkgc2V0IGFjdGl2ZSAodmFsdWU6IGJvb2xlYW4pIHtcblx0XHR0aGlzLl9hY3RpdmUgPSB2YWx1ZTtcblx0XHR0aGlzLnNlbGVjdGVkQ2xhc3MgPSB2YWx1ZTtcblx0XHR0aGlzLmFyaWFTZWxlY3RlZCA9IHZhbHVlO1xuXHRcdHRoaXMudGFiaW5kZXggPSB2YWx1ZSA/IFwiMFwiIDogXCItMVwiO1xuXHR9XG5cblx0Z2V0IGFjdGl2ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fYWN0aXZlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEludGVybmFsIG5hbWUgZm9yIHRoZSBvcHRpb24uXG5cdCAqIFNob3VsZCBiZSBzb21ldGhpbmcgdGhhdCBpZGVudGlmaWVzIHRoZSBvcHRpb24gdG8gdGhlIGFwcGxpY2F0aW9uLlxuXHQgKiBBY2Nlc3NpYmxlIGZyb20gdGhlIGBDb250ZW50U3dpdGNoZXJgIGBzZWxlY3RlZGAgZW1pdHRlclxuXHQgKi9cblx0QElucHV0KCkgbmFtZSA9IFwib3B0aW9uXCI7XG5cblx0LyoqXG5cdCAqIEVtaXRzIHdoZW4gdGhlIG9wdGlvbiBpcyBzZWxlY3RlZC5cblx0ICovXG5cdEBPdXRwdXQoKSBzZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuXHRAT3V0cHV0KCkgb25DbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4oKTtcblxuXHRAT3V0cHV0KCkgb25Gb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXI8Rm9jdXNFdmVudD4oKTtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzc1wiKSBzd2l0Y2hlckNsYXNzID0gXCJieC0tY29udGVudC1zd2l0Y2hlci1idG5cIjtcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWNvbnRlbnQtc3dpdGNoZXItLXNlbGVjdGVkXCIpIHNlbGVjdGVkQ2xhc3MgPSBmYWxzZTtcblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5yb2xlXCIpIHJvbGUgPSBcInRhYlwiO1xuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmFyaWEtc2VsZWN0ZWRcIikgYXJpYVNlbGVjdGVkID0gZmFsc2U7XG5cdEBIb3N0QmluZGluZyhcImF0dHIudGFiSW5kZXhcIikgdGFiaW5kZXggPSBcIi0xXCI7XG5cblx0cHJvdGVjdGVkIF9hY3RpdmUgPSBmYWxzZTtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYpIHt9XG5cblx0QEhvc3RMaXN0ZW5lcihcImNsaWNrXCIsIFtcIiRldmVudFwiXSlcblx0aG9zdENsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG5cdFx0dGhpcy5vbkNsaWNrLmVtaXQoZXZlbnQpO1xuXHRcdC8vIHNraXAgc2V0dGluZyBhbmQgZW1pdHRpbmcgaWYgdGhlIG9wdGlvbiBpcyBhbHJlYWR5IGFjdGl2ZVxuXHRcdGlmICh0aGlzLmFjdGl2ZSkgeyByZXR1cm47IH1cblx0XHR0aGlzLmFjdGl2ZSA9IHRydWU7XG5cdFx0dGhpcy5zZWxlY3RlZC5lbWl0KHRydWUpO1xuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcihcImZvY3VzXCIsIFtcIiRldmVudFwiXSlcblx0ZG9Gb2N1cyhldmVudDogRm9jdXNFdmVudCkge1xuXHRcdHRoaXMub25Gb2N1cy5lbWl0KGV2ZW50KTtcblx0XHQvLyBza2lwIHNldHRpbmcgYW5kIGVtaXR0aW5nIGlmIHRoZSBvcHRpb24gaXMgYWxyZWFkeSBhY3RpdmVcblx0XHRpZiAodGhpcy5hY3RpdmUpIHsgcmV0dXJuOyB9XG5cdFx0dGhpcy5hY3RpdmUgPSB0cnVlO1xuXHRcdHRoaXMuc2VsZWN0ZWQuZW1pdCh0cnVlKTtcblx0fVxuXG5cdC8qXG5cdCogZW5jYXBzdWxhdGluZyB0aGUgY29udGVudCBpbiBhIHNwYW4gd2l0aCBieC0tY29udGVudC1zd2l0Y2hlcl9fbGFiZWwgY2xhc3Ncblx0KiB0byBtaW1pYyB3aGF0IGlzIGRvbmUgaW4gdGhlIHJlYWN0IHZlcnNpb25cblx0Ki9cblx0bmdPbkluaXQoKTogdm9pZCB7XG5cdFx0Y29uc3QgaG9zdE5hdGl2ZUVsZW1lbnQgPSAodGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KTtcblx0XHRjb25zdCBzcGFuV3JhcHBlciA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdFx0dGhpcy5yZW5kZXJlci5hZGRDbGFzcyhzcGFuV3JhcHBlciwgXCJieC0tY29udGVudC1zd2l0Y2hlcl9fbGFiZWxcIik7XG5cdFx0Y29uc3QgaG9zdENoaWxkcmVuOiBDaGlsZE5vZGVbXSA9IFtdO1xuXHRcdGhvc3ROYXRpdmVFbGVtZW50LmNoaWxkTm9kZXMuZm9yRWFjaChub2RlID0+IGhvc3RDaGlsZHJlbi5wdXNoKG5vZGUpKTtcblx0XHRob3N0Q2hpbGRyZW4uZm9yRWFjaChub2RlID0+IHtcblx0XHRcdHRoaXMucmVuZGVyZXIucmVtb3ZlQ2hpbGQoaG9zdE5hdGl2ZUVsZW1lbnQsIG5vZGUpO1xuXHRcdFx0dGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZChzcGFuV3JhcHBlciwgbm9kZSk7XG5cdFx0fSk7XG5cdFx0dGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZChob3N0TmF0aXZlRWxlbWVudCwgc3BhbldyYXBwZXIpO1xuXHR9XG59XG4iXX0=