/**
 *
 * carbon-angular v0.0.0 | content-switcher.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, ContentChildren, QueryList, Output, EventEmitter, HostListener, ElementRef } from "@angular/core";
import { ContentSwitcherOption } from "./content-switcher-option.directive";
import { isFocusInLastItem, isFocusInFirstItem } from "carbon-components-angular/common";
/**
 * The content switcher can be used for toggling between distinct options.
 * Similar to tabs, but without an associated content panel
 *
 * [See demo](../../?path=/story/components-content-switcher--basic)
 *
 * ```html
 * <ibm-content-switcher (selected)="selected($event)">
 *		<button ibmContentOption>First section</button>
 *		<button ibmContentOption>Second section</button>
 *		<button ibmContentOption>Third section</button>
 *	</ibm-content-switcher>
 *	```
 *
 * <example-url>../../iframe.html?id=components-content-switcher--basic</example-url>
 */
export class ContentSwitcher {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.ariaLabel = "content switcher";
        /**
         * `light` or `dark` content switcher theme
         */
        this.theme = "dark";
        /**
         * Emits the activated `ContentSwitcherOption`
         */
        this.selected = new EventEmitter();
    }
    ngAfterViewInit() {
        const firstActive = this.options.find(option => option.active);
        // delay setting active until the DOM has settled
        if (!firstActive) {
            setTimeout(() => this.options.first.active = true);
        }
        // subscribe to each item, emit when one is selected, and reset the active states
        this.options.forEach(option => {
            option.selected.subscribe((_) => {
                const active = option;
                this.options.forEach(option => {
                    if (option !== active) {
                        option.active = false;
                    }
                });
                this.selected.emit(active);
            });
        });
    }
    hostkeys(event) {
        const buttonList = Array.from(this.elementRef.nativeElement.querySelectorAll("[ibmContentOption]"));
        switch (event.key) {
            case "Right": // IE specific value
            case "ArrowRight":
                event.preventDefault();
                if (!isFocusInLastItem(event, buttonList)) {
                    const index = buttonList.findIndex(item => item === event.target);
                    buttonList[index + 1].focus();
                }
                else {
                    buttonList[0].focus();
                }
                break;
            case "Left": // IE specific value
            case "ArrowLeft":
                event.preventDefault();
                if (!isFocusInFirstItem(event, buttonList)) {
                    const index = buttonList.findIndex(item => item === event.target);
                    buttonList[index - 1].focus();
                }
                else {
                    buttonList[buttonList.length - 1].focus();
                }
                break;
            case "Home":
                event.preventDefault();
                buttonList[0].focus();
                break;
            case "End":
                event.preventDefault();
                buttonList[buttonList.length - 1].focus();
                break;
        }
    }
}
ContentSwitcher.decorators = [
    { type: Component, args: [{
                selector: "ibm-content-switcher",
                template: `
		<div
			[attr.aria-label]="ariaLabel"
			class="bx--content-switcher"
			[class.bx--content-switcher--light]="theme === 'light'"
			role="tablist">
			<ng-content></ng-content>
		</div>
	`
            }] }
];
/** @nocollapse */
ContentSwitcher.ctorParameters = () => [
    { type: ElementRef }
];
ContentSwitcher.propDecorators = {
    ariaLabel: [{ type: Input }],
    theme: [{ type: Input }],
    selected: [{ type: Output }],
    options: [{ type: ContentChildren, args: [ContentSwitcherOption,] }],
    hostkeys: [{ type: HostListener, args: ["keydown", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,