/**
 *
 * carbon-angular v0.0.0 | dropdown-list.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, ViewChildren, QueryList } from "@angular/core";
import { Observable, isObservable, of } from "rxjs";
import { first } from "rxjs/operators";
import { I18n } from "carbon-components-angular/i18n";
import { AbstractDropdownView } from "../abstract-dropdown-view.class";
import { watchFocusJump } from "../dropdowntools";
/**
 * ```html
 * <ibm-dropdown-list [items]="listItems"></ibm-dropdown-list>
 * ```
 * ```typescript
 * listItems = [
 * 	{
 * 		content: "item one",
 * 		selected: false
 * 	},
 * 	{
 * 		content: "item two",
 * 		selected: false,
 * 	},
 * 	{
 * 		content: "item three",
 * 		selected: false
 * 	},
 * 	{
 * 		content: "item four",
 * 		selected: false
 * 	}
 * ];
 * ```
 */
export class DropdownList {
    /**
     * Creates an instance of `DropdownList`.
     */
    constructor(elementRef, i18n) {
        this.elementRef = elementRef;
        this.i18n = i18n;
        this.ariaLabel = this.i18n.get().DROPDOWN_LIST.LABEL;
        /**
         * Template to bind to items in the `DropdownList` (optional).
         */
        this.listTpl = null;
        /**
         * Event to emit selection of a list item within the `DropdownList`.
         */
        this.select = new EventEmitter();
        /**
         * Event to emit scroll event of a list within the `DropdownList`.
         */
        this.scroll = new EventEmitter();
        /**
         * Event to suggest a blur on the view.
         * Emits _after_ the first/last item has been focused.
         * ex.
         * ArrowUp -> focus first item
         * ArrowUp -> emit event
         *
         * When this event fires focus should be placed on some element outside of the list - blurring the list as a result
         */
        this.blurIntent = new EventEmitter();
        /**
         * Defines whether or not the `DropdownList` supports selecting multiple items as opposed to single
         * item selection.
         */
        this.type = "single";
        /**
         * Defines whether to show title attribute or not
         */
        this.showTitles = true;
        /**
         * Defines the rendering size of the `DropdownList` input component.
         *
         * @deprecated since v4
         */
        this.size = "md";
        this.listId = `listbox-${DropdownList.listCount++}`;
        this.highlightedItem = null;
        /**
         * Holds the list of items that will be displayed in the `DropdownList`.
         * It differs from the the complete set of items when filtering is used (but
         * it is always a subset of the total items in `DropdownList`).
         */
        this.displayItems = [];
        /**
         * Maintains the index for the selected item within the `DropdownList`.
         */
        this.index = -1;
        /**
         * Useful representation of the items, should be accessed via `getListItems`.
         */
        this._items = [];
    }
    /**
     * The list items belonging to the `DropdownList`.
     */
    set items(value) {
        if (isObservable(value)) {
            if (this._itemsSubscription) {
                this._itemsSubscription.unsubscribe();
            }
            this._itemsReady = new Observable((observer) => {
                this._itemsSubscription = value.subscribe(v => {
                    this.updateList(v);
                    observer.next(true);
                    observer.complete();
                });
            });
            this.onItemsReady(null);
        }
        else {
            this.updateList(value);
        }
        this._originalItems = value;
    }
    get items() {
        return this._originalItems;
    }
    /**
     * Retrieves array of list items and index of the selected item after view has rendered.
     * Additionally, any Observables for the `DropdownList` are initialized.
     */
    ngAfterViewInit() {
        this.index = this.getListItems().findIndex(item => item.selected);
        this.setupFocusObservable();
        setTimeout(() => {
            this.doEmitSelect(true);
        });
    }
    /**
     * Removes any Observables on destruction of the component.
     */
    ngOnDestroy() {
        if (this.focusJump) {
            this.focusJump.unsubscribe();
        }
        if (this._itemsSubscription) {
            this._itemsSubscription.unsubscribe();
        }
    }
    doEmitSelect(isUpdate = true) {
        if (this.type === "single") {
            this.select.emit({ item: this._items.find(item => item.selected), isUpdate: isUpdate });
        }
        else {
            // abuse javascripts object mutability until we can break the API and switch to
            // { items: [], isUpdate: true }
            const selected = this.getSelected() || [];
            selected["isUpdate"] = isUpdate;
            this.select.emit(selected);
        }
    }
    getItemId(index) {
        return `${this.listId}-${index}`;
    }
    /**
     * Updates the displayed list of items and then retrieves the most current properties for the `DropdownList` from the DOM.
     */
    updateList(items) {
        this._items = items.map(item => Object.assign({}, item));
        this.displayItems = this._items;
        this.updateIndex();
        this.setupFocusObservable();
        setTimeout(() => {
            if (this.getSelected() !== []) {
                return;
            }
            this.doEmitSelect();
        });
    }
    /**
     * Filters the items being displayed in the DOM list.
     */
    filterBy(query = "") {
        if (query) {
            this.displayItems = this.getListItems().filter(item => item.content.toLowerCase().includes(query.toLowerCase()));
        }
        else {
            this.displayItems = this.getListItems();
        }
        this.updateIndex();
    }
    /**
     * Initializes (or re-initializes) the Observable that handles switching focus to an element based on
     * key input matching the first letter of the item in the list.
     */
    setupFocusObservable() {
        if (!this.list) {
            return;
        }
        if (this.focusJump) {
            this.focusJump.unsubscribe();
        }
        let elList = Array.from(this.list.nativeElement.querySelectorAll("li"));
        this.focusJump = watchFocusJump(this.list.nativeElement, elList)
            .subscribe(el => {
            el.focus();
        });
    }
    /**
     * Returns the `ListItem` that is subsequent to the selected item in the `DropdownList`.
     */
    getNextItem() {
        if (this.index < this.displayItems.length - 1) {
            this.index++;
        }
        return this.displayItems[this.index];
    }
    /**
     * Returns `true` if the selected item is not the last item in the `DropdownList`.
     */
    hasNextElement() {
        return this.index < this.displayItems.length - 1 &&
            (!(this.index === this.displayItems.length - 2) || !this.displayItems[this.index + 1].disabled);
    }
    /**
     * Returns the `HTMLElement` for the item that is subsequent to the selected item.
     */
    getNextElement() {
        if (this.index < this.displayItems.length - 1) {
            this.index++;
        }
        let item = this.displayItems[this.index];
        if (item.disabled) {
            return this.getNextElement();
        }
        let elemList = this.listElementList ? this.listElementList.toArray() : [];
        // TODO: update to optional chaining after upgrading typescript
        // to v3.7+
        if (elemList[this.index] && elemList[this.index].nativeElement) {
            return elemList[this.index].nativeElement;
        }
        else {
            return null;
        }
    }
    /**
     * Returns the `ListItem` that precedes the selected item within `DropdownList`.
     */
    getPrevItem() {
        if (this.index > 0) {
            this.index--;
        }
        return this.displayItems[this.index];
    }
    /**
     * Returns `true` if the selected item is not the first in the list.
     */
    hasPrevElement() {
        return this.index > 0 && (!(this.index === 1) || !this.displayItems[0].disabled);
    }
    /**
     * Returns the `HTMLElement` for the item that precedes the selected item.
     */
    getPrevElement() {
        if (this.index > 0) {
            this.index--;
        }
        let item = this.displayItems[this.index];
        if (item.disabled) {
            return this.getPrevElement();
        }
        let elemList = this.listElementList ? this.listElementList.toArray() : [];
        // TODO: update to optional chaining after upgrading typescript
        // to v3.7+
        if (elemList[this.index] && elemList[this.index].nativeElement) {
            return elemList[this.index].nativeElement;
        }
        else {
            return null;
        }
    }
    /**
     * Returns the `ListItem` that is selected within `DropdownList`.
     */
    getCurrentItem() {
        if (this.index < 0) {
            return this.displayItems[0];
        }
        return this.displayItems[this.index];
    }
    /**
     * Returns the `HTMLElement` for the item that is selected within the `DropdownList`.
     */
    getCurrentElement() {
        if (this.index < 0) {
            return this.listElementList.first.nativeElement;
        }
        return this.listElementList.toArray()[this.index].nativeElement;
    }
    /**
     * Returns the items as an Array
     */
    getListItems() {
        return this._items;
    }
    /**
     * Returns a list containing the selected item(s) in the `DropdownList`.
     */
    getSelected() {
        let selected = this.getListItems().filter(item => item.selected);
        if (selected.length === 0) {
            return [];
        }
        return selected;
    }
    /**
     * Transforms array input list of items to the correct state by updating the selected item(s).
     */
    propagateSelected(value) {
        // if we get a non-array, log out an error (since it is one)
        if (!Array.isArray(value)) {
            console.error(`${this.constructor.name}.propagateSelected expects an Array<ListItem>, got ${JSON.stringify(value)}`);
        }
        this.onItemsReady(() => {
            // loop through the list items and update the `selected` state for matching items in `value`
            for (let oldItem of this.getListItems()) {
                // copy the item
                let tempOldItem = Object.assign({}, oldItem);
                // deleted selected because it's what we _want_ to change
                delete tempOldItem.selected;
                // stringify for compare
                tempOldItem = JSON.stringify(tempOldItem);
                for (let newItem of value) {
                    // copy the item
                    let tempNewItem = Object.assign({}, newItem);
                    // deleted selected because it's what we _want_ to change
                    delete tempNewItem.selected;
                    // stringify for compare
                    tempNewItem = JSON.stringify(tempNewItem);
                    // do the compare
                    if (tempOldItem.includes(tempNewItem)) {
                        oldItem.selected = newItem.selected;
                        // if we've found a matching item, we can stop looping
                        break;
                    }
                    else {
                        oldItem.selected = false;
                    }
                }
            }
        });
    }
    /**
     * Initializes focus in the list, effectively a wrapper for `getCurrentElement().focus()`
     */
    initFocus() {
        if (this.index < 0) {
            this.updateIndex();
        }
        this.list.nativeElement.focus();
        setTimeout(() => {
            this.highlightedItem = this.getItemId(this.index);
        });
    }
    updateIndex() {
        // initialize index on the first selected item or
        // on the next non disabled item if no items are selected
        const selected = this.getSelected();
        if (selected.length) {
            this.index = this.displayItems.indexOf(selected[0]);
        }
        else if (this.hasNextElement()) {
            this.getNextElement();
        }
    }
    /**
     * Manages the keyboard accessibility for navigation and selection within a `DropdownList`.
     * @deprecated since v4
     */
    doKeyDown(event, item) {
        // "Spacebar", "Down", and "Up" are IE specific values
        if (event.key === "Enter" || event.key === " " || event.key === "Spacebar") {
            if (this.listElementList.some(option => option.nativeElement === event.target)) {
                event.preventDefault();
            }
            if (event.key === "Enter") {
                this.doClick(event, item);
            }
        }
        else if (event.key === "ArrowDown" || event.key === "ArrowUp" || event.key === "Down" || event.key === "Up") {
            event.preventDefault();
            if (event.key === "ArrowDown" || event.key === "Down") {
                if (this.hasNextElement()) {
                    // this.getNextElement().focus();
                    this.getNextElement();
                }
                else {
                    this.blurIntent.emit("bottom");
                }
            }
            else if (event.key === "ArrowUp" || event.key === "Up") {
                if (this.hasPrevElement()) {
                    // this.getPrevElement().focus();
                    this.getPrevElement();
                }
                else {
                    this.blurIntent.emit("top");
                }
            }
        }
    }
    /**
     * Manages the keyboard accessibility for navigation and selection within a `DropdownList`.
     */
    navigateList(event) {
        // "Spacebar", "Down", and "Up" are IE specific values
        if (event.key === "Enter" || event.key === " " || event.key === "Spacebar") {
            if (this.listElementList.some(option => option.nativeElement === event.target)) {
                event.preventDefault();
            }
            if (event.key === "Enter") {
                this.doClick(event, this.getCurrentItem());
            }
        }
        else if (event.key === "ArrowDown" || event.key === "ArrowUp" || event.key === "Down" || event.key === "Up") {
            event.preventDefault();
            if (event.key === "ArrowDown" || event.key === "Down") {
                if (this.hasNextElement()) {
                    this.getNextElement();
                }
                else {
                    this.blurIntent.emit("bottom");
                }
            }
            else if (event.key === "ArrowUp" || event.key === "Up") {
                if (this.hasPrevElement()) {
                    this.getPrevElement();
                }
                else {
                    this.blurIntent.emit("top");
                }
            }
            setTimeout(() => {
                this.highlightedItem = this.getItemId(this.index);
            });
        }
    }
    /**
     * Emits the selected item or items after a mouse click event has occurred.
     */
    doClick(event, item) {
        event.preventDefault();
        if (!item.disabled) {
            this.list.nativeElement.focus();
            if (this.type === "single") {
                item.selected = true;
                // reset the selection
                for (let otherItem of this.getListItems()) {
                    if (item !== otherItem) {
                        otherItem.selected = false;
                    }
                }
            }
            else {
                item.selected = !item.selected;
            }
            this.index = this.displayItems.indexOf(item);
            this.highlightedItem = this.getItemId(this.index);
            this.doEmitSelect(false);
        }
    }
    onItemFocus(index) {
        const element = this.listElementList.toArray()[index].nativeElement;
        element.classList.add("bx--list-box__menu-item--highlighted");
        element.tabIndex = 0;
    }
    onItemBlur(index) {
        const element = this.listElementList.toArray()[index].nativeElement;
        element.classList.remove("bx--list-box__menu-item--highlighted");
        element.tabIndex = -1;
    }
    /**
     * Emits the scroll event of the options list
     */
    emitScroll(event) {
        const atTop = event.srcElement.scrollTop === 0;
        const atBottom = event.srcElement.scrollHeight - event.srcElement.scrollTop === event.srcElement.clientHeight;
        const customScrollEvent = { atTop, atBottom, event };
        this.scroll.emit(customScrollEvent);
    }
    /**
     * Subscribe the function passed to an internal observable that will resolve once the items are ready
     */
    onItemsReady(subcription) {
        // this subscription will auto unsubscribe because of the `first()` pipe
        (this._itemsReady || of(true)).pipe(first()).subscribe(subcription);
    }
    reorderSelected(moveFocus = true) {
        this.displayItems = [...this.getSelected(), ...this.getListItems().filter(item => !item.selected)];
        if (moveFocus) {
            setTimeout(() => {
                this.updateIndex();
                this.highlightedItem = this.getItemId(this.index);
            });
        }
    }
}
DropdownList.listCount = 0;
DropdownList.decorators = [
    { type: Component, args: [{
                selector: "ibm-dropdown-list",
                template: `
		<ul
			#list
			role="listbox"
			class="bx--list-box__menu bx--multi-select"
			(scroll)="emitScroll($event)"
			(keydown)="navigateList($event)"
			tabindex="-1"
			[attr.aria-label]="ariaLabel"
			[attr.aria-activedescendant]="highlightedItem">
			<li
				role="option"
				*ngFor="let item of displayItems; let i = index"
				(click)="doClick($event, item)"
				class="bx--list-box__menu-item"
				[attr.aria-selected]="item.selected"
				[id]="getItemId(i)"
				[attr.title]=" showTitles ? item.content : null"
				[ngClass]="{
					'bx--list-box__menu-item--active': item.selected,
					'bx--list-box__menu-item--highlighted': highlightedItem === getItemId(i),
					disabled: item.disabled
				}">
				<div
					#listItem
					tabindex="-1"
					class="bx--list-box__menu-item__option">
					<div
						*ngIf="!listTpl && type === 'multi'"
						class="bx--form-item bx--checkbox-wrapper">
						<label
							[attr.data-contained-checkbox-state]="item.selected"
							class="bx--checkbox-label">
							<input
								class="bx--checkbox"
								type="checkbox"
								[checked]="item.selected"
								[disabled]="item.disabled"
								tabindex="-1">
							<span class="bx--checkbox-appearance"></span>
							<span class="bx--checkbox-label-text">{{item.content}}</span>
						</label>
					</div>
					<ng-container *ngIf="!listTpl && type === 'single'">{{item.content}}</ng-container>
					<svg
						*ngIf="!listTpl && type === 'single'"
						ibmIcon="checkmark"
						size="16"
						class="bx--list-box__menu-item__selected-icon">
					</svg>
					<ng-template
						*ngIf="listTpl"
						[ngTemplateOutletContext]="{item: item}"
						[ngTemplateOutlet]="listTpl">
					</ng-template>
				</div>
			</li>
		</ul>`,
                providers: [
                    {
                        provide: AbstractDropdownView,
                        useExisting: DropdownList
                    }
                ]
            }] }
];
/** @nocollapse */
DropdownList.ctorParameters = () => [
    { type: ElementRef },
    { type: I18n }
];
DropdownList.propDecorators = {
    ariaLabel: [{ type: Input }],
    items: [{ type: Input }],
    listTpl: [{ type: Input }],
    select: [{ type: Output }],
    scroll: [{ type: Output }],
    blurIntent: [{ type: Output }],
    list: [{ type: ViewChild, args: ["list", { static: true },] }],
    type: [{ type: Input }],
    showTitles: [{ type: Input }],
    listElementList: [{ type: ViewChildren, args: ["listItem",] }]
};
//# sourceMappingURL=data:application/json;base64,