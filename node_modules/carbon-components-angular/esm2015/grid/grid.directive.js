/**
 *
 * carbon-angular v0.0.0 | grid.directive.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, Input } from "@angular/core";
/**
 * [See demo](../../?path=/story/components-grid--basic)
 *
 * <example-url>../../iframe.html?id=components-grid--basic</example-url>
 */
export class GridDirective {
    constructor() {
        this.baseClass = true;
        this.condensed = false;
    }
}
GridDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ibmGrid]"
            },] }
];
GridDirective.propDecorators = {
    baseClass: [{ type: HostBinding, args: ["class.bx--grid",] }],
    condensed: [{ type: HostBinding, args: ["class.bx--grid--condensed",] }, { type: Input }]
};
export class RowDirective {
    constructor() {
        this.gutter = true;
        this.leftGutter = true;
        this.rightGutter = true;
        this.baseClass = true;
        this.condensed = false;
    }
    get showGutter() {
        return !this.gutter;
    }
    get showLeftGutter() {
        return !this.leftGutter;
    }
    get showRightGutter() {
        return !this.rightGutter;
    }
}
RowDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ibmRow]"
            },] }
];
RowDirective.propDecorators = {
    gutter: [{ type: Input }],
    leftGutter: [{ type: Input }],
    rightGutter: [{ type: Input }],
    baseClass: [{ type: HostBinding, args: ["class.bx--row",] }],
    condensed: [{ type: HostBinding, args: ["class.bx--row--condensed",] }, { type: Input }],
    showGutter: [{ type: HostBinding, args: ["class.bx--no-gutter",] }],
    showLeftGutter: [{ type: HostBinding, args: ["class.bx--no-gutter--left",] }],
    showRightGutter: [{ type: HostBinding, args: ["class.bx--no-gutter--right",] }]
};
export class ColumnDirective {
    constructor() {
        this.class = "";
        this.columnNumbers = {};
        this.offsets = {};
        this._columnClasses = [];
    }
    get columnClasses() {
        return this._columnClasses.join(" ");
    }
    set(classes) {
        this._columnClasses = classes.split(" ");
    }
    ngOnInit() {
        try {
            const columnKeys = Object.keys(this.columnNumbers);
            if (columnKeys.length <= 0) {
                this._columnClasses.push("bx--col");
            }
            columnKeys.forEach(key => {
                if (this.columnNumbers[key] === "nobreak") {
                    this._columnClasses.push(`bx--col-${key}`);
                }
                else {
                    this._columnClasses.push(`bx--col-${key}-${this.columnNumbers[key]}`);
                }
            });
            Object.keys(this.offsets).forEach(key => {
                this._columnClasses.push(`bx--offset-${key}-${this.offsets[key]}`);
            });
        }
        catch (err) {
            console.error(`Malformed \`offsets\` or \`columnNumbers\`: ${err}`);
        }
        if (this.class) {
            this._columnClasses.push(this.class);
        }
    }
}
ColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ibmCol]"
            },] }
];
ColumnDirective.propDecorators = {
    class: [{ type: Input }],
    columnNumbers: [{ type: Input }],
    offsets: [{ type: Input }],
    columnClasses: [{ type: HostBinding, args: ["class",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2dyaWQvIiwic291cmNlcyI6WyJncmlkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFdEU7Ozs7R0FJRztBQUlILE1BQU0sT0FBTyxhQUFhO0lBSDFCO1FBSWdDLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDRyxjQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3RFLENBQUM7OztZQU5BLFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsV0FBVzthQUNyQjs7O3dCQUVDLFdBQVcsU0FBQyxnQkFBZ0I7d0JBQzVCLFdBQVcsU0FBQywyQkFBMkIsY0FBRyxLQUFLOztBQU1qRCxNQUFNLE9BQU8sWUFBWTtJQUh6QjtRQUlVLFdBQU0sR0FBRyxJQUFJLENBQUM7UUFDZCxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBRUUsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNHLGNBQVMsR0FBRyxLQUFLLENBQUM7SUFVckUsQ0FBQztJQVRBLElBQXdDLFVBQVU7UUFDakQsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUNELElBQThDLGNBQWM7UUFDM0QsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUNELElBQStDLGVBQWU7UUFDN0QsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQzs7O1lBbEJELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsVUFBVTthQUNwQjs7O3FCQUVDLEtBQUs7eUJBQ0wsS0FBSzswQkFDTCxLQUFLO3dCQUVMLFdBQVcsU0FBQyxlQUFlO3dCQUMzQixXQUFXLFNBQUMsMEJBQTBCLGNBQUcsS0FBSzt5QkFDOUMsV0FBVyxTQUFDLHFCQUFxQjs2QkFHakMsV0FBVyxTQUFDLDJCQUEyQjs4QkFHdkMsV0FBVyxTQUFDLDRCQUE0Qjs7QUFRMUMsTUFBTSxPQUFPLGVBQWU7SUFINUI7UUFJVSxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBRVgsa0JBQWEsR0FBRyxFQUFFLENBQUM7UUFFbkIsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUVaLG1CQUFjLEdBQWEsRUFBRSxDQUFDO0lBcUN6QyxDQUFDO0lBbkNBLElBQ0ksYUFBYTtRQUNoQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxHQUFHLENBQUMsT0FBZTtRQUNsQixJQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELFFBQVE7UUFDUCxJQUFJO1lBQ0gsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDbkQsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDcEM7WUFFRCxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN4QixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxFQUFFO29CQUMxQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLENBQUM7aUJBQzNDO3FCQUFNO29CQUNOLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0RTtZQUNGLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwRSxDQUFDLENBQUMsQ0FBQztTQUNIO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLCtDQUErQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQ3BFO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JDO0lBQ0YsQ0FBQzs7O1lBOUNELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsVUFBVTthQUNwQjs7O29CQUVDLEtBQUs7NEJBRUwsS0FBSztzQkFFTCxLQUFLOzRCQUlMLFdBQVcsU0FBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbi8qKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy1ncmlkLS1iYXNpYylcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9Y29tcG9uZW50cy1ncmlkLS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogXCJbaWJtR3JpZF1cIlxufSlcbmV4cG9ydCBjbGFzcyBHcmlkRGlyZWN0aXZlIHtcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWdyaWRcIikgYmFzZUNsYXNzID0gdHJ1ZTtcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWdyaWQtLWNvbmRlbnNlZFwiKSBASW5wdXQoKSBjb25kZW5zZWQgPSBmYWxzZTtcbn1cblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiBcIltpYm1Sb3ddXCJcbn0pXG5leHBvcnQgY2xhc3MgUm93RGlyZWN0aXZlIHtcblx0QElucHV0KCkgZ3V0dGVyID0gdHJ1ZTtcblx0QElucHV0KCkgbGVmdEd1dHRlciA9IHRydWU7XG5cdEBJbnB1dCgpIHJpZ2h0R3V0dGVyID0gdHJ1ZTtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tcm93XCIpIGJhc2VDbGFzcyA9IHRydWU7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1yb3ctLWNvbmRlbnNlZFwiKSBASW5wdXQoKSBjb25kZW5zZWQgPSBmYWxzZTtcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLW5vLWd1dHRlclwiKSBnZXQgc2hvd0d1dHRlcigpIHtcblx0XHRyZXR1cm4gIXRoaXMuZ3V0dGVyO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1uby1ndXR0ZXItLWxlZnRcIikgZ2V0IHNob3dMZWZ0R3V0dGVyKCkge1xuXHRcdHJldHVybiAhdGhpcy5sZWZ0R3V0dGVyO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1uby1ndXR0ZXItLXJpZ2h0XCIpIGdldCBzaG93UmlnaHRHdXR0ZXIoKSB7XG5cdFx0cmV0dXJuICF0aGlzLnJpZ2h0R3V0dGVyO1xuXHR9XG59XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogXCJbaWJtQ29sXVwiXG59KVxuZXhwb3J0IGNsYXNzIENvbHVtbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdEBJbnB1dCgpIGNsYXNzID0gXCJcIjtcblxuXHRASW5wdXQoKSBjb2x1bW5OdW1iZXJzID0ge307XG5cblx0QElucHV0KCkgb2Zmc2V0cyA9IHt9O1xuXG5cdHByb3RlY3RlZCBfY29sdW1uQ2xhc3Nlczogc3RyaW5nW10gPSBbXTtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzc1wiKVxuXHRnZXQgY29sdW1uQ2xhc3NlcygpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW5DbGFzc2VzLmpvaW4oXCIgXCIpO1xuXHR9XG5cblx0c2V0KGNsYXNzZXM6IHN0cmluZykge1xuXHRcdHRoaXMuX2NvbHVtbkNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KFwiIFwiKTtcblx0fVxuXG5cdG5nT25Jbml0KCkge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBjb2x1bW5LZXlzID0gT2JqZWN0LmtleXModGhpcy5jb2x1bW5OdW1iZXJzKTtcblx0XHRcdGlmIChjb2x1bW5LZXlzLmxlbmd0aCA8PSAwKSB7XG5cdFx0XHRcdHRoaXMuX2NvbHVtbkNsYXNzZXMucHVzaChcImJ4LS1jb2xcIik7XG5cdFx0XHR9XG5cblx0XHRcdGNvbHVtbktleXMuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5jb2x1bW5OdW1iZXJzW2tleV0gPT09IFwibm9icmVha1wiKSB7XG5cdFx0XHRcdFx0dGhpcy5fY29sdW1uQ2xhc3Nlcy5wdXNoKGBieC0tY29sLSR7a2V5fWApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX2NvbHVtbkNsYXNzZXMucHVzaChgYngtLWNvbC0ke2tleX0tJHt0aGlzLmNvbHVtbk51bWJlcnNba2V5XX1gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdE9iamVjdC5rZXlzKHRoaXMub2Zmc2V0cykuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0XHR0aGlzLl9jb2x1bW5DbGFzc2VzLnB1c2goYGJ4LS1vZmZzZXQtJHtrZXl9LSR7dGhpcy5vZmZzZXRzW2tleV19YCk7XG5cdFx0XHR9KTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYE1hbGZvcm1lZCBcXGBvZmZzZXRzXFxgIG9yIFxcYGNvbHVtbk51bWJlcnNcXGA6ICR7ZXJyfWApO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmNsYXNzKSB7XG5cdFx0XHR0aGlzLl9jb2x1bW5DbGFzc2VzLnB1c2godGhpcy5jbGFzcyk7XG5cdFx0fVxuXHR9XG59XG4iXX0=