/**
 *
 * carbon-angular v0.0.0 | list.directive.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, ElementRef, HostBinding } from "@angular/core";
/**
 * Applies either ordered or unordered styling to the list container it is applied to.
 *
 * [See demo](../../?path=/story/components-list--basic)
 *
 * For `ul`s it will apply unordered list styles, and for `ol`s it will apply ordered list styles.
 *
 * If a `ul` or `ol` is nested within a `li` the directive will apply nested list styling.
 *
 * <example-url>../../iframe.html?id=components-list--basic</example-url>
 */
export class List {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    get ordered() {
        if (this.nested) {
            return false;
        }
        return this.elementRef.nativeElement.tagName === "OL";
    }
    get unordered() {
        if (this.nested) {
            return false;
        }
        return this.elementRef.nativeElement.tagName === "UL";
    }
    get nested() {
        return !!(this.elementRef.nativeElement.parentElement && this.elementRef.nativeElement.parentElement.tagName === "LI");
    }
}
List.decorators = [
    { type: Directive, args: [{
                selector: "[ibmList]"
            },] }
];
/** @nocollapse */
List.ctorParameters = () => [
    { type: ElementRef }
];
List.propDecorators = {
    ordered: [{ type: HostBinding, args: ["class.bx--list--ordered",] }],
    unordered: [{ type: HostBinding, args: ["class.bx--list--unordered",] }],
    nested: [{ type: HostBinding, args: ["class.bx--list--nested",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2xpc3QvIiwic291cmNlcyI6WyJsaXN0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkU7Ozs7Ozs7Ozs7R0FVRztBQUlILE1BQU0sT0FBTyxJQUFJO0lBZWhCLFlBQXNCLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFBRyxDQUFDO0lBZGhELElBQTRDLE9BQU87UUFDbEQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQUUsT0FBTyxLQUFLLENBQUM7U0FBRTtRQUNsQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUM7SUFDdkQsQ0FBQztJQUVELElBQThDLFNBQVM7UUFDdEQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQUUsT0FBTyxLQUFLLENBQUM7U0FBRTtRQUNsQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUM7SUFDdkQsQ0FBQztJQUVELElBQTJDLE1BQU07UUFDaEQsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQztJQUN4SCxDQUFDOzs7WUFoQkQsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxXQUFXO2FBQ3JCOzs7O1lBZm1CLFVBQVU7OztzQkFpQjVCLFdBQVcsU0FBQyx5QkFBeUI7d0JBS3JDLFdBQVcsU0FBQywyQkFBMkI7cUJBS3ZDLFdBQVcsU0FBQyx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuLyoqXG4gKiBBcHBsaWVzIGVpdGhlciBvcmRlcmVkIG9yIHVub3JkZXJlZCBzdHlsaW5nIHRvIHRoZSBsaXN0IGNvbnRhaW5lciBpdCBpcyBhcHBsaWVkIHRvLlxuICpcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NvbXBvbmVudHMtbGlzdC0tYmFzaWMpXG4gKlxuICogRm9yIGB1bGBzIGl0IHdpbGwgYXBwbHkgdW5vcmRlcmVkIGxpc3Qgc3R5bGVzLCBhbmQgZm9yIGBvbGBzIGl0IHdpbGwgYXBwbHkgb3JkZXJlZCBsaXN0IHN0eWxlcy5cbiAqXG4gKiBJZiBhIGB1bGAgb3IgYG9sYCBpcyBuZXN0ZWQgd2l0aGluIGEgYGxpYCB0aGUgZGlyZWN0aXZlIHdpbGwgYXBwbHkgbmVzdGVkIGxpc3Qgc3R5bGluZy5cbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9Y29tcG9uZW50cy1saXN0LS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogXCJbaWJtTGlzdF1cIlxufSlcbmV4cG9ydCBjbGFzcyBMaXN0IHtcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWxpc3QtLW9yZGVyZWRcIikgZ2V0IG9yZGVyZWQoKSB7XG5cdFx0aWYgKHRoaXMubmVzdGVkKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC50YWdOYW1lID09PSBcIk9MXCI7XG5cdH1cblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tbGlzdC0tdW5vcmRlcmVkXCIpIGdldCB1bm9yZGVyZWQoKSB7XG5cdFx0aWYgKHRoaXMubmVzdGVkKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC50YWdOYW1lID09PSBcIlVMXCI7XG5cdH1cblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tbGlzdC0tbmVzdGVkXCIpIGdldCBuZXN0ZWQoKSB7XG5cdFx0cmV0dXJuICEhKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQgJiYgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC50YWdOYW1lID09PSBcIkxJXCIpO1xuXHR9XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG59XG4iXX0=