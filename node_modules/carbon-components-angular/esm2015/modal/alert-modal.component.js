/**
 *
 * carbon-angular v0.0.0 | alert-modal.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Inject, ViewChild, Optional } from "@angular/core";
import { BaseModal } from "./base-modal.class";
/**
 * Component to create standard modals for presenting content or asking for user's input.
 * It can show as a passive modal showing only text or show as a transactional modal with
 * multiple buttons for different actions for the user to choose from.
 *
 * Using a modal in your application requires `ibm-placeholder` which would generally be
 * placed near the end of your app component template (app.component.ts or app.component.html) as:
 *
 * ```html
 * <ibm-placeholder></ibm-placeholder>
 * ```
 *
 * Example of opening the modal:
 *
 * ```typescript
 * \@Component({
 *  selector: "app-modal-demo",
 *  template: `
 *   <button class="btn--primary" (click)="openModal()">Open modal</button>
 *   <ibm-placeholder></ibm-placeholder>`
 * })
 * export class ModalDemo {
 * 	openModal() {
 * 		this.modalService.show({
 *			modalType: "default",
 *			label: "optional header text",
 *			title: "Modal title",
 *			text: "Modal text",
 *			buttons: [{
 *				text: "Button text",
 *				type: "primary",
 *				click: clickFunction
 *			}]
 *		});
 * 	}
 * }
 * ```
 */
export class AlertModal extends BaseModal {
    /**
     * Creates an instance of `AlertModal`.
     */
    constructor(type = "default", label, title, content, size, hasScrollingContent = null, buttons = [], onClose, showCloseButton = true) {
        super();
        this.type = type;
        this.label = label;
        this.title = title;
        this.content = content;
        this.size = size;
        this.hasScrollingContent = hasScrollingContent;
        this.buttons = buttons;
        this.onClose = onClose;
        this.showCloseButton = showCloseButton;
        for (let i = 0; i < this.buttons.length; i++) {
            const button = this.buttons[i];
            if (!button.id) {
                button.id = `alert-modal-button-${i}`;
            }
            if (!button.type) {
                button.type = "secondary";
            }
        }
    }
    ngAfterViewInit() {
        if (!this.modalContent) {
            return false;
        }
        const element = this.modalContent.nativeElement;
        if (element.scrollHeight > element.clientHeight) {
            element.tabIndex = 0;
        }
        else {
            element.tabIndex = -1;
        }
    }
    buttonClicked(buttonIndex) {
        const button = this.buttons[buttonIndex];
        if (button.click) {
            button.click();
        }
        this.closeModal();
    }
    dismissModal(trigger) {
        if (this.onClose && this.onClose(trigger) === false) {
            return;
        }
        this.closeModal();
    }
}
AlertModal.decorators = [
    { type: Component, args: [{
                selector: "ibm-alert-modal",
                template: `
		<ibm-modal
			[size]="size"
			[theme]="type"
			[ariaLabel]="title"
			[hasScrollingContent]="hasScrollingContent"
			[open]="open"
			(overlaySelected)="dismissModal('overlay')">
			<ibm-modal-header (closeSelect)="dismissModal('close')" [showCloseButton]="showCloseButton">
				<p ibmModalHeaderLabel class="bx--type-delta">{{label}}</p>
				<p ibmModalHeaderHeading class="bx--type-beta">{{title}}</p>
			</ibm-modal-header>
			<div ibmModalContent #modalContent>
				<p [innerHTML]="content"></p>
			</div>
			<ibm-modal-footer *ngIf="buttons.length > 0">
				<ng-container *ngFor="let button of buttons; let i = index">
					<button
						[ibmButton]="button.type"
						(click)="buttonClicked(i)"
						[id]="button.id"
						[attr.modal-primary-focus]="(button.type.indexOf('primary') !== -1 ? '' : null)">
						{{button.text}}
					</button>
				</ng-container>
			</ibm-modal-footer>
		</ibm-modal>
	`
            }] }
];
/** @nocollapse */
AlertModal.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ["type",] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ["label",] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ["title",] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ["content",] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ["size",] }] },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: ["hasScrollingContent",] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ["buttons",] }] },
    { type: Function, decorators: [{ type: Optional }, { type: Inject, args: ["close",] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ["showCloseButton",] }] }
];
AlertModal.propDecorators = {
    modalContent: [{ type: ViewChild, args: ["modalContent", { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,