/**
 *
 * carbon-angular v0.0.0 | modal.service.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ComponentFactoryResolver, Injector } from "@angular/core";
import { Injectable } from "@angular/core";
import { AlertModal } from "./alert-modal.component";
import { PlaceholderService } from "carbon-components-angular/placeholder";
import { tap, delay } from "rxjs/operators";
/**
 * Modal service handles instantiating and destroying modal instances.
 * Uses PlaceholderService to track open instances, and for it's placeholder view reference.
 */
export class ModalService {
    /**
     * Creates an instance of `ModalService`.
     */
    constructor(resolver, placeholderService) {
        this.resolver = resolver;
        this.placeholderService = placeholderService;
    }
    /**
     * Creates and renders the modal component that is passed in.
     * `inputs` is an optional parameter of `data` that can be passed to the `Modal` component.
     */
    create(data) {
        let defaults = { inputs: {} };
        data = Object.assign({}, defaults, data);
        const inputProviders = Object.keys(data.inputs).map(inputName => ({
            provide: inputName,
            useValue: data.inputs[inputName]
        }));
        const injector = Injector.create(inputProviders);
        const factory = this.resolver.resolveComponentFactory(data.component);
        let focusedElement = document.activeElement;
        let component = this.placeholderService.createComponent(factory, injector);
        setTimeout(() => {
            component.instance.open = true;
        });
        component["previouslyFocusedElement"] = focusedElement; // used to return focus to previously focused element
        component.instance.close.pipe(
        // trigger the close animation
        tap(() => {
            component.instance.open = false;
        }), 
        // delay closing by an arbitrary amount to allow the animation to finish
        delay(150)).subscribe(() => {
            this.placeholderService.destroyComponent(component);
            // filter out our component
            ModalService.modalList = ModalService.modalList.filter(c => c !== component);
        });
        component.onDestroy(() => {
            focusedElement.focus();
        });
        ModalService.modalList.push(component);
        return component;
    }
    /**
     * Creates and renders a new alert modal component.
     * @param data You can pass in:
     * `type` - "default" | "danger" = "default",
     * `label` - a label shown over the title,
     * `title` - modal's title,
     * `content` - modal's content, could include HTML tags.
     * `buttons` is an array of objects
     * `close` custom close function
     * ```
     * {
     * 		text: "Button text",
     * 		type: "primary" | "secondary" | "tertiary" | "ghost" | "danger" | "danger--primary" = "primary",
     * 		click: clickFunction,
     * }
     * ```
     */
    show(data) {
        return this.create({
            component: AlertModal,
            inputs: {
                type: data.type,
                label: data.label,
                title: data.title,
                content: data.content,
                hasScrollingContent: data.hasScrollingContent || null,
                size: data.size,
                buttons: data.buttons || [],
                close: data.close || (() => { }),
                showCloseButton: data.showCloseButton
            }
        });
    }
    /**
     * Destroys the modal on the supplied index.
     * When called without parameters it destroys the most recently created/top most modal.
     */
    destroy(index = -1) {
        // return if nothing to destroy because it's already destroyed
        if (index >= ModalService.modalList.length || ModalService.modalList.length === 0) {
            return;
        }
        // on negative index destroy the last on the list (top modal)
        if (index < 0) {
            index = ModalService.modalList.length - 1;
        }
        this.placeholderService.destroyComponent(ModalService.modalList[index]);
        ModalService.modalList.splice(index, 1);
    }
}
// track all our open modals
ModalService.modalList = [];
ModalService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ModalService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: PlaceholderService }
];
//# sourceMappingURL=data:application/json;base64,