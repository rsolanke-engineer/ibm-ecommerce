/**
 *
 * carbon-angular v0.0.0 | notification.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, ViewChild, HostBinding } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
import { NotificationDisplayService } from "./notification-display.service";
import { of, isObservable } from "rxjs";
/**
 * Notification messages are displayed toward the top of the UI and do not interrupt userâ€™s work.
 *
 * [See demo](../../?path=/story/components-notification--basic)
 *
 * <example-url>../../iframe.html?id=components-notification--basic</example-url>
 */
export class Notification {
    constructor(notificationDisplayService, i18n) {
        this.notificationDisplayService = notificationDisplayService;
        this.i18n = i18n;
        /**
         * Emits on close.
         */
        this.close = new EventEmitter();
        this.notificationID = `notification-${Notification.notificationCount++}`;
        this.notificationClass = true;
        this.role = "alert";
        this.defaultNotificationObj = {
            title: "",
            message: "",
            type: "info",
            showClose: true,
            closeLabel: this.i18n.get("NOTIFICATION.CLOSE_BUTTON")
        };
        this._notificationObj = Object.assign({}, this.defaultNotificationObj);
    }
    /**
     * Can have `type`, `title`, and `message` members.
     *
     * `type` can be one of `"info"`, `"warning"`, `"error"`, `"success"`
     *
     * `message` is the message to display
     */
    get notificationObj() {
        return this._notificationObj;
    }
    set notificationObj(obj) {
        if (obj.closeLabel) {
            obj.closeLabel = of(obj.closeLabel);
        }
        this._notificationObj = Object.assign({}, this.defaultNotificationObj, obj);
    }
    get isError() { return this.notificationObj.type === "error"; }
    get isInfo() { return this.notificationObj.type === "info"; }
    get isSuccess() { return this.notificationObj.type === "success"; }
    get isWarning() { return this.notificationObj.type === "warning"; }
    get isLowContrast() { return this.notificationObj.lowContrast; }
    get isCloseHidden() { return !this._notificationObj.showClose; }
    /**
     * Emits close event.
     */
    onClose() {
        this.close.emit();
    }
    onClick(action, event) {
        if (!action.click) {
            return;
        }
        if (isObservable(action.click)) {
            action.click.next({ event, action });
        }
        else {
            action.click({ event, action });
        }
    }
    destroy() {
        this.notificationDisplayService.close(this);
    }
}
Notification.notificationCount = 0;
Notification.decorators = [
    { type: Component, args: [{
                selector: "ibm-notification",
                template: `
		<div class="bx--inline-notification__details">
			<svg
				ibmIcon="error--filled"
				size="20"
				*ngIf="notificationObj.type === 'error'"
				class="bx--inline-notification__icon">
			</svg>
			<svg
				ibmIcon="warning--filled"
				size="20"
				*ngIf="notificationObj.type === 'warning'"
				class="bx--inline-notification__icon">
			</svg>
			<svg
				ibmIcon="checkmark--filled"
				size="20"
				*ngIf="notificationObj.type === 'success'"
				class="bx--inline-notification__icon">
			</svg>
			<svg
				ibmIcon="information--filled"
				size="20"
				*ngIf="notificationObj.type === 'info'"
				class="bx--inline-notification__icon">
			</svg>
			<div class="bx--inline-notification__text-wrapper">
				<p *ngIf="!notificationObj.template" ibmNotificationTitle [innerHTML]="notificationObj.title"></p>
				<div *ngIf="!notificationObj.template" ibmNotificationSubtitle>
					<span [innerHTML]="notificationObj.message"></span>
					<ng-container *ngFor="let link of notificationObj.links">
						<a ibmLink [href]="link.href"> {{link.text}}</a>
					</ng-container>
				</div>
				<ng-container *ngTemplateOutlet="notificationObj.template; context: { $implicit: notificationObj}"></ng-container>
			</div>
		</div>
		<div *ngFor="let action of notificationObj.actions">
			<button
				(click)="onClick(action, $event)"
				ibmButton="ghost"
				size="sm"
				class="bx--inline-notification__action-button"
				type="button">
				{{action.text}}
			</button>
		</div>
		<button
			*ngIf="!isCloseHidden"
			(click)="onClose()"
			class="bx--inline-notification__close-button"
			[attr.aria-label]="notificationObj.closeLabel | async"
			type="button">
			<svg ibmIcon="close" size="16" class="bx--inline-notification__close-icon"></svg>
		</button>
	`
            }] }
];
/** @nocollapse */
Notification.ctorParameters = () => [
    { type: NotificationDisplayService },
    { type: I18n }
];
Notification.propDecorators = {
    notificationObj: [{ type: Input }],
    close: [{ type: Output }],
    notification: [{ type: ViewChild, args: ["notification", { static: false },] }],
    notificationID: [{ type: HostBinding, args: ["attr.id",] }],
    notificationClass: [{ type: HostBinding, args: ["class.bx--inline-notification",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    isError: [{ type: HostBinding, args: ["class.bx--inline-notification--error",] }],
    isInfo: [{ type: HostBinding, args: ["class.bx--inline-notification--info",] }],
    isSuccess: [{ type: HostBinding, args: ["class.bx--inline-notification--success",] }],
    isWarning: [{ type: HostBinding, args: ["class.bx--inline-notification--warning",] }],
    isLowContrast: [{ type: HostBinding, args: ["class.bx--inline-notification--low-contrast",] }],
    isCloseHidden: [{ type: HostBinding, args: ["class.bx--inline-notification--hide-close-button",] }]
};
//# sourceMappingURL=data:application/json;base64,