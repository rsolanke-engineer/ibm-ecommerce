/**
 *
 * carbon-angular v0.0.0 | toast.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding } from "@angular/core";
import { Notification } from "./notification.component";
import { ExperimentalService } from "carbon-components-angular/experimental";
import { NotificationDisplayService } from "./notification-display.service";
import { I18n } from "carbon-components-angular/i18n";
/**
 * Toast messages are displayed toward the top of the UI and do not interrupt userâ€™s work.
 *
 * [See demo](../../?path=/story/components-notification--toast)
 *
 * <example-url>../../iframe.html?id=components-notification--toast</example-url>
 */
export class Toast extends Notification {
    constructor(notificationDisplayService, i18n, experimental) {
        super(notificationDisplayService, i18n);
        this.notificationDisplayService = notificationDisplayService;
        this.i18n = i18n;
        this.experimental = experimental;
        this.toastID = `toast-${Toast.toastCount++}`;
        this.toastClass = true;
        this.role = "alert";
        // disable inline notification styles
        this.notificationClass = false;
    }
    get isError() { return this.notificationObj["type"] === "error"; }
    get isInfo() { return this.notificationObj["type"] === "info"; }
    get isSuccess() { return this.notificationObj["type"] === "success"; }
    get isWarning() { return this.notificationObj["type"] === "warning"; }
    get isLowContrast() { return this.notificationObj.lowContrast; }
    ngOnInit() {
        if (!this.notificationObj.closeLabel) {
            this.notificationObj.closeLabel = this.i18n.get().NOTIFICATION.CLOSE_BUTTON;
        }
    }
}
Toast.toastCount = 0;
Toast.decorators = [
    { type: Component, args: [{
                selector: "ibm-toast",
                template: `
		<svg
			ibmIcon="error--filled"
			size="20"
			*ngIf="notificationObj.type === 'error'"
			class="bx--toast-notification__icon">
		</svg>
		<svg
			ibmIcon="warning--filled"
			size="20"
			*ngIf="notificationObj.type === 'warning'"
			class="bx--toast-notification__icon">
		</svg>
		<svg
			ibmIcon="checkmark--filled"
			size="20"
			*ngIf="notificationObj.type === 'success'"
			class="bx--toast-notification__icon">
		</svg>
		<svg
			ibmIcon="information--filled"
			size="20"
			*ngIf="notificationObj.type === 'info'"
			class="bx--toast-notification__icon">
		</svg>
		<div class="bx--toast-notification__details">
			<h3 *ngIf="!notificationObj.template" ibmToastTitle [innerHTML]="notificationObj.title"></h3>
			<div *ngIf="!notificationObj.template" ibmToastSubtitle>
				<span [innerHTML]="notificationObj.subtitle"></span>
				<ng-container *ngFor="let link of notificationObj.links">
					<a ibmLink [href]="link.href"> {{link.text}}</a>
				</ng-container>
			</div>
			<p *ngIf="!notificationObj.template" ibmToastCaption [innerHTML]="notificationObj.caption"></p>
			<ng-container *ngTemplateOutlet="notificationObj.template; context: { $implicit: notificationObj}"></ng-container>
		</div>
		<button
			*ngIf="!isCloseHidden"
			class="bx--toast-notification__close-button"
			type="button"
			[attr.aria-label]="notificationObj.closeLabel"
			(click)="onClose()">
			<svg ibmIcon="close" size="16" class="bx--toast-notification__close-icon"></svg>
		</button>
	`
            }] }
];
/** @nocollapse */
Toast.ctorParameters = () => [
    { type: NotificationDisplayService },
    { type: I18n },
    { type: ExperimentalService }
];
Toast.propDecorators = {
    notificationObj: [{ type: Input }],
    toastID: [{ type: HostBinding, args: ["attr.id",] }],
    toastClass: [{ type: HostBinding, args: ["class.bx--toast-notification",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    isError: [{ type: HostBinding, args: ["class.bx--toast-notification--error",] }],
    isInfo: [{ type: HostBinding, args: ["class.bx--toast-notification--info",] }],
    isSuccess: [{ type: HostBinding, args: ["class.bx--toast-notification--success",] }],
    isWarning: [{ type: HostBinding, args: ["class.bx--toast-notification--warning",] }],
    isLowContrast: [{ type: HostBinding, args: ["class.bx--toast-notification--low-contrast",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9ub3RpZmljYXRpb24vIiwic291cmNlcyI6WyJ0b2FzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBRUwsV0FBVyxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM3RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdEQ7Ozs7OztHQU1HO0FBaURILE1BQU0sT0FBTyxLQUFNLFNBQVEsWUFBWTtJQW1CdEMsWUFDVywwQkFBc0QsRUFDdEQsSUFBVSxFQUNWLFlBQWlDO1FBQzNDLEtBQUssQ0FBQywwQkFBMEIsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUg5QiwrQkFBMEIsR0FBMUIsMEJBQTBCLENBQTRCO1FBQ3RELFNBQUksR0FBSixJQUFJLENBQU07UUFDVixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7UUFicEIsWUFBTyxHQUFHLFNBQVMsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUM7UUFDbkIsZUFBVSxHQUFHLElBQUksQ0FBQztRQUNyQyxTQUFJLEdBQUcsT0FBTyxDQUFDO1FBYXhDLHFDQUFxQztRQUNyQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFiRCxJQUF3RCxPQUFPLEtBQUssT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDdEgsSUFBdUQsTUFBTSxLQUFLLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ25ILElBQTBELFNBQVMsS0FBSyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztJQUM1SCxJQUEwRCxTQUFTLEtBQUssT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDNUgsSUFBK0QsYUFBYSxLQUFLLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBVzNILFFBQVE7UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUU7WUFDckMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO1NBQzVFO0lBQ0YsQ0FBQzs7QUEvQmMsZ0JBQVUsR0FBRyxDQUFDLENBQUM7O1lBakQ5QixTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUE0Q1Q7YUFDRDs7OztZQXpEUSwwQkFBMEI7WUFDMUIsSUFBSTtZQUZKLG1CQUFtQjs7OzhCQWtFMUIsS0FBSztzQkFFTCxXQUFXLFNBQUMsU0FBUzt5QkFDckIsV0FBVyxTQUFDLDhCQUE4QjttQkFDMUMsV0FBVyxTQUFDLFdBQVc7c0JBRXZCLFdBQVcsU0FBQyxxQ0FBcUM7cUJBQ2pELFdBQVcsU0FBQyxvQ0FBb0M7d0JBQ2hELFdBQVcsU0FBQyx1Q0FBdUM7d0JBQ25ELFdBQVcsU0FBQyx1Q0FBdUM7NEJBQ25ELFdBQVcsU0FBQyw0Q0FBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRPbkluaXQsXG5cdEhvc3RCaW5kaW5nXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IFRvYXN0Q29udGVudCB9IGZyb20gXCIuL25vdGlmaWNhdGlvbi1jb250ZW50LmludGVyZmFjZVwiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4vbm90aWZpY2F0aW9uLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgRXhwZXJpbWVudGFsU2VydmljZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2V4cGVyaW1lbnRhbFwiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uRGlzcGxheVNlcnZpY2UgfSBmcm9tIFwiLi9ub3RpZmljYXRpb24tZGlzcGxheS5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuXG4vKipcbiAqIFRvYXN0IG1lc3NhZ2VzIGFyZSBkaXNwbGF5ZWQgdG93YXJkIHRoZSB0b3Agb2YgdGhlIFVJIGFuZCBkbyBub3QgaW50ZXJydXB0IHVzZXLigJlzIHdvcmsuXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy1ub3RpZmljYXRpb24tLXRvYXN0KVxuICpcbiAqIDxleGFtcGxlLXVybD4uLi8uLi9pZnJhbWUuaHRtbD9pZD1jb21wb25lbnRzLW5vdGlmaWNhdGlvbi0tdG9hc3Q8L2V4YW1wbGUtdXJsPlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLXRvYXN0XCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PHN2Z1xuXHRcdFx0aWJtSWNvbj1cImVycm9yLS1maWxsZWRcIlxuXHRcdFx0c2l6ZT1cIjIwXCJcblx0XHRcdCpuZ0lmPVwibm90aWZpY2F0aW9uT2JqLnR5cGUgPT09ICdlcnJvcidcIlxuXHRcdFx0Y2xhc3M9XCJieC0tdG9hc3Qtbm90aWZpY2F0aW9uX19pY29uXCI+XG5cdFx0PC9zdmc+XG5cdFx0PHN2Z1xuXHRcdFx0aWJtSWNvbj1cIndhcm5pbmctLWZpbGxlZFwiXG5cdFx0XHRzaXplPVwiMjBcIlxuXHRcdFx0Km5nSWY9XCJub3RpZmljYXRpb25PYmoudHlwZSA9PT0gJ3dhcm5pbmcnXCJcblx0XHRcdGNsYXNzPVwiYngtLXRvYXN0LW5vdGlmaWNhdGlvbl9faWNvblwiPlxuXHRcdDwvc3ZnPlxuXHRcdDxzdmdcblx0XHRcdGlibUljb249XCJjaGVja21hcmstLWZpbGxlZFwiXG5cdFx0XHRzaXplPVwiMjBcIlxuXHRcdFx0Km5nSWY9XCJub3RpZmljYXRpb25PYmoudHlwZSA9PT0gJ3N1Y2Nlc3MnXCJcblx0XHRcdGNsYXNzPVwiYngtLXRvYXN0LW5vdGlmaWNhdGlvbl9faWNvblwiPlxuXHRcdDwvc3ZnPlxuXHRcdDxzdmdcblx0XHRcdGlibUljb249XCJpbmZvcm1hdGlvbi0tZmlsbGVkXCJcblx0XHRcdHNpemU9XCIyMFwiXG5cdFx0XHQqbmdJZj1cIm5vdGlmaWNhdGlvbk9iai50eXBlID09PSAnaW5mbydcIlxuXHRcdFx0Y2xhc3M9XCJieC0tdG9hc3Qtbm90aWZpY2F0aW9uX19pY29uXCI+XG5cdFx0PC9zdmc+XG5cdFx0PGRpdiBjbGFzcz1cImJ4LS10b2FzdC1ub3RpZmljYXRpb25fX2RldGFpbHNcIj5cblx0XHRcdDxoMyAqbmdJZj1cIiFub3RpZmljYXRpb25PYmoudGVtcGxhdGVcIiBpYm1Ub2FzdFRpdGxlIFtpbm5lckhUTUxdPVwibm90aWZpY2F0aW9uT2JqLnRpdGxlXCI+PC9oMz5cblx0XHRcdDxkaXYgKm5nSWY9XCIhbm90aWZpY2F0aW9uT2JqLnRlbXBsYXRlXCIgaWJtVG9hc3RTdWJ0aXRsZT5cblx0XHRcdFx0PHNwYW4gW2lubmVySFRNTF09XCJub3RpZmljYXRpb25PYmouc3VidGl0bGVcIj48L3NwYW4+XG5cdFx0XHRcdDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGxpbmsgb2Ygbm90aWZpY2F0aW9uT2JqLmxpbmtzXCI+XG5cdFx0XHRcdFx0PGEgaWJtTGluayBbaHJlZl09XCJsaW5rLmhyZWZcIj4ge3tsaW5rLnRleHR9fTwvYT5cblx0XHRcdFx0PC9uZy1jb250YWluZXI+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxwICpuZ0lmPVwiIW5vdGlmaWNhdGlvbk9iai50ZW1wbGF0ZVwiIGlibVRvYXN0Q2FwdGlvbiBbaW5uZXJIVE1MXT1cIm5vdGlmaWNhdGlvbk9iai5jYXB0aW9uXCI+PC9wPlxuXHRcdFx0PG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cIm5vdGlmaWNhdGlvbk9iai50ZW1wbGF0ZTsgY29udGV4dDogeyAkaW1wbGljaXQ6IG5vdGlmaWNhdGlvbk9ian1cIj48L25nLWNvbnRhaW5lcj5cblx0XHQ8L2Rpdj5cblx0XHQ8YnV0dG9uXG5cdFx0XHQqbmdJZj1cIiFpc0Nsb3NlSGlkZGVuXCJcblx0XHRcdGNsYXNzPVwiYngtLXRvYXN0LW5vdGlmaWNhdGlvbl9fY2xvc2UtYnV0dG9uXCJcblx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJub3RpZmljYXRpb25PYmouY2xvc2VMYWJlbFwiXG5cdFx0XHQoY2xpY2spPVwib25DbG9zZSgpXCI+XG5cdFx0XHQ8c3ZnIGlibUljb249XCJjbG9zZVwiIHNpemU9XCIxNlwiIGNsYXNzPVwiYngtLXRvYXN0LW5vdGlmaWNhdGlvbl9fY2xvc2UtaWNvblwiPjwvc3ZnPlxuXHRcdDwvYnV0dG9uPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIFRvYXN0IGV4dGVuZHMgTm90aWZpY2F0aW9uIGltcGxlbWVudHMgT25Jbml0IHtcblx0cHJpdmF0ZSBzdGF0aWMgdG9hc3RDb3VudCA9IDA7XG5cdC8qKlxuXHQgKiBDYW4gaGF2ZSBgdHlwZWAsIGB0aXRsZWAsIGBzdWJ0aXRsZWAsIGFuZCBgY2FwdGlvbmAgbWVtYmVycy5cblx0ICpcblx0ICogYHR5cGVgIGNhbiBiZSBvbmUgb2YgYFwiZXJyb3JcImAsIGBcImluZm9cImAsIGBcIndhcm5pbmdcImAsIG9yIGBcInN1Y2Nlc3NcImBcblx0ICovXG5cdEBJbnB1dCgpIG5vdGlmaWNhdGlvbk9iajogVG9hc3RDb250ZW50O1xuXG5cdEBIb3N0QmluZGluZyhcImF0dHIuaWRcIikgdG9hc3RJRCA9IGB0b2FzdC0ke1RvYXN0LnRvYXN0Q291bnQrK31gO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9hc3Qtbm90aWZpY2F0aW9uXCIpIHRvYXN0Q2xhc3MgPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoXCJhdHRyLnJvbGVcIikgcm9sZSA9IFwiYWxlcnRcIjtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9hc3Qtbm90aWZpY2F0aW9uLS1lcnJvclwiKSBnZXQgaXNFcnJvcigpIHsgcmV0dXJuIHRoaXMubm90aWZpY2F0aW9uT2JqW1widHlwZVwiXSA9PT0gXCJlcnJvclwiOyB9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS10b2FzdC1ub3RpZmljYXRpb24tLWluZm9cIikgZ2V0IGlzSW5mbygpIHsgcmV0dXJuIHRoaXMubm90aWZpY2F0aW9uT2JqW1widHlwZVwiXSA9PT0gXCJpbmZvXCI7IH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXRvYXN0LW5vdGlmaWNhdGlvbi0tc3VjY2Vzc1wiKSBnZXQgaXNTdWNjZXNzKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmpbXCJ0eXBlXCJdID09PSBcInN1Y2Nlc3NcIjsgfVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9hc3Qtbm90aWZpY2F0aW9uLS13YXJuaW5nXCIpIGdldCBpc1dhcm5pbmcoKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9ialtcInR5cGVcIl0gPT09IFwid2FybmluZ1wiOyB9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS10b2FzdC1ub3RpZmljYXRpb24tLWxvdy1jb250cmFzdFwiKSBnZXQgaXNMb3dDb250cmFzdCgpIHsgcmV0dXJuIHRoaXMubm90aWZpY2F0aW9uT2JqLmxvd0NvbnRyYXN0OyB9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJvdGVjdGVkIG5vdGlmaWNhdGlvbkRpc3BsYXlTZXJ2aWNlOiBOb3RpZmljYXRpb25EaXNwbGF5U2VydmljZSxcblx0XHRwcm90ZWN0ZWQgaTE4bjogSTE4bixcblx0XHRwcm90ZWN0ZWQgZXhwZXJpbWVudGFsOiBFeHBlcmltZW50YWxTZXJ2aWNlKSB7XG5cdFx0c3VwZXIobm90aWZpY2F0aW9uRGlzcGxheVNlcnZpY2UsIGkxOG4pO1xuXHRcdC8vIGRpc2FibGUgaW5saW5lIG5vdGlmaWNhdGlvbiBzdHlsZXNcblx0XHR0aGlzLm5vdGlmaWNhdGlvbkNsYXNzID0gZmFsc2U7XG5cdH1cblxuXHRuZ09uSW5pdCgpIHtcblx0XHRpZiAoIXRoaXMubm90aWZpY2F0aW9uT2JqLmNsb3NlTGFiZWwpIHtcblx0XHRcdHRoaXMubm90aWZpY2F0aW9uT2JqLmNsb3NlTGFiZWwgPSB0aGlzLmkxOG4uZ2V0KCkuTk9USUZJQ0FUSU9OLkNMT1NFX0JVVFRPTjtcblx0XHR9XG5cdH1cbn1cbiJdfQ==