/**
 *
 * carbon-angular v0.0.0 | pagination-overflow.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter } from "@angular/core";
/**
 * Used to present a selection of pages when there is an overflow
 * in the pagination list
 *
 * * ```html
 * <ibm-pagination-overflow [fromIndex]="5" [count]="30" (change)="handleChange(value)"></ibm-pagination-overflow>
 * ```
 */
export class PaginationOverflow {
    constructor() {
        /**
         * Emits click event
         */
        this.change = new EventEmitter();
    }
    get countAsArray() {
        return [...Array(this.count)];
    }
    handleChange(event) {
        this.change.emit(+event.target.value);
        event.target.value = "";
    }
}
PaginationOverflow.decorators = [
    { type: Component, args: [{
                selector: "ibm-pagination-overflow",
                template: `
		<li class="bx--pagination-nav__list-item" *ngIf="count > 1">
			<div class="bx--pagination-nav__select">
			<select
				class="bx--pagination-nav__page bx--pagination-nav__page--select" (change)="handleChange($event)">
				<option value="" hidden></option>
				<option
				*ngFor="let item of countAsArray; let i = index">
					{{fromIndex + i + 1}}
				</option>
			</select>
			<div class="bx--pagination-nav__select-icon-wrapper">
				<svg
					ibmIcon="overflow-menu--horizontal"
					size="16"
					style="display: inherit"
					class="bx--pagination-nav__select-icon">
				</svg>
			</div>
			</div>
		</li>
		<ibm-pagination-nav-item *ngIf="count === 1" [page]="fromIndex + 1"></ibm-pagination-nav-item>
	`
            }] }
];
/** @nocollapse */
PaginationOverflow.ctorParameters = () => [];
PaginationOverflow.propDecorators = {
    fromIndex: [{ type: Input }],
    count: [{ type: Input }],
    change: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi1vdmVyZmxvdy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3BhZ2luYXRpb24vIiwic291cmNlcyI6WyJwYWdpbmF0aW9uLW5hdi9wYWdpbmF0aW9uLW92ZXJmbG93LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCOzs7Ozs7O0dBT0c7QUEyQkgsTUFBTSxPQUFPLGtCQUFrQjtJQWlCOUI7UUFUQTs7V0FFRztRQUNPLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0lBTS9CLENBQUM7SUFKaEIsSUFBSSxZQUFZO1FBQ2YsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFJRCxZQUFZLENBQUMsS0FBSztRQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLENBQUM7OztZQWhERCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0JUO2FBQ0Q7Ozs7O3dCQUtDLEtBQUs7b0JBRUwsS0FBSztxQkFLTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8qKlxuICogVXNlZCB0byBwcmVzZW50IGEgc2VsZWN0aW9uIG9mIHBhZ2VzIHdoZW4gdGhlcmUgaXMgYW4gb3ZlcmZsb3dcbiAqIGluIHRoZSBwYWdpbmF0aW9uIGxpc3RcbiAqXG4gKiAqIGBgYGh0bWxcbiAqIDxpYm0tcGFnaW5hdGlvbi1vdmVyZmxvdyBbZnJvbUluZGV4XT1cIjVcIiBbY291bnRdPVwiMzBcIiAoY2hhbmdlKT1cImhhbmRsZUNoYW5nZSh2YWx1ZSlcIj48L2libS1wYWdpbmF0aW9uLW92ZXJmbG93PlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tcGFnaW5hdGlvbi1vdmVyZmxvd1wiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxsaSBjbGFzcz1cImJ4LS1wYWdpbmF0aW9uLW5hdl9fbGlzdC1pdGVtXCIgKm5nSWY9XCJjb3VudCA+IDFcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJieC0tcGFnaW5hdGlvbi1uYXZfX3NlbGVjdFwiPlxuXHRcdFx0PHNlbGVjdFxuXHRcdFx0XHRjbGFzcz1cImJ4LS1wYWdpbmF0aW9uLW5hdl9fcGFnZSBieC0tcGFnaW5hdGlvbi1uYXZfX3BhZ2UtLXNlbGVjdFwiIChjaGFuZ2UpPVwiaGFuZGxlQ2hhbmdlKCRldmVudClcIj5cblx0XHRcdFx0PG9wdGlvbiB2YWx1ZT1cIlwiIGhpZGRlbj48L29wdGlvbj5cblx0XHRcdFx0PG9wdGlvblxuXHRcdFx0XHQqbmdGb3I9XCJsZXQgaXRlbSBvZiBjb3VudEFzQXJyYXk7IGxldCBpID0gaW5kZXhcIj5cblx0XHRcdFx0XHR7e2Zyb21JbmRleCArIGkgKyAxfX1cblx0XHRcdFx0PC9vcHRpb24+XG5cdFx0XHQ8L3NlbGVjdD5cblx0XHRcdDxkaXYgY2xhc3M9XCJieC0tcGFnaW5hdGlvbi1uYXZfX3NlbGVjdC1pY29uLXdyYXBwZXJcIj5cblx0XHRcdFx0PHN2Z1xuXHRcdFx0XHRcdGlibUljb249XCJvdmVyZmxvdy1tZW51LS1ob3Jpem9udGFsXCJcblx0XHRcdFx0XHRzaXplPVwiMTZcIlxuXHRcdFx0XHRcdHN0eWxlPVwiZGlzcGxheTogaW5oZXJpdFwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJieC0tcGFnaW5hdGlvbi1uYXZfX3NlbGVjdC1pY29uXCI+XG5cdFx0XHRcdDwvc3ZnPlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2xpPlxuXHRcdDxpYm0tcGFnaW5hdGlvbi1uYXYtaXRlbSAqbmdJZj1cImNvdW50ID09PSAxXCIgW3BhZ2VdPVwiZnJvbUluZGV4ICsgMVwiPjwvaWJtLXBhZ2luYXRpb24tbmF2LWl0ZW0+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgUGFnaW5hdGlvbk92ZXJmbG93IHtcblx0LyoqXG5cdCAqIFRoZSBwYWdlIGZvciB0aGlzIGNvbXBvbmVudCB0byBkaXBzbGF5XG5cdCAqL1xuXHRASW5wdXQoKSBmcm9tSW5kZXg6IG51bWJlcjtcblxuXHRASW5wdXQoKSBjb3VudDogbnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBFbWl0cyBjbGljayBldmVudFxuXHQgKi9cblx0QE91dHB1dCgpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG5cdGdldCBjb3VudEFzQXJyYXkoKSB7XG5cdFx0cmV0dXJuIFsuLi5BcnJheSh0aGlzLmNvdW50KV07XG5cdH1cblxuXHRjb25zdHJ1Y3RvcigpIHt9XG5cblx0aGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG5cdFx0dGhpcy5jaGFuZ2UuZW1pdCgrZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRldmVudC50YXJnZXQudmFsdWUgPSBcIlwiO1xuXHR9XG59XG4iXX0=