/**
 *
 * carbon-angular v0.0.0 | placeholder.service.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injectable } from "@angular/core";
/**
 * Singleton service used to register the container for out-of-flow components to insert into.
 * Also used to insert/remove components from that view.
 */
export class PlaceholderService {
    constructor() {
        /**
         * Main `ViewContainerRef` to insert components into
         */
        this.viewContainerRef = null;
        /**
         * Map of id's to secondary `ViewContainerRef`s
         */
        this.viewContainerMap = new Map();
    }
    /**
     * Used by `Placeholder` to register view-container reference.
     */
    registerViewContainerRef(vcRef, id) {
        if (id) {
            this.viewContainerMap.set(id, vcRef);
        }
        else {
            this.viewContainerRef = vcRef;
        }
    }
    /**
     * Creates and returns component in the view.
     */
    createComponent(componentFactory, injector, id) {
        if (id) {
            if (!this.viewContainerMap.has(id)) {
                console.error(`No view container with id ${id} found`);
                return;
            }
            return this.viewContainerMap.get(id).createComponent(componentFactory, this.viewContainerMap.size, injector);
        }
        if (!this.viewContainerRef) {
            console.error("No view container defined! Likely due to a missing `ibm-placeholder`");
            return;
        }
        return this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, injector);
    }
    destroyComponent(component) {
        component.destroy();
    }
    hasComponentRef(component, id) {
        if (id) {
            return !(this.viewContainerMap.get(id).indexOf(component.hostView) < 0);
        }
        return !(this.viewContainerRef.indexOf(component.hostView) < 0);
    }
    hasPlaceholderRef(id) {
        if (id) {
            return this.viewContainerMap.has(id);
        }
        return !!this.viewContainerRef;
    }
    appendElement(element, id) {
        if (id) {
            return this.viewContainerMap.get(id).element.nativeElement.appendChild(element);
        }
        return this.viewContainerRef.element.nativeElement.appendChild(element);
    }
    removeElement(element, id) {
        if (id) {
            return this.viewContainerMap.get(id).element.nativeElement.removeChild(element);
        }
        return this.viewContainerRef.element.nativeElement.removeChild(element);
    }
    hasElement(element, id) {
        if (id) {
            return this.viewContainerMap.get(id).element.nativeElement.contains(element);
        }
        return this.viewContainerRef.element.nativeElement.contains(element);
    }
}
PlaceholderService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2Vob2xkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvcGxhY2Vob2xkZXIvIiwic291cmNlcyI6WyJwbGFjZWhvbGRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0M7OztHQUdHO0FBRUgsTUFBTSxPQUFPLGtCQUFrQjtJQUQvQjtRQUVDOztXQUVHO1FBQ08scUJBQWdCLEdBQXFCLElBQUksQ0FBQztRQUNwRDs7V0FFRztRQUNPLHFCQUFnQixHQUErQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBcUVwRSxDQUFDO0lBcEVBOztPQUVHO0lBQ0gsd0JBQXdCLENBQUMsS0FBdUIsRUFBRSxFQUFRO1FBQ3pELElBQUksRUFBRSxFQUFFO1lBQ1AsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDckM7YUFBTTtZQUNOLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7U0FDOUI7SUFDRixDQUFDO0lBRUQ7O09BRUc7SUFDSCxlQUFlLENBQUMsZ0JBQXVDLEVBQUUsUUFBa0IsRUFBRSxFQUFRO1FBQ3BGLElBQUksRUFBRSxFQUFFO1lBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQ25DLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3ZELE9BQU87YUFDUDtZQUNELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM3RztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDM0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1lBQ3RGLE9BQU87U0FDUDtRQUNELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3hHLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxTQUE0QjtRQUM1QyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELGVBQWUsQ0FBQyxTQUE0QixFQUFFLEVBQVE7UUFDckQsSUFBSSxFQUFFLEVBQUU7WUFDUCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDeEU7UUFFRCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsaUJBQWlCLENBQUMsRUFBUTtRQUN6QixJQUFJLEVBQUUsRUFBRTtZQUNQLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNyQztRQUNELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNoQyxDQUFDO0lBRUQsYUFBYSxDQUFDLE9BQW9CLEVBQUUsRUFBUTtRQUMzQyxJQUFJLEVBQUUsRUFBRTtZQUNQLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNoRjtRQUNELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRCxhQUFhLENBQUMsT0FBb0IsRUFBRSxFQUFRO1FBQzNDLElBQUksRUFBRSxFQUFFO1lBQ1AsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2hGO1FBQ0QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELFVBQVUsQ0FBQyxPQUFvQixFQUFFLEVBQVE7UUFDeEMsSUFBSSxFQUFFLEVBQUU7WUFDUCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0U7UUFDRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RSxDQUFDOzs7WUE3RUQsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudFJlZixcblx0Vmlld0NvbnRhaW5lclJlZixcblx0Q29tcG9uZW50RmFjdG9yeSxcblx0SW5qZWN0b3Jcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG4vKipcbiAqIFNpbmdsZXRvbiBzZXJ2aWNlIHVzZWQgdG8gcmVnaXN0ZXIgdGhlIGNvbnRhaW5lciBmb3Igb3V0LW9mLWZsb3cgY29tcG9uZW50cyB0byBpbnNlcnQgaW50by5cbiAqIEFsc28gdXNlZCB0byBpbnNlcnQvcmVtb3ZlIGNvbXBvbmVudHMgZnJvbSB0aGF0IHZpZXcuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQbGFjZWhvbGRlclNlcnZpY2Uge1xuXHQvKipcblx0ICogTWFpbiBgVmlld0NvbnRhaW5lclJlZmAgdG8gaW5zZXJ0IGNvbXBvbmVudHMgaW50b1xuXHQgKi9cblx0cHJvdGVjdGVkIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYgPSBudWxsO1xuXHQvKipcblx0ICogTWFwIG9mIGlkJ3MgdG8gc2Vjb25kYXJ5IGBWaWV3Q29udGFpbmVyUmVmYHNcblx0ICovXG5cdHByb3RlY3RlZCB2aWV3Q29udGFpbmVyTWFwOiBNYXA8YW55LCBWaWV3Q29udGFpbmVyUmVmPiA9IG5ldyBNYXAoKTtcblx0LyoqXG5cdCAqIFVzZWQgYnkgYFBsYWNlaG9sZGVyYCB0byByZWdpc3RlciB2aWV3LWNvbnRhaW5lciByZWZlcmVuY2UuXG5cdCAqL1xuXHRyZWdpc3RlclZpZXdDb250YWluZXJSZWYodmNSZWY6IFZpZXdDb250YWluZXJSZWYsIGlkPzogYW55KTogdm9pZCB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHR0aGlzLnZpZXdDb250YWluZXJNYXAuc2V0KGlkLCB2Y1JlZik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMudmlld0NvbnRhaW5lclJlZiA9IHZjUmVmO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGNvbXBvbmVudCBpbiB0aGUgdmlldy5cblx0ICovXG5cdGNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PGFueT4sIGluamVjdG9yOiBJbmplY3RvciwgaWQ/OiBhbnkpOiBDb21wb25lbnRSZWY8YW55PiB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHRpZiAoIXRoaXMudmlld0NvbnRhaW5lck1hcC5oYXMoaWQpKSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYE5vIHZpZXcgY29udGFpbmVyIHdpdGggaWQgJHtpZH0gZm91bmRgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMudmlld0NvbnRhaW5lck1hcC5nZXQoaWQpLmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRGYWN0b3J5LCB0aGlzLnZpZXdDb250YWluZXJNYXAuc2l6ZSwgaW5qZWN0b3IpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMudmlld0NvbnRhaW5lclJlZikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIk5vIHZpZXcgY29udGFpbmVyIGRlZmluZWQhIExpa2VseSBkdWUgdG8gYSBtaXNzaW5nIGBpYm0tcGxhY2Vob2xkZXJgXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRGYWN0b3J5LCB0aGlzLnZpZXdDb250YWluZXJSZWYubGVuZ3RoLCBpbmplY3Rvcik7XG5cdH1cblxuXHRkZXN0cm95Q29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50UmVmPGFueT4pIHtcblx0XHRjb21wb25lbnQuZGVzdHJveSgpO1xuXHR9XG5cblx0aGFzQ29tcG9uZW50UmVmKGNvbXBvbmVudDogQ29tcG9uZW50UmVmPGFueT4sIGlkPzogYW55KSB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHRyZXR1cm4gISh0aGlzLnZpZXdDb250YWluZXJNYXAuZ2V0KGlkKS5pbmRleE9mKGNvbXBvbmVudC5ob3N0VmlldykgPCAwKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gISh0aGlzLnZpZXdDb250YWluZXJSZWYuaW5kZXhPZihjb21wb25lbnQuaG9zdFZpZXcpIDwgMCk7XG5cdH1cblxuXHRoYXNQbGFjZWhvbGRlclJlZihpZD86IGFueSkge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMudmlld0NvbnRhaW5lck1hcC5oYXMoaWQpO1xuXHRcdH1cblx0XHRyZXR1cm4gISF0aGlzLnZpZXdDb250YWluZXJSZWY7XG5cdH1cblxuXHRhcHBlbmRFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBpZD86IGFueSk6IEhUTUxFbGVtZW50IHtcblx0XHRpZiAoaWQpIHtcblx0XHRcdHJldHVybiB0aGlzLnZpZXdDb250YWluZXJNYXAuZ2V0KGlkKS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXHR9XG5cblx0cmVtb3ZlRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCwgaWQ/OiBhbnkpOiBIVE1MRWxlbWVudCB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyTWFwLmdldChpZCkuZWxlbWVudC5uYXRpdmVFbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcblx0fVxuXG5cdGhhc0VsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGlkPzogYW55KTogYm9vbGVhbiB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyTWFwLmdldChpZCkuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGVsZW1lbnQpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jb250YWlucyhlbGVtZW50KTtcblx0fVxufVxuIl19