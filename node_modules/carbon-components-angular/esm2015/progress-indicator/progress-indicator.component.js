/**
 *
 * carbon-angular v0.0.0 | progress-indicator.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter } from "@angular/core";
import { ExperimentalService } from "carbon-components-angular/experimental";
/**
 * [See demo](../../?path=/story/components-progress-indicator--basic)
 *
 * <example-url>../../iframe.html?id=components-progress-indicator--basic</example-url>
 */
export class ProgressIndicator {
    constructor(experimental) {
        this.experimental = experimental;
        this.stepSelected = new EventEmitter();
        this.orientation = "horizontal";
        this.skeleton = false;
        this.spacing = "default";
    }
    static skeletonSteps(stepCount) {
        const steps = [];
        for (let i = 0; i < stepCount; i++) {
            steps.push({ "state": ["incomplete"] });
        }
        return steps;
    }
    get current() {
        return this.steps.findIndex(step => step.state.includes("current"));
    }
    set current(current) {
        this._current = current;
    }
    ngOnChanges(changes) {
        if (changes.steps || changes.current) {
            this.setProgressIndicatorStates();
        }
    }
    setProgressIndicatorStates() {
        if (this.steps === undefined) {
            return;
        }
        if (this._current === undefined || this._current < 0) {
            for (let i = 0; i < this.steps.length; i++) {
                this.steps[i].state[0] = "incomplete";
            }
            return;
        }
        if (this._current > this.steps.length - 1) {
            for (let i = 0; i < this.steps.length; i++) {
                this.steps[i].state[0] = "complete";
            }
            return;
        }
        this.steps[this._current].state[0] = "current";
        for (let i = 0; i < this._current; i++) {
            this.steps[i].state[0] = "complete";
        }
        for (let i = this._current + 1; i < this.steps.length; i++) {
            this.steps[i].state[0] = "incomplete";
        }
    }
}
ProgressIndicator.decorators = [
    { type: Component, args: [{
                selector: "ibm-progress-indicator",
                template: `
	<ul
		data-progress
		data-progress-current
		class="bx--progress"
		[ngClass]="{
			'bx--skeleton': skeleton,
			'bx--progress--vertical': (orientation === 'vertical'),
			'bx--progress--space-equal': spacing === 'equal' && orientation !== 'vertical'
		}">
		<li
			class="bx--progress-step bx--progress-step--{{step.state[0]}}"
			*ngFor="let step of steps; let i = index"
			[ngClass]="{'bx--progress-step--disabled' : step.disabled}">
			<div class="bx--progress-step-button bx--progress-step-button--unclickable" role="button" tabindex="-1">
				<svg ibmIcon="checkmark--outline" size="16" *ngIf="step.state.includes('complete')"></svg>
				<svg *ngIf="step.state.includes('current')">
					<path d="M 7, 7 m -7, 0 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0" ></path>
				</svg>
				<svg *ngIf="step.state.includes('incomplete')">
					<path
						d="M8 1C4.1 1 1 4.1 1 8s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm0 13c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z">
					</path>
				</svg>
				<svg ibmIcon="warning" size="16" *ngIf="step.state.includes('error')" class="bx--progress__warning"></svg>
				<p
					class="bx--progress-label"
					*ngIf="step.tooltip"
					[ibmTooltip]="step.tooltip.content"
					[trigger]="step.tooltip.trigger"
					[placement]="step.tooltip.placement"
					[title]="step.tooltip.title"
					[gap]="step.tooltip.gap"
					[appendInline]="step.tooltip.appendInline"
					[data]="step.tooltip.data"
					(click)="stepSelected.emit({ step: step, index: i })">
					{{step.text}}
				</p>
				<p class="bx--progress-label" *ngIf="!step.tooltip" (click)="stepSelected.emit({ step: step, index: i })">{{step.text}}</p>
				<p *ngIf="step.optionalText" class="bx--progress-optional">{{step.optionalText}}</p>
				<span class="bx--progress-line"></span>
			</div>
		</li>
	</ul>
	`
            }] }
];
/** @nocollapse */
ProgressIndicator.ctorParameters = () => [
    { type: ExperimentalService }
];
ProgressIndicator.propDecorators = {
    stepSelected: [{ type: Output }],
    steps: [{ type: Input }],
    orientation: [{ type: Input }],
    skeleton: [{ type: Input }],
    spacing: [{ type: Input }],
    current: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,