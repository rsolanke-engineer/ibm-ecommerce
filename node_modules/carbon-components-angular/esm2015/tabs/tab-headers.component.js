/**
 *
 * carbon-angular v0.0.0 | tab-headers.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, QueryList, Input, HostListener, ViewChild, ContentChildren, ViewChildren, ElementRef, TemplateRef, ChangeDetectorRef } from "@angular/core";
import { EventService } from "carbon-components-angular/utils";
import { I18n } from "carbon-components-angular/i18n";
import { Tab } from "./tab.component";
/**
 * The `TabHeaders` component contains the `Tab` items and controls scroll functionality
 * if content has overflow.
 */
export class TabHeaders {
    constructor(elementRef, changeDetectorRef, eventService, i18n) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.eventService = eventService;
        this.i18n = i18n;
        /**
         * Set to 'true' to have `Tab` items cached and not reloaded on tab switching.
         * Duplicate from `n-tabs` to support standalone headers
         */
        this.cacheActive = false;
        /**
         * Set to `true` to put tabs in a loading state.
         */
        this.skeleton = false;
        this.type = "default";
        this.translations = this.i18n.get().PAGINATION;
        /**
         * The index of the first visible tab.
         */
        this.firstVisibleTab = 0;
        // width of the overflow buttons
        this.OVERFLOW_BUTTON_OFFSET = 40;
    }
    get hasHorizontalOverflow() {
        const tabList = this.headerContainer.nativeElement;
        return tabList.scrollWidth > tabList.clientWidth;
    }
    get leftOverflowNavButtonHidden() {
        const tabList = this.headerContainer.nativeElement;
        return !this.hasHorizontalOverflow || !tabList.scrollLeft;
    }
    get rightOverflowNavButtonHidden() {
        const tabList = this.headerContainer.nativeElement;
        return !this.hasHorizontalOverflow ||
            (tabList.scrollLeft + tabList.clientWidth) === tabList.scrollWidth;
    }
    // keyboard accessibility
    /**
     * Controls the keydown events used for tabbing through the headings.
     */
    keyboardInput(event) {
        let tabsArray = Array.from(this.tabs);
        // "Right" is an ie11 specific value
        if (event.key === "Right" || event.key === "ArrowRight") {
            if (this.currentSelectedTab < this.allTabHeaders.length - 1) {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[this.currentSelectedTab + 1], this.currentSelectedTab);
                }
                this.allTabHeaders.toArray()[this.currentSelectedTab + 1].nativeElement.focus();
            }
            else {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[0], 0);
                }
                this.allTabHeaders.first.nativeElement.focus();
            }
        }
        // "Left" is an ie11 specific value
        if (event.key === "Left" || event.key === "ArrowLeft") {
            if (this.currentSelectedTab > 0) {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[this.currentSelectedTab - 1], this.currentSelectedTab);
                }
                this.allTabHeaders.toArray()[this.currentSelectedTab - 1].nativeElement.focus();
            }
            else {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[this.allTabHeaders.length - 1], this.allTabHeaders.length);
                }
                this.allTabHeaders.toArray()[this.allTabHeaders.length - 1].nativeElement.focus();
            }
        }
        if (event.key === "Home") {
            event.preventDefault();
            if (this.followFocus) {
                this.selectTab(event.target, tabsArray[0], 0);
            }
            this.allTabHeaders.toArray()[0].nativeElement.focus();
        }
        if (event.key === "End") {
            event.preventDefault();
            if (this.followFocus) {
                this.selectTab(event.target, tabsArray[this.allTabHeaders.length - 1], this.allTabHeaders.length);
            }
            this.allTabHeaders.toArray()[this.allTabHeaders.length - 1].nativeElement.focus();
        }
        // `"Spacebar"` is IE11 specific value
        if ((event.key === " " || event.key === "Spacebar") && !this.followFocus) {
            this.selectTab(event.target, tabsArray[this.currentSelectedTab], this.currentSelectedTab);
        }
    }
    ngOnInit() {
        this.eventService.on(window, "resize", () => this.handleScroll());
    }
    ngAfterContentInit() {
        if (!this.tabInput) {
            this.tabs = this.tabQuery;
        }
        else {
            this.tabs = this.tabInput;
        }
        this.tabs.forEach(tab => tab.cacheActive = this.cacheActive);
        this.tabs.changes.subscribe(() => {
            this.setFirstTab();
        });
        this.setFirstTab();
    }
    ngOnChanges(changes) {
        if (this.tabs && changes.cacheActive) {
            this.tabs.forEach(tab => tab.cacheActive = this.cacheActive);
        }
    }
    /**
     * Controls manually focusing tabs.
     */
    onTabFocus(ref, index) {
        this.currentSelectedTab = index;
        // reset scroll left because we're already handling it
        this.headerContainer.nativeElement.parentElement.scrollLeft = 0;
    }
    getSelectedTab() {
        const selected = this.tabs.find(tab => tab.active);
        if (selected) {
            return selected;
        }
        return { headingIsTemplate: false, heading: "" };
    }
    /**
     * Selects `Tab` 'tab' and moves it into view on the view DOM if it is not already.
     */
    selectTab(ref, tab, tabIndex) {
        if (tab.disabled) {
            return;
        }
        this.currentSelectedTab = tabIndex;
        this.tabs.forEach(_tab => _tab.active = false);
        tab.active = true;
        tab.doSelect();
    }
    handleScroll() {
        this.changeDetectorRef.markForCheck();
    }
    handleOverflowNavClick(direction, multiplier = 15) {
        const tabList = this.headerContainer.nativeElement;
        const { clientWidth, scrollLeft, scrollWidth } = tabList;
        if (direction === 1 && !scrollLeft) {
            tabList.scrollLeft += this.OVERFLOW_BUTTON_OFFSET;
        }
        tabList.scrollLeft += direction * multiplier;
        const leftEdgeReached = direction === -1 && scrollLeft < this.OVERFLOW_BUTTON_OFFSET;
        const rightEdgeReached = direction === 1 &&
            scrollLeft + clientWidth >= scrollWidth - this.OVERFLOW_BUTTON_OFFSET;
        if (leftEdgeReached) {
            this.rightOverflowNavButton.nativeElement.focus();
        }
        if (rightEdgeReached) {
            this.leftOverflowNavButton.nativeElement.focus();
        }
    }
    handleOverflowNavMouseDown(direction) {
        const tabList = this.headerContainer.nativeElement;
        this.overflowNavInterval = setInterval(() => {
            const { clientWidth, scrollLeft, scrollWidth } = tabList;
            // clear interval if scroll reaches left or right edge
            const leftEdgeReached = direction === -1 && scrollLeft < this.OVERFLOW_BUTTON_OFFSET;
            const rightEdgeReached = direction === 1 &&
                scrollLeft + clientWidth >= scrollWidth - this.OVERFLOW_BUTTON_OFFSET;
            if (leftEdgeReached || rightEdgeReached) {
                clearInterval(this.overflowNavInterval);
            }
            // account for overflow button appearing and causing tablist width change
            this.handleOverflowNavClick(direction);
        });
    }
    handleOverflowNavMouseUp() {
        clearInterval(this.overflowNavInterval);
    }
    /**
     * Determines which `Tab` is initially selected.
     */
    setFirstTab() {
        setTimeout(() => {
            let firstTab = this.tabs.find(tab => tab.active);
            if (!firstTab && this.tabs.first) {
                firstTab = this.tabs.first;
                firstTab.active = true;
            }
            if (firstTab) {
                firstTab.doSelect();
            }
        });
    }
}
TabHeaders.decorators = [
    { type: Component, args: [{
                selector: "ibm-tab-headers",
                template: `
		<nav
			class="bx--tabs--scrollable"
			[ngClass]="{
				'bx--skeleton': skeleton,
				'bx--tabs--container bx--tabs--scrollable--container': type === 'container'
			}"
			role="navigation"
			[attr.aria-label]="ariaLabel"
			[attr.aria-labelledby]="ariaLabelledby">
			<button
				#leftOverflowNavButton
				type="button"
				[title]="translations.PREVIOUS"
				[ngClass]="{
					'bx--tab--overflow-nav-button': hasHorizontalOverflow,
					'bx--tab--overflow-nav-button--hidden': leftOverflowNavButtonHidden
				}"
				(click)="handleOverflowNavClick(-1)"
				(mousedown)="handleOverflowNavMouseDown(-1)"
				(mouseup)="handleOverflowNavMouseUp()">
				<svg
					focusable="false"
					preserveAspectRatio="xMidYMid meet"
					xmlns="http://www.w3.org/2000/svg"
					fill="currentColor"
					width="16"
					height="16"
					viewBox="0 0 16 16"
					aria-hidden="true">
					<path d="M5 8L10 3 10.7 3.7 6.4 8 10.7 12.3 10 13z"></path>
				</svg>
			</button>
			<div *ngIf="!leftOverflowNavButtonHidden" class="bx--tabs__overflow-indicator--left"></div>
			<ul
				#tabList
				class="bx--tabs--scrollable__nav"
				role="tablist"
				(scroll)="handleScroll()">
				<li role="presentation">
					<ng-container *ngIf="contentBefore" [ngTemplateOutlet]="contentBefore"></ng-container>
				</li>
				<li
					*ngFor="let tab of tabs; let i = index;"
					[ngClass]="{
						'bx--tabs__nav-item--selected bx--tabs--scrollable__nav-item--selected': tab.active,
						'bx--tabs__nav-item--disabled bx--tabs--scrollable__nav-item--disabled': tab.disabled
					}"
					class="bx--tabs--scrollable__nav-item"
					role="presentation"
					(click)="selectTab(tabItem, tab, i)">
					<button
						#tabItem
						[attr.aria-selected]="tab.active"
						[attr.tabindex]="(tab.active?0:-1)"
						[attr.aria-controls]="tab.id"
						[attr.aria-disabled]="tab.disabled"
						(focus)="onTabFocus(tabItem, i)"
						(click)="$event.preventDefault()"
						draggable="false"
						id="{{tab.id}}-header"
						class="bx--tabs--scrollable__nav-link"
						[title]="tab.title ? tab.title : tab.heading"
						href="#"
						role="tab">
						<ng-container *ngIf="!tab.headingIsTemplate">
							{{ tab.heading }}
						</ng-container>
						<ng-template
							*ngIf="tab.headingIsTemplate"
							[ngTemplateOutlet]="tab.heading"
							[ngTemplateOutletContext]="{$implicit: tab.context}">
						</ng-template>
					</button>
				</li>
				<li role="presentation">
					<ng-container *ngIf="contentAfter" [ngTemplateOutlet]="contentAfter"></ng-container>
				</li>
			</ul>
			<div *ngIf="!rightOverflowNavButtonHidden" class="bx--tabs__overflow-indicator--right"></div>
			<button
				#rightOverflowNavButton
				type="button"
				[title]="translations.NEXT"
				[ngClass]="{
					'bx--tab--overflow-nav-button': hasHorizontalOverflow,
					'bx--tab--overflow-nav-button--hidden': rightOverflowNavButtonHidden
				}"
				(click)="handleOverflowNavClick(1)"
				(mousedown)="handleOverflowNavMouseDown(1)"
				(mouseup)="handleOverflowNavMouseUp()">
				<svg
					focusable="false"
					preserveAspectRatio="xMidYMid meet"
					xmlns="http://www.w3.org/2000/svg"
					fill="currentColor"
					width="16"
					height="16"
					viewBox="0 0 16 16"
					aria-hidden="true">
					<path d="M11 8L6 13 5.3 12.3 9.6 8 5.3 3.7 6 3z"></path>
				</svg>
			</button>
		</nav>
	`
            }] }
];
/** @nocollapse */
TabHeaders.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: EventService },
    { type: I18n }
];
TabHeaders.propDecorators = {
    tabInput: [{ type: Input, args: ["tabs",] }],
    cacheActive: [{ type: Input }],
    followFocus: [{ type: Input }],
    skeleton: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    ariaLabelledby: [{ type: Input }],
    contentBefore: [{ type: Input }],
    contentAfter: [{ type: Input }],
    type: [{ type: Input }],
    translations: [{ type: Input }],
    headerContainer: [{ type: ViewChild, args: ["tabList", { static: true },] }],
    rightOverflowNavButton: [{ type: ViewChild, args: ["rightOverflowNavButton", { static: true },] }],
    leftOverflowNavButton: [{ type: ViewChild, args: ["leftOverflowNavButton", { static: true },] }],
    tabQuery: [{ type: ContentChildren, args: [Tab,] }],
    allTabHeaders: [{ type: ViewChildren, args: ["tabItem",] }],
    keyboardInput: [{ type: HostListener, args: ["keydown", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWhlYWRlcnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci90YWJzLyIsInNvdXJjZXMiOlsidGFiLWhlYWRlcnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNULEtBQUssRUFDTCxZQUFZLEVBQ1osU0FBUyxFQUNULGVBQWUsRUFFZixZQUFZLEVBQ1osVUFBVSxFQUNWLFdBQVcsRUFJWCxpQkFBaUIsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN0RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFdEM7OztHQUdHO0FBOEdILE1BQU0sT0FBTyxVQUFVO0lBdUZ0QixZQUNXLFVBQXNCLEVBQ3RCLGlCQUFvQyxFQUNwQyxZQUEwQixFQUMxQixJQUFVO1FBSFYsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLFNBQUksR0FBSixJQUFJLENBQU07UUFwRnJCOzs7V0FHRztRQUNNLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBSzdCOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBQztRQWFqQixTQUFJLEdBQTRCLFNBQVMsQ0FBQztRQUUxQyxpQkFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDO1FBbUJuRDs7V0FFRztRQUNJLG9CQUFlLEdBQUcsQ0FBQyxDQUFDO1FBMEIzQixnQ0FBZ0M7UUFDaEMsMkJBQXNCLEdBQUcsRUFBRSxDQUFDO0lBU3hCLENBQUM7SUExQkwsSUFBVyxxQkFBcUI7UUFD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TCxLQUFLOzJCQUNMLEtBQUs7bUJBRUwsS0FBSzsyQkFFTCxLQUFLOzhCQU1MLFNBQVMsU0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3FDQUVyQyxTQUFTLFNBQUMsd0JBQXdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO29DQUVwRCxTQUFTLFNBQUMsdUJBQXVCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3VCQUluRCxlQUFlLFNBQUMsR0FBRzs0QkFZbkIsWUFBWSxTQUFDLFNBQVM7NEJBc0N0QixZQUFZLFNBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRRdWVyeUxpc3QsXG5cdElucHV0LFxuXHRIb3N0TGlzdGVuZXIsXG5cdFZpZXdDaGlsZCxcblx0Q29udGVudENoaWxkcmVuLFxuXHRBZnRlckNvbnRlbnRJbml0LFxuXHRWaWV3Q2hpbGRyZW4sXG5cdEVsZW1lbnRSZWYsXG5cdFRlbXBsYXRlUmVmLFxuXHRPbkNoYW5nZXMsXG5cdFNpbXBsZUNoYW5nZXMsXG5cdE9uSW5pdCxcblx0Q2hhbmdlRGV0ZWN0b3JSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEV2ZW50U2VydmljZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3V0aWxzXCI7XG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuaW1wb3J0IHsgVGFiIH0gZnJvbSBcIi4vdGFiLmNvbXBvbmVudFwiO1xuXG4vKipcbiAqIFRoZSBgVGFiSGVhZGVyc2AgY29tcG9uZW50IGNvbnRhaW5zIHRoZSBgVGFiYCBpdGVtcyBhbmQgY29udHJvbHMgc2Nyb2xsIGZ1bmN0aW9uYWxpdHlcbiAqIGlmIGNvbnRlbnQgaGFzIG92ZXJmbG93LlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLXRhYi1oZWFkZXJzXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PG5hdlxuXHRcdFx0Y2xhc3M9XCJieC0tdGFicy0tc2Nyb2xsYWJsZVwiXG5cdFx0XHRbbmdDbGFzc109XCJ7XG5cdFx0XHRcdCdieC0tc2tlbGV0b24nOiBza2VsZXRvbixcblx0XHRcdFx0J2J4LS10YWJzLS1jb250YWluZXIgYngtLXRhYnMtLXNjcm9sbGFibGUtLWNvbnRhaW5lcic6IHR5cGUgPT09ICdjb250YWluZXInXG5cdFx0XHR9XCJcblx0XHRcdHJvbGU9XCJuYXZpZ2F0aW9uXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiYXJpYUxhYmVsXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxsZWRieV09XCJhcmlhTGFiZWxsZWRieVwiPlxuXHRcdFx0PGJ1dHRvblxuXHRcdFx0XHQjbGVmdE92ZXJmbG93TmF2QnV0dG9uXG5cdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHRbdGl0bGVdPVwidHJhbnNsYXRpb25zLlBSRVZJT1VTXCJcblx0XHRcdFx0W25nQ2xhc3NdPVwie1xuXHRcdFx0XHRcdCdieC0tdGFiLS1vdmVyZmxvdy1uYXYtYnV0dG9uJzogaGFzSG9yaXpvbnRhbE92ZXJmbG93LFxuXHRcdFx0XHRcdCdieC0tdGFiLS1vdmVyZmxvdy1uYXYtYnV0dG9uLS1oaWRkZW4nOiBsZWZ0T3ZlcmZsb3dOYXZCdXR0b25IaWRkZW5cblx0XHRcdFx0fVwiXG5cdFx0XHRcdChjbGljayk9XCJoYW5kbGVPdmVyZmxvd05hdkNsaWNrKC0xKVwiXG5cdFx0XHRcdChtb3VzZWRvd24pPVwiaGFuZGxlT3ZlcmZsb3dOYXZNb3VzZURvd24oLTEpXCJcblx0XHRcdFx0KG1vdXNldXApPVwiaGFuZGxlT3ZlcmZsb3dOYXZNb3VzZVVwKClcIj5cblx0XHRcdFx0PHN2Z1xuXHRcdFx0XHRcdGZvY3VzYWJsZT1cImZhbHNlXCJcblx0XHRcdFx0XHRwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiXG5cdFx0XHRcdFx0eG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG5cdFx0XHRcdFx0ZmlsbD1cImN1cnJlbnRDb2xvclwiXG5cdFx0XHRcdFx0d2lkdGg9XCIxNlwiXG5cdFx0XHRcdFx0aGVpZ2h0PVwiMTZcIlxuXHRcdFx0XHRcdHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuXHRcdFx0XHRcdGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuXHRcdFx0XHRcdDxwYXRoIGQ9XCJNNSA4TDEwIDMgMTAuNyAzLjcgNi40IDggMTAuNyAxMi4zIDEwIDEzelwiPjwvcGF0aD5cblx0XHRcdFx0PC9zdmc+XG5cdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDxkaXYgKm5nSWY9XCIhbGVmdE92ZXJmbG93TmF2QnV0dG9uSGlkZGVuXCIgY2xhc3M9XCJieC0tdGFic19fb3ZlcmZsb3ctaW5kaWNhdG9yLS1sZWZ0XCI+PC9kaXY+XG5cdFx0XHQ8dWxcblx0XHRcdFx0I3RhYkxpc3Rcblx0XHRcdFx0Y2xhc3M9XCJieC0tdGFicy0tc2Nyb2xsYWJsZV9fbmF2XCJcblx0XHRcdFx0cm9sZT1cInRhYmxpc3RcIlxuXHRcdFx0XHQoc2Nyb2xsKT1cImhhbmRsZVNjcm9sbCgpXCI+XG5cdFx0XHRcdDxsaSByb2xlPVwicHJlc2VudGF0aW9uXCI+XG5cdFx0XHRcdFx0PG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbnRlbnRCZWZvcmVcIiBbbmdUZW1wbGF0ZU91dGxldF09XCJjb250ZW50QmVmb3JlXCI+PC9uZy1jb250YWluZXI+XG5cdFx0XHRcdDwvbGk+XG5cdFx0XHRcdDxsaVxuXHRcdFx0XHRcdCpuZ0Zvcj1cImxldCB0YWIgb2YgdGFiczsgbGV0IGkgPSBpbmRleDtcIlxuXHRcdFx0XHRcdFtuZ0NsYXNzXT1cIntcblx0XHRcdFx0XHRcdCdieC0tdGFic19fbmF2LWl0ZW0tLXNlbGVjdGVkIGJ4LS10YWJzLS1zY3JvbGxhYmxlX19uYXYtaXRlbS0tc2VsZWN0ZWQnOiB0YWIuYWN0aXZlLFxuXHRcdFx0XHRcdFx0J2J4LS10YWJzX19uYXYtaXRlbS0tZGlzYWJsZWQgYngtLXRhYnMtLXNjcm9sbGFibGVfX25hdi1pdGVtLS1kaXNhYmxlZCc6IHRhYi5kaXNhYmxlZFxuXHRcdFx0XHRcdH1cIlxuXHRcdFx0XHRcdGNsYXNzPVwiYngtLXRhYnMtLXNjcm9sbGFibGVfX25hdi1pdGVtXCJcblx0XHRcdFx0XHRyb2xlPVwicHJlc2VudGF0aW9uXCJcblx0XHRcdFx0XHQoY2xpY2spPVwic2VsZWN0VGFiKHRhYkl0ZW0sIHRhYiwgaSlcIj5cblx0XHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0XHQjdGFiSXRlbVxuXHRcdFx0XHRcdFx0W2F0dHIuYXJpYS1zZWxlY3RlZF09XCJ0YWIuYWN0aXZlXCJcblx0XHRcdFx0XHRcdFthdHRyLnRhYmluZGV4XT1cIih0YWIuYWN0aXZlPzA6LTEpXCJcblx0XHRcdFx0XHRcdFthdHRyLmFyaWEtY29udHJvbHNdPVwidGFiLmlkXCJcblx0XHRcdFx0XHRcdFthdHRyLmFyaWEtZGlzYWJsZWRdPVwidGFiLmRpc2FibGVkXCJcblx0XHRcdFx0XHRcdChmb2N1cyk9XCJvblRhYkZvY3VzKHRhYkl0ZW0sIGkpXCJcblx0XHRcdFx0XHRcdChjbGljayk9XCIkZXZlbnQucHJldmVudERlZmF1bHQoKVwiXG5cdFx0XHRcdFx0XHRkcmFnZ2FibGU9XCJmYWxzZVwiXG5cdFx0XHRcdFx0XHRpZD1cInt7dGFiLmlkfX0taGVhZGVyXCJcblx0XHRcdFx0XHRcdGNsYXNzPVwiYngtLXRhYnMtLXNjcm9sbGFibGVfX25hdi1saW5rXCJcblx0XHRcdFx0XHRcdFt0aXRsZV09XCJ0YWIudGl0bGUgPyB0YWIudGl0bGUgOiB0YWIuaGVhZGluZ1wiXG5cdFx0XHRcdFx0XHRocmVmPVwiI1wiXG5cdFx0XHRcdFx0XHRyb2xlPVwidGFiXCI+XG5cdFx0XHRcdFx0XHQ8bmctY29udGFpbmVyICpuZ0lmPVwiIXRhYi5oZWFkaW5nSXNUZW1wbGF0ZVwiPlxuXHRcdFx0XHRcdFx0XHR7eyB0YWIuaGVhZGluZyB9fVxuXHRcdFx0XHRcdFx0PC9uZy1jb250YWluZXI+XG5cdFx0XHRcdFx0XHQ8bmctdGVtcGxhdGVcblx0XHRcdFx0XHRcdFx0Km5nSWY9XCJ0YWIuaGVhZGluZ0lzVGVtcGxhdGVcIlxuXHRcdFx0XHRcdFx0XHRbbmdUZW1wbGF0ZU91dGxldF09XCJ0YWIuaGVhZGluZ1wiXG5cdFx0XHRcdFx0XHRcdFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7JGltcGxpY2l0OiB0YWIuY29udGV4dH1cIj5cblx0XHRcdFx0XHRcdDwvbmctdGVtcGxhdGU+XG5cdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdDwvbGk+XG5cdFx0XHRcdDxsaSByb2xlPVwicHJlc2VudGF0aW9uXCI+XG5cdFx0XHRcdFx0PG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbnRlbnRBZnRlclwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImNvbnRlbnRBZnRlclwiPjwvbmctY29udGFpbmVyPlxuXHRcdFx0XHQ8L2xpPlxuXHRcdFx0PC91bD5cblx0XHRcdDxkaXYgKm5nSWY9XCIhcmlnaHRPdmVyZmxvd05hdkJ1dHRvbkhpZGRlblwiIGNsYXNzPVwiYngtLXRhYnNfX292ZXJmbG93LWluZGljYXRvci0tcmlnaHRcIj48L2Rpdj5cblx0XHRcdDxidXR0b25cblx0XHRcdFx0I3JpZ2h0T3ZlcmZsb3dOYXZCdXR0b25cblx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXG5cdFx0XHRcdFt0aXRsZV09XCJ0cmFuc2xhdGlvbnMuTkVYVFwiXG5cdFx0XHRcdFtuZ0NsYXNzXT1cIntcblx0XHRcdFx0XHQnYngtLXRhYi0tb3ZlcmZsb3ctbmF2LWJ1dHRvbic6IGhhc0hvcml6b250YWxPdmVyZmxvdyxcblx0XHRcdFx0XHQnYngtLXRhYi0tb3ZlcmZsb3ctbmF2LWJ1dHRvbi0taGlkZGVuJzogcmlnaHRPdmVyZmxvd05hdkJ1dHRvbkhpZGRlblxuXHRcdFx0XHR9XCJcblx0XHRcdFx0KGNsaWNrKT1cImhhbmRsZU92ZXJmbG93TmF2Q2xpY2soMSlcIlxuXHRcdFx0XHQobW91c2Vkb3duKT1cImhhbmRsZU92ZXJmbG93TmF2TW91c2VEb3duKDEpXCJcblx0XHRcdFx0KG1vdXNldXApPVwiaGFuZGxlT3ZlcmZsb3dOYXZNb3VzZVVwKClcIj5cblx0XHRcdFx0PHN2Z1xuXHRcdFx0XHRcdGZvY3VzYWJsZT1cImZhbHNlXCJcblx0XHRcdFx0XHRwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiXG5cdFx0XHRcdFx0eG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG5cdFx0XHRcdFx0ZmlsbD1cImN1cnJlbnRDb2xvclwiXG5cdFx0XHRcdFx0d2lkdGg9XCIxNlwiXG5cdFx0XHRcdFx0aGVpZ2h0PVwiMTZcIlxuXHRcdFx0XHRcdHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuXHRcdFx0XHRcdGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuXHRcdFx0XHRcdDxwYXRoIGQ9XCJNMTEgOEw2IDEzIDUuMyAxMi4zIDkuNiA4IDUuMyAzLjcgNiAzelwiPjwvcGF0aD5cblx0XHRcdFx0PC9zdmc+XG5cdFx0XHQ8L2J1dHRvbj5cblx0XHQ8L25hdj5cblx0YFxufSlcblxuZXhwb3J0IGNsYXNzIFRhYkhlYWRlcnMgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkNoYW5nZXMsIE9uSW5pdCB7XG5cdC8qKlxuXHQgKiBMaXN0IG9mIGBUYWJgIGNvbXBvbmVudHMuXG5cdCAqL1xuXHQvLyBkaXNhYmxlIHRoZSBuZXh0IGxpbmUgYmVjYXVzZSB3ZSBuZWVkIHRvIHJlbmFtZSB0aGUgaW5wdXRcblx0Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG5cdEBJbnB1dChcInRhYnNcIikgdGFiSW5wdXQ6IFF1ZXJ5TGlzdDxUYWI+O1xuXHQvKipcblx0ICogU2V0IHRvICd0cnVlJyB0byBoYXZlIGBUYWJgIGl0ZW1zIGNhY2hlZCBhbmQgbm90IHJlbG9hZGVkIG9uIHRhYiBzd2l0Y2hpbmcuXG5cdCAqIER1cGxpY2F0ZSBmcm9tIGBuLXRhYnNgIHRvIHN1cHBvcnQgc3RhbmRhbG9uZSBoZWFkZXJzXG5cdCAqL1xuXHRASW5wdXQoKSBjYWNoZUFjdGl2ZSA9IGZhbHNlO1xuXHQvKipcblx0ICogU2V0IHRvICd0cnVlJyB0byBoYXZlIHRhYnMgYXV0b21hdGljYWxseSBhY3RpdmF0ZWQgYW5kIGhhdmUgdGhlaXIgY29udGVudCBkaXNwbGF5ZWQgd2hlbiB0aGV5IHJlY2VpdmUgZm9jdXMuXG5cdCAqL1xuXHRASW5wdXQoKSBmb2xsb3dGb2N1czogYm9vbGVhbjtcblx0LyoqXG5cdCAqIFNldCB0byBgdHJ1ZWAgdG8gcHV0IHRhYnMgaW4gYSBsb2FkaW5nIHN0YXRlLlxuXHQgKi9cblx0QElucHV0KCkgc2tlbGV0b24gPSBmYWxzZTtcblx0LyoqXG5cdCAqIFNldHMgdGhlIGFyaWEgbGFiZWwgb24gdGhlIG5hdiBlbGVtZW50LlxuXHQgKi9cblx0QElucHV0KCkgYXJpYUxhYmVsOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBhcmlhIGxhYmVsbGVkYnkgb24gdGhlIG5hdiBlbGVtZW50LlxuXHQgKi9cblx0QElucHV0KCkgYXJpYUxhYmVsbGVkYnk6IHN0cmluZztcblxuXHRASW5wdXQoKSBjb250ZW50QmVmb3JlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXHRASW5wdXQoKSBjb250ZW50QWZ0ZXI6IFRlbXBsYXRlUmVmPGFueT47XG5cblx0QElucHV0KCkgdHlwZTogXCJkZWZhdWx0XCIgfCBcImNvbnRhaW5lclwiID0gXCJkZWZhdWx0XCI7XG5cblx0QElucHV0KCkgdHJhbnNsYXRpb25zID0gdGhpcy5pMThuLmdldCgpLlBBR0lOQVRJT047XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIFVub3JkZXJlZCBMaXN0IGVsZW1lbnQgdGhhdCBob2xkcyB0aGUgYFRhYmAgaGVhZGluZ3MgZnJvbSB0aGUgdmlldyBET00uXG5cdCAqL1xuXHQvLyBAdHMtaWdub3JlXG5cdEBWaWV3Q2hpbGQoXCJ0YWJMaXN0XCIsIHsgc3RhdGljOiB0cnVlIH0pIGhlYWRlckNvbnRhaW5lcjtcblx0Ly8gQHRzLWlnbm9yZVxuXHRAVmlld0NoaWxkKFwicmlnaHRPdmVyZmxvd05hdkJ1dHRvblwiLCB7IHN0YXRpYzogdHJ1ZSB9KSByaWdodE92ZXJmbG93TmF2QnV0dG9uO1xuXHQvLyBAdHMtaWdub3JlXG5cdEBWaWV3Q2hpbGQoXCJsZWZ0T3ZlcmZsb3dOYXZCdXR0b25cIiwgeyBzdGF0aWM6IHRydWUgfSkgbGVmdE92ZXJmbG93TmF2QnV0dG9uO1xuXHQvKipcblx0ICogQ29udGVudENoaWxkIG9mIGFsbCB0aGUgbi10YWJzXG5cdCAqL1xuXHRAQ29udGVudENoaWxkcmVuKFRhYikgdGFiUXVlcnk6IFF1ZXJ5TGlzdDxUYWI+O1xuXHQvKipcblx0ICogc2V0IHRvIHRhYlF1ZXJ5IGlmIHRhYklucHV0IGlzIGVtcHR5XG5cdCAqL1xuXHRwdWJsaWMgdGFiczogUXVlcnlMaXN0PFRhYj47XG5cdC8qKlxuXHQgKiBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IHZpc2libGUgdGFiLlxuXHQgKi9cblx0cHVibGljIGZpcnN0VmlzaWJsZVRhYiA9IDA7XG5cdC8qKlxuXHQgKiBUaGUgRE9NIGVsZW1lbnQgY29udGFpbmluZyB0aGUgYFRhYmAgaGVhZGluZ3MgZGlzcGxheWVkLlxuXHQgKi9cblx0QFZpZXdDaGlsZHJlbihcInRhYkl0ZW1cIikgYWxsVGFiSGVhZGVyczogUXVlcnlMaXN0PEVsZW1lbnRSZWY+O1xuXHQvKipcblx0ICogQ29udHJvbHMgdGhlIG1hbnVhbCBmb2N1c2luZyBkb25lIGJ5IHRhYmJpbmcgdGhyb3VnaCBoZWFkaW5ncy5cblx0ICovXG5cdHB1YmxpYyBjdXJyZW50U2VsZWN0ZWRUYWI6IG51bWJlcjtcblxuXHRwdWJsaWMgZ2V0IGhhc0hvcml6b250YWxPdmVyZmxvdygpIHtcblx0XHRjb25zdCB0YWJMaXN0ID0gdGhpcy5oZWFkZXJDb250YWluZXIubmF0aXZlRWxlbWVudDtcblx0XHRyZXR1cm4gdGFiTGlzdC5zY3JvbGxXaWR0aCA+IHRhYkxpc3QuY2xpZW50V2lkdGg7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IGxlZnRPdmVyZmxvd05hdkJ1dHRvbkhpZGRlbigpIHtcblx0XHRjb25zdCB0YWJMaXN0ID0gdGhpcy5oZWFkZXJDb250YWluZXIubmF0aXZlRWxlbWVudDtcblx0XHRyZXR1cm4gIXRoaXMuaGFzSG9yaXpvbnRhbE92ZXJmbG93IHx8ICF0YWJMaXN0LnNjcm9sbExlZnQ7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IHJpZ2h0T3ZlcmZsb3dOYXZCdXR0b25IaWRkZW4oKSB7XG5cdFx0Y29uc3QgdGFiTGlzdCA9IHRoaXMuaGVhZGVyQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQ7XG5cdFx0cmV0dXJuICF0aGlzLmhhc0hvcml6b250YWxPdmVyZmxvdyB8fFxuXHRcdFx0KHRhYkxpc3Quc2Nyb2xsTGVmdCArIHRhYkxpc3QuY2xpZW50V2lkdGgpID09PSB0YWJMaXN0LnNjcm9sbFdpZHRoO1xuXHR9XG5cblx0Ly8gd2lkdGggb2YgdGhlIG92ZXJmbG93IGJ1dHRvbnNcblx0T1ZFUkZMT1dfQlVUVE9OX09GRlNFVCA9IDQwO1xuXG5cdHByaXZhdGUgb3ZlcmZsb3dOYXZJbnRlcnZhbDtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZixcblx0XHRwcm90ZWN0ZWQgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuXHRcdHByb3RlY3RlZCBldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZSxcblx0XHRwcm90ZWN0ZWQgaTE4bjogSTE4blxuXHQpIHsgfVxuXG5cdC8vIGtleWJvYXJkIGFjY2Vzc2liaWxpdHlcblx0LyoqXG5cdCAqIENvbnRyb2xzIHRoZSBrZXlkb3duIGV2ZW50cyB1c2VkIGZvciB0YWJiaW5nIHRocm91Z2ggdGhlIGhlYWRpbmdzLlxuXHQgKi9cblx0QEhvc3RMaXN0ZW5lcihcImtleWRvd25cIiwgW1wiJGV2ZW50XCJdKVxuXHRrZXlib2FyZElucHV0KGV2ZW50KSB7XG5cdFx0bGV0IHRhYnNBcnJheSA9IEFycmF5LmZyb208YW55Pih0aGlzLnRhYnMpO1xuXG5cdFx0Ly8gXCJSaWdodFwiIGlzIGFuIGllMTEgc3BlY2lmaWMgdmFsdWVcblx0XHRpZiAoZXZlbnQua2V5ID09PSBcIlJpZ2h0XCIgfHwgZXZlbnQua2V5ID09PSBcIkFycm93UmlnaHRcIikge1xuXHRcdFx0aWYgKHRoaXMuY3VycmVudFNlbGVjdGVkVGFiIDwgdGhpcy5hbGxUYWJIZWFkZXJzLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0aWYgKHRoaXMuZm9sbG93Rm9jdXMpIHtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdFRhYihldmVudC50YXJnZXQsIHRhYnNBcnJheVt0aGlzLmN1cnJlbnRTZWxlY3RlZFRhYiArIDFdLCB0aGlzLmN1cnJlbnRTZWxlY3RlZFRhYik7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5hbGxUYWJIZWFkZXJzLnRvQXJyYXkoKVt0aGlzLmN1cnJlbnRTZWxlY3RlZFRhYiArIDFdLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGlmICh0aGlzLmZvbGxvd0ZvY3VzKSB7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RUYWIoZXZlbnQudGFyZ2V0LCB0YWJzQXJyYXlbMF0sIDApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYWxsVGFiSGVhZGVycy5maXJzdC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gXCJMZWZ0XCIgaXMgYW4gaWUxMSBzcGVjaWZpYyB2YWx1ZVxuXHRcdGlmIChldmVudC5rZXkgPT09IFwiTGVmdFwiIHx8IGV2ZW50LmtleSA9PT0gXCJBcnJvd0xlZnRcIikge1xuXHRcdFx0aWYgKHRoaXMuY3VycmVudFNlbGVjdGVkVGFiID4gMCkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRpZiAodGhpcy5mb2xsb3dGb2N1cykge1xuXHRcdFx0XHRcdHRoaXMuc2VsZWN0VGFiKGV2ZW50LnRhcmdldCwgdGFic0FycmF5W3RoaXMuY3VycmVudFNlbGVjdGVkVGFiIC0gMV0sIHRoaXMuY3VycmVudFNlbGVjdGVkVGFiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmFsbFRhYkhlYWRlcnMudG9BcnJheSgpW3RoaXMuY3VycmVudFNlbGVjdGVkVGFiIC0gMV0ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0aWYgKHRoaXMuZm9sbG93Rm9jdXMpIHtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdFRhYihldmVudC50YXJnZXQsIHRhYnNBcnJheVt0aGlzLmFsbFRhYkhlYWRlcnMubGVuZ3RoIC0gMV0sIHRoaXMuYWxsVGFiSGVhZGVycy5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYWxsVGFiSGVhZGVycy50b0FycmF5KClbdGhpcy5hbGxUYWJIZWFkZXJzLmxlbmd0aCAtIDFdLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZXZlbnQua2V5ID09PSBcIkhvbWVcIikge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGlmICh0aGlzLmZvbGxvd0ZvY3VzKSB7XG5cdFx0XHRcdHRoaXMuc2VsZWN0VGFiKGV2ZW50LnRhcmdldCwgdGFic0FycmF5WzBdLCAwKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuYWxsVGFiSGVhZGVycy50b0FycmF5KClbMF0ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHRcdH1cblxuXHRcdGlmIChldmVudC5rZXkgPT09IFwiRW5kXCIpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRpZiAodGhpcy5mb2xsb3dGb2N1cykge1xuXHRcdFx0XHR0aGlzLnNlbGVjdFRhYihldmVudC50YXJnZXQsIHRhYnNBcnJheVt0aGlzLmFsbFRhYkhlYWRlcnMubGVuZ3RoIC0gMV0sIHRoaXMuYWxsVGFiSGVhZGVycy5sZW5ndGgpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5hbGxUYWJIZWFkZXJzLnRvQXJyYXkoKVt0aGlzLmFsbFRhYkhlYWRlcnMubGVuZ3RoIC0gMV0ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHRcdH1cblxuXHRcdC8vIGBcIlNwYWNlYmFyXCJgIGlzIElFMTEgc3BlY2lmaWMgdmFsdWVcblx0XHRpZiAoKGV2ZW50LmtleSA9PT0gXCIgXCIgfHwgZXZlbnQua2V5ID09PSBcIlNwYWNlYmFyXCIpICYmICF0aGlzLmZvbGxvd0ZvY3VzKSB7XG5cdFx0XHR0aGlzLnNlbGVjdFRhYihldmVudC50YXJnZXQsIHRhYnNBcnJheVt0aGlzLmN1cnJlbnRTZWxlY3RlZFRhYl0sIHRoaXMuY3VycmVudFNlbGVjdGVkVGFiKTtcblx0XHR9XG5cdH1cblxuXHRuZ09uSW5pdCgpIHtcblx0XHR0aGlzLmV2ZW50U2VydmljZS5vbih3aW5kb3cgYXMgYW55LCBcInJlc2l6ZVwiLCAoKSA9PiB0aGlzLmhhbmRsZVNjcm9sbCgpKTtcblx0fVxuXG5cdG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcblx0XHRpZiAoIXRoaXMudGFiSW5wdXQpIHtcblx0XHRcdHRoaXMudGFicyA9IHRoaXMudGFiUXVlcnk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMudGFicyA9IHRoaXMudGFiSW5wdXQ7XG5cdFx0fVxuXG5cdFx0dGhpcy50YWJzLmZvckVhY2godGFiID0+IHRhYi5jYWNoZUFjdGl2ZSA9IHRoaXMuY2FjaGVBY3RpdmUpO1xuXHRcdHRoaXMudGFicy5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG5cdFx0XHR0aGlzLnNldEZpcnN0VGFiKCk7XG5cdFx0fSk7XG5cdFx0dGhpcy5zZXRGaXJzdFRhYigpO1xuXHR9XG5cblx0bmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuXHRcdGlmICh0aGlzLnRhYnMgJiYgY2hhbmdlcy5jYWNoZUFjdGl2ZSkge1xuXHRcdFx0dGhpcy50YWJzLmZvckVhY2godGFiID0+IHRhYi5jYWNoZUFjdGl2ZSA9IHRoaXMuY2FjaGVBY3RpdmUpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDb250cm9scyBtYW51YWxseSBmb2N1c2luZyB0YWJzLlxuXHQgKi9cblx0cHVibGljIG9uVGFiRm9jdXMocmVmOiBIVE1MRWxlbWVudCwgaW5kZXg6IG51bWJlcikge1xuXHRcdHRoaXMuY3VycmVudFNlbGVjdGVkVGFiID0gaW5kZXg7XG5cdFx0Ly8gcmVzZXQgc2Nyb2xsIGxlZnQgYmVjYXVzZSB3ZSdyZSBhbHJlYWR5IGhhbmRsaW5nIGl0XG5cdFx0dGhpcy5oZWFkZXJDb250YWluZXIubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50LnNjcm9sbExlZnQgPSAwO1xuXHR9XG5cblx0cHVibGljIGdldFNlbGVjdGVkVGFiKCk6IGFueSB7XG5cdFx0Y29uc3Qgc2VsZWN0ZWQgPSB0aGlzLnRhYnMuZmluZCh0YWIgPT4gdGFiLmFjdGl2ZSk7XG5cdFx0aWYgKHNlbGVjdGVkKSB7XG5cdFx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdFx0fVxuXHRcdHJldHVybiB7IGhlYWRpbmdJc1RlbXBsYXRlOiBmYWxzZSwgaGVhZGluZzogXCJcIiB9O1xuXHR9XG5cblx0LyoqXG5cdCAqIFNlbGVjdHMgYFRhYmAgJ3RhYicgYW5kIG1vdmVzIGl0IGludG8gdmlldyBvbiB0aGUgdmlldyBET00gaWYgaXQgaXMgbm90IGFscmVhZHkuXG5cdCAqL1xuXHRwdWJsaWMgc2VsZWN0VGFiKHJlZjogSFRNTEVsZW1lbnQsIHRhYjogVGFiLCB0YWJJbmRleDogbnVtYmVyKSB7XG5cdFx0aWYgKHRhYi5kaXNhYmxlZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuY3VycmVudFNlbGVjdGVkVGFiID0gdGFiSW5kZXg7XG5cdFx0dGhpcy50YWJzLmZvckVhY2goX3RhYiA9PiBfdGFiLmFjdGl2ZSA9IGZhbHNlKTtcblx0XHR0YWIuYWN0aXZlID0gdHJ1ZTtcblx0XHR0YWIuZG9TZWxlY3QoKTtcblx0fVxuXG5cdHB1YmxpYyBoYW5kbGVTY3JvbGwoKSB7XG5cdFx0dGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcblx0fVxuXG5cdHB1YmxpYyBoYW5kbGVPdmVyZmxvd05hdkNsaWNrKGRpcmVjdGlvbjogbnVtYmVyLCBtdWx0aXBsaWVyID0gMTUpIHtcblx0XHRjb25zdCB0YWJMaXN0ID0gdGhpcy5oZWFkZXJDb250YWluZXIubmF0aXZlRWxlbWVudDtcblxuXHRcdGNvbnN0IHsgY2xpZW50V2lkdGgsIHNjcm9sbExlZnQsIHNjcm9sbFdpZHRoIH0gPSB0YWJMaXN0O1xuXHRcdGlmIChkaXJlY3Rpb24gPT09IDEgJiYgIXNjcm9sbExlZnQpIHtcblx0XHRcdHRhYkxpc3Quc2Nyb2xsTGVmdCArPSB0aGlzLk9WRVJGTE9XX0JVVFRPTl9PRkZTRVQ7XG5cdFx0fVxuXG5cdFx0dGFiTGlzdC5zY3JvbGxMZWZ0ICs9IGRpcmVjdGlvbiAqIG11bHRpcGxpZXI7XG5cblx0XHRjb25zdCBsZWZ0RWRnZVJlYWNoZWQgPVxuXHRcdFx0ZGlyZWN0aW9uID09PSAtMSAmJiBzY3JvbGxMZWZ0IDwgdGhpcy5PVkVSRkxPV19CVVRUT05fT0ZGU0VUO1xuXHRcdGNvbnN0IHJpZ2h0RWRnZVJlYWNoZWQgPVxuXHRcdFx0ZGlyZWN0aW9uID09PSAxICYmXG5cdFx0XHRzY3JvbGxMZWZ0ICsgY2xpZW50V2lkdGggPj0gc2Nyb2xsV2lkdGggLSB0aGlzLk9WRVJGTE9XX0JVVFRPTl9PRkZTRVQ7XG5cblx0XHRpZiAobGVmdEVkZ2VSZWFjaGVkKSB7XG5cdFx0XHR0aGlzLnJpZ2h0T3ZlcmZsb3dOYXZCdXR0b24ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHRcdH1cblx0XHRpZiAocmlnaHRFZGdlUmVhY2hlZCkge1xuXHRcdFx0dGhpcy5sZWZ0T3ZlcmZsb3dOYXZCdXR0b24ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBoYW5kbGVPdmVyZmxvd05hdk1vdXNlRG93bihkaXJlY3Rpb246IG51bWJlcikge1xuXHRcdGNvbnN0IHRhYkxpc3QgPSB0aGlzLmhlYWRlckNvbnRhaW5lci5uYXRpdmVFbGVtZW50O1xuXG5cdFx0dGhpcy5vdmVyZmxvd05hdkludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0Y29uc3QgeyBjbGllbnRXaWR0aCwgc2Nyb2xsTGVmdCwgc2Nyb2xsV2lkdGggfSA9IHRhYkxpc3Q7XG5cblx0XHRcdC8vIGNsZWFyIGludGVydmFsIGlmIHNjcm9sbCByZWFjaGVzIGxlZnQgb3IgcmlnaHQgZWRnZVxuXHRcdFx0Y29uc3QgbGVmdEVkZ2VSZWFjaGVkID0gZGlyZWN0aW9uID09PSAtMSAmJiBzY3JvbGxMZWZ0IDwgdGhpcy5PVkVSRkxPV19CVVRUT05fT0ZGU0VUO1xuXHRcdFx0Y29uc3QgcmlnaHRFZGdlUmVhY2hlZCA9XG5cdFx0XHRcdGRpcmVjdGlvbiA9PT0gMSAmJlxuXHRcdFx0XHRzY3JvbGxMZWZ0ICsgY2xpZW50V2lkdGggPj0gc2Nyb2xsV2lkdGggLSB0aGlzLk9WRVJGTE9XX0JVVFRPTl9PRkZTRVQ7XG5cblx0XHRcdGlmIChsZWZ0RWRnZVJlYWNoZWQgfHwgcmlnaHRFZGdlUmVhY2hlZCkge1xuXHRcdFx0XHRjbGVhckludGVydmFsKHRoaXMub3ZlcmZsb3dOYXZJbnRlcnZhbCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGFjY291bnQgZm9yIG92ZXJmbG93IGJ1dHRvbiBhcHBlYXJpbmcgYW5kIGNhdXNpbmcgdGFibGlzdCB3aWR0aCBjaGFuZ2Vcblx0XHRcdHRoaXMuaGFuZGxlT3ZlcmZsb3dOYXZDbGljayhkaXJlY3Rpb24pO1xuXHRcdH0pO1xuXHR9XG5cblx0cHVibGljIGhhbmRsZU92ZXJmbG93TmF2TW91c2VVcCgpIHtcblx0XHRjbGVhckludGVydmFsKHRoaXMub3ZlcmZsb3dOYXZJbnRlcnZhbCk7XG5cdH1cblxuXHQvKipcblx0ICogRGV0ZXJtaW5lcyB3aGljaCBgVGFiYCBpcyBpbml0aWFsbHkgc2VsZWN0ZWQuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgc2V0Rmlyc3RUYWIoKSB7XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRsZXQgZmlyc3RUYWIgPSB0aGlzLnRhYnMuZmluZCh0YWIgPT4gdGFiLmFjdGl2ZSk7XG5cdFx0XHRpZiAoIWZpcnN0VGFiICYmIHRoaXMudGFicy5maXJzdCkge1xuXHRcdFx0XHRmaXJzdFRhYiA9IHRoaXMudGFicy5maXJzdDtcblx0XHRcdFx0Zmlyc3RUYWIuYWN0aXZlID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGlmIChmaXJzdFRhYikge1xuXHRcdFx0XHRmaXJzdFRhYi5kb1NlbGVjdCgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG4iXX0=