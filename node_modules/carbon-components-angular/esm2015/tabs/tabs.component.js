/**
 *
 * carbon-angular v0.0.0 | tabs.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, ContentChildren, QueryList, ContentChild } from "@angular/core";
import { Tab } from "./tab.component";
import { TabHeaders } from "./tab-headers.component";
/**
 * Build out your application's tabs using this component.
 * This is the parent of the `Tab` and `TabHeader` components.
 *
 * [See demo](../../?path=/story/components-tabs--basic)
 *
 * `Tabs` expects a set of `n-tab` elements
 *
 * ```html
 * <ibm-tabs>
 * 	<ibm-tab heading='tab1'>
 * 		tab 1 content
 * 	</ibm-tab>
 * 	<ibm-tab heading='tab1'>
 * 		tab 2 content
 * 	</ibm-tab>
 * 	<!-- ... -->
 * 	<ibm-tab heading='tab1'>
 * 		tab n content
 * 	</ibm-tab>
 * </ibm-tabs>
 * ```
 *
 * <example-url>../../iframe.html?id=components-tabs--basic</example-url>
 */
export class Tabs {
    constructor() {
        /**
         * Takes either the string value 'top' or 'bottom' to place TabHeader
         * relative to the `TabPanel`s.
         */
        this.position = "top";
        /**
         * Set to 'true' to have `Tab` items cached and not reloaded on tab switching.
         */
        this.cacheActive = false;
        /**
         * Set to 'true' to have tabs automatically activated and have their content displayed when they receive focus.
         */
        this.followFocus = true;
        /**
         * Set to `true` to put tabs in a loading state.
         */
        this.skeleton = false;
        /**
         * Set to `true` to have the tabIndex of the all tabpanels be -1.
         */
        this.isNavigation = false;
        /**
         * Sets the type of the `TabHeader`s
         */
        this.type = "default";
    }
    /**
     * After content is initialized update `Tab`s to cache (if turned on) and set the initial
     * selected Tab item.
     */
    ngAfterContentInit() {
        if (this.tabHeaders) {
            this.tabHeaders.cacheActive = this.cacheActive;
        }
        this.tabs.forEach(tab => {
            tab.tabIndex = this.isNavigation ? null : 0;
        });
    }
    ngOnChanges(changes) {
        if (this.tabHeaders && changes.cacheActive) {
            this.tabHeaders.cacheActive = this.cacheActive;
        }
        if (this.tabs && changes.isNavigation) {
            this.tabs.forEach(tab => {
                tab.tabIndex = this.isNavigation ? null : 0;
            });
        }
    }
    /**
     * true if the n-tab's are passed directly to the component as children
     */
    hasTabHeaders() {
        return this.tabs.length > 0;
    }
}
Tabs.decorators = [
    { type: Component, args: [{
                selector: "ibm-tabs",
                template: `
			<ibm-tab-headers
				*ngIf="hasTabHeaders() && position === 'top'"
				[skeleton]="skeleton"
				[tabs]="tabs"
				[followFocus]="followFocus"
				[cacheActive]="cacheActive"
				[contentBefore]="before"
				[contentAfter]="after"
				[ariaLabel]="ariaLabel"
				[ariaLabelledby]="ariaLabelledby"
				[type]="type">
			</ibm-tab-headers>
			<ng-content></ng-content>
			<ng-template #before>
				<ng-content select="[before]"></ng-content>
			</ng-template>
			<ng-template #after>
				<ng-content select="[after]"></ng-content>
			</ng-template>
			<ibm-tab-headers
				*ngIf="hasTabHeaders() && position === 'bottom'"
				[skeleton]="skeleton"
				[tabs]="tabs"
				[cacheActive]="cacheActive"
				[type]="type">
			</ibm-tab-headers>
	`
            }] }
];
Tabs.propDecorators = {
    position: [{ type: Input }],
    cacheActive: [{ type: Input }],
    followFocus: [{ type: Input }],
    skeleton: [{ type: Input }],
    isNavigation: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    ariaLabelledby: [{ type: Input }],
    type: [{ type: Input }],
    tabs: [{ type: ContentChildren, args: [Tab, { descendants: false },] }],
    tabHeaders: [{ type: ContentChild, args: [TabHeaders, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3RhYnMvIiwic291cmNlcyI6WyJ0YWJzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxlQUFlLEVBQ2YsU0FBUyxFQUVULFlBQVksRUFHWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBR3JEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3Qkc7QUFnQ0gsTUFBTSxPQUFPLElBQUk7SUEvQmpCO1FBZ0NDOzs7V0FHRztRQUNNLGFBQVEsR0FBcUIsS0FBSyxDQUFDO1FBQzVDOztXQUVHO1FBQ00sZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFDN0I7O1dBRUc7UUFDTSxnQkFBVyxHQUFHLElBQUksQ0FBQztRQUM1Qjs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDMUI7O1dBRUc7UUFDTSxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQVM5Qjs7V0FFRztRQUNNLFNBQUksR0FBNEIsU0FBUyxDQUFDO0lBNENwRCxDQUFDO0lBaENBOzs7T0FHRztJQUNILGtCQUFrQjtRQUNqQixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUMvQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2pDLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsV0FBVyxFQUFFO1lBQzNDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDL0M7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRTtZQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDdkIsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxDQUFDLENBQUMsQ0FBQztTQUNIO0lBQ0YsQ0FBQztJQUVEOztPQUVHO0lBQ0gsYUFBYTtRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUM7OztZQTNHRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMkJUO2FBQ0Q7Ozt1QkFNQyxLQUFLOzBCQUlMLEtBQUs7MEJBSUwsS0FBSzt1QkFJTCxLQUFLOzJCQUlMLEtBQUs7d0JBSUwsS0FBSzs2QkFJTCxLQUFLO21CQUlMLEtBQUs7bUJBS0wsZUFBZSxTQUFDLEdBQUcsRUFBRSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUU7eUJBSzNDLFlBQVksU0FBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0Q29udGVudENoaWxkcmVuLFxuXHRRdWVyeUxpc3QsXG5cdEFmdGVyQ29udGVudEluaXQsXG5cdENvbnRlbnRDaGlsZCxcblx0T25DaGFuZ2VzLFxuXHRTaW1wbGVDaGFuZ2VzXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBUYWIgfSBmcm9tIFwiLi90YWIuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBUYWJIZWFkZXJzIH0gZnJvbSBcIi4vdGFiLWhlYWRlcnMuY29tcG9uZW50XCI7XG5cblxuLyoqXG4gKiBCdWlsZCBvdXQgeW91ciBhcHBsaWNhdGlvbidzIHRhYnMgdXNpbmcgdGhpcyBjb21wb25lbnQuXG4gKiBUaGlzIGlzIHRoZSBwYXJlbnQgb2YgdGhlIGBUYWJgIGFuZCBgVGFiSGVhZGVyYCBjb21wb25lbnRzLlxuICpcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NvbXBvbmVudHMtdGFicy0tYmFzaWMpXG4gKlxuICogYFRhYnNgIGV4cGVjdHMgYSBzZXQgb2YgYG4tdGFiYCBlbGVtZW50c1xuICpcbiAqIGBgYGh0bWxcbiAqIDxpYm0tdGFicz5cbiAqIFx0PGlibS10YWIgaGVhZGluZz0ndGFiMSc+XG4gKiBcdFx0dGFiIDEgY29udGVudFxuICogXHQ8L2libS10YWI+XG4gKiBcdDxpYm0tdGFiIGhlYWRpbmc9J3RhYjEnPlxuICogXHRcdHRhYiAyIGNvbnRlbnRcbiAqIFx0PC9pYm0tdGFiPlxuICogXHQ8IS0tIC4uLiAtLT5cbiAqIFx0PGlibS10YWIgaGVhZGluZz0ndGFiMSc+XG4gKiBcdFx0dGFiIG4gY29udGVudFxuICogXHQ8L2libS10YWI+XG4gKiA8L2libS10YWJzPlxuICogYGBgXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtdGFicy0tYmFzaWM8L2V4YW1wbGUtdXJsPlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLXRhYnNcIixcblx0dGVtcGxhdGU6IGBcblx0XHRcdDxpYm0tdGFiLWhlYWRlcnNcblx0XHRcdFx0Km5nSWY9XCJoYXNUYWJIZWFkZXJzKCkgJiYgcG9zaXRpb24gPT09ICd0b3AnXCJcblx0XHRcdFx0W3NrZWxldG9uXT1cInNrZWxldG9uXCJcblx0XHRcdFx0W3RhYnNdPVwidGFic1wiXG5cdFx0XHRcdFtmb2xsb3dGb2N1c109XCJmb2xsb3dGb2N1c1wiXG5cdFx0XHRcdFtjYWNoZUFjdGl2ZV09XCJjYWNoZUFjdGl2ZVwiXG5cdFx0XHRcdFtjb250ZW50QmVmb3JlXT1cImJlZm9yZVwiXG5cdFx0XHRcdFtjb250ZW50QWZ0ZXJdPVwiYWZ0ZXJcIlxuXHRcdFx0XHRbYXJpYUxhYmVsXT1cImFyaWFMYWJlbFwiXG5cdFx0XHRcdFthcmlhTGFiZWxsZWRieV09XCJhcmlhTGFiZWxsZWRieVwiXG5cdFx0XHRcdFt0eXBlXT1cInR5cGVcIj5cblx0XHRcdDwvaWJtLXRhYi1oZWFkZXJzPlxuXHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdFx0PG5nLXRlbXBsYXRlICNiZWZvcmU+XG5cdFx0XHRcdDxuZy1jb250ZW50IHNlbGVjdD1cIltiZWZvcmVdXCI+PC9uZy1jb250ZW50PlxuXHRcdFx0PC9uZy10ZW1wbGF0ZT5cblx0XHRcdDxuZy10ZW1wbGF0ZSAjYWZ0ZXI+XG5cdFx0XHRcdDxuZy1jb250ZW50IHNlbGVjdD1cIlthZnRlcl1cIj48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8L25nLXRlbXBsYXRlPlxuXHRcdFx0PGlibS10YWItaGVhZGVyc1xuXHRcdFx0XHQqbmdJZj1cImhhc1RhYkhlYWRlcnMoKSAmJiBwb3NpdGlvbiA9PT0gJ2JvdHRvbSdcIlxuXHRcdFx0XHRbc2tlbGV0b25dPVwic2tlbGV0b25cIlxuXHRcdFx0XHRbdGFic109XCJ0YWJzXCJcblx0XHRcdFx0W2NhY2hlQWN0aXZlXT1cImNhY2hlQWN0aXZlXCJcblx0XHRcdFx0W3R5cGVdPVwidHlwZVwiPlxuXHRcdFx0PC9pYm0tdGFiLWhlYWRlcnM+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgVGFicyBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcyB7XG5cdC8qKlxuXHQgKiBUYWtlcyBlaXRoZXIgdGhlIHN0cmluZyB2YWx1ZSAndG9wJyBvciAnYm90dG9tJyB0byBwbGFjZSBUYWJIZWFkZXJcblx0ICogcmVsYXRpdmUgdG8gdGhlIGBUYWJQYW5lbGBzLlxuXHQgKi9cblx0QElucHV0KCkgcG9zaXRpb246IFwidG9wXCIgfCBcImJvdHRvbVwiID0gXCJ0b3BcIjtcblx0LyoqXG5cdCAqIFNldCB0byAndHJ1ZScgdG8gaGF2ZSBgVGFiYCBpdGVtcyBjYWNoZWQgYW5kIG5vdCByZWxvYWRlZCBvbiB0YWIgc3dpdGNoaW5nLlxuXHQgKi9cblx0QElucHV0KCkgY2FjaGVBY3RpdmUgPSBmYWxzZTtcblx0LyoqXG5cdCAqIFNldCB0byAndHJ1ZScgdG8gaGF2ZSB0YWJzIGF1dG9tYXRpY2FsbHkgYWN0aXZhdGVkIGFuZCBoYXZlIHRoZWlyIGNvbnRlbnQgZGlzcGxheWVkIHdoZW4gdGhleSByZWNlaXZlIGZvY3VzLlxuXHQgKi9cblx0QElucHV0KCkgZm9sbG93Rm9jdXMgPSB0cnVlO1xuXHQvKipcblx0ICogU2V0IHRvIGB0cnVlYCB0byBwdXQgdGFicyBpbiBhIGxvYWRpbmcgc3RhdGUuXG5cdCAqL1xuXHRASW5wdXQoKSBza2VsZXRvbiA9IGZhbHNlO1xuXHQvKipcblx0ICogU2V0IHRvIGB0cnVlYCB0byBoYXZlIHRoZSB0YWJJbmRleCBvZiB0aGUgYWxsIHRhYnBhbmVscyBiZSAtMS5cblx0ICovXG5cdEBJbnB1dCgpIGlzTmF2aWdhdGlvbiA9IGZhbHNlO1xuXHQvKipcblx0ICogU2V0cyB0aGUgYXJpYSBsYWJlbCBvbiB0aGUgYFRhYkhlYWRlcmBzIG5hdiBlbGVtZW50LlxuXHQgKi9cblx0QElucHV0KCkgYXJpYUxhYmVsOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBhcmlhIGxhYmVsbGVkYnkgb24gdGhlIGBUYWJIZWFkZXJgcyBuYXYgZWxlbWVudC5cblx0ICovXG5cdEBJbnB1dCgpIGFyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB0eXBlIG9mIHRoZSBgVGFiSGVhZGVyYHNcblx0ICovXG5cdEBJbnB1dCgpIHR5cGU6IFwiZGVmYXVsdFwiIHwgXCJjb250YWluZXJcIiA9IFwiZGVmYXVsdFwiO1xuXG5cdC8qKlxuXHQgKiBNYWludGFpbnMgYSBgUXVlcnlMaXN0YCBvZiB0aGUgYFRhYmAgZWxlbWVudHMgYW5kIHVwZGF0ZXMgaWYgYFRhYmBzIGFyZSBhZGRlZCBvciByZW1vdmVkLlxuXHQgKi9cblx0QENvbnRlbnRDaGlsZHJlbihUYWIsIHsgZGVzY2VuZGFudHM6IGZhbHNlIH0pIHRhYnM6IFF1ZXJ5TGlzdDxUYWI+O1xuXHQvKipcblx0ICogQ29udGVudCBjaGlsZCBvZiB0aGUgcHJvamVjdGVkIGhlYWRlciBjb21wb25lbnRcblx0ICovXG5cdC8vIEB0cy1pZ25vcmVcblx0QENvbnRlbnRDaGlsZChUYWJIZWFkZXJzLCB7IHN0YXRpYzogZmFsc2UgfSkgdGFiSGVhZGVycztcblxuXHQvKipcblx0ICogQWZ0ZXIgY29udGVudCBpcyBpbml0aWFsaXplZCB1cGRhdGUgYFRhYmBzIHRvIGNhY2hlIChpZiB0dXJuZWQgb24pIGFuZCBzZXQgdGhlIGluaXRpYWxcblx0ICogc2VsZWN0ZWQgVGFiIGl0ZW0uXG5cdCAqL1xuXHRuZ0FmdGVyQ29udGVudEluaXQoKSB7XG5cdFx0aWYgKHRoaXMudGFiSGVhZGVycykge1xuXHRcdFx0dGhpcy50YWJIZWFkZXJzLmNhY2hlQWN0aXZlID0gdGhpcy5jYWNoZUFjdGl2ZTtcblx0XHR9XG5cblx0XHR0aGlzLnRhYnMuZm9yRWFjaCh0YWIgPT4ge1xuXHRcdFx0dGFiLnRhYkluZGV4ID0gdGhpcy5pc05hdmlnYXRpb24gPyBudWxsIDogMDtcblx0XHR9KTtcblx0fVxuXG5cdG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcblx0XHRpZiAodGhpcy50YWJIZWFkZXJzICYmIGNoYW5nZXMuY2FjaGVBY3RpdmUpIHtcblx0XHRcdHRoaXMudGFiSGVhZGVycy5jYWNoZUFjdGl2ZSA9IHRoaXMuY2FjaGVBY3RpdmU7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMudGFicyAmJiBjaGFuZ2VzLmlzTmF2aWdhdGlvbikge1xuXHRcdFx0dGhpcy50YWJzLmZvckVhY2godGFiID0+IHtcblx0XHRcdFx0dGFiLnRhYkluZGV4ID0gdGhpcy5pc05hdmlnYXRpb24gPyBudWxsIDogMDtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiB0cnVlIGlmIHRoZSBuLXRhYidzIGFyZSBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIGNvbXBvbmVudCBhcyBjaGlsZHJlblxuXHQgKi9cblx0aGFzVGFiSGVhZGVycygpIHtcblx0XHRyZXR1cm4gdGhpcy50YWJzLmxlbmd0aCA+IDA7XG5cdH1cbn1cbiJdfQ==