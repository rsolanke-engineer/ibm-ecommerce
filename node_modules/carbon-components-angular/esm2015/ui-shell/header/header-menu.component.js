/**
 *
 * carbon-angular v0.0.0 | header-menu.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostListener, ElementRef, TemplateRef } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
/**
 * Dropdown menu container for navigation items.
 */
export class HeaderMenu {
    constructor(domSanitizer, elementRef) {
        this.domSanitizer = domSanitizer;
        this.elementRef = elementRef;
        this.trigger = "click";
        this.expanded = false;
        this._href = "javascript:void(0)";
    }
    set href(v) {
        // Needed when component is created dynamically with a model.
        if (v === undefined) {
            return;
        }
        this._href = v;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    onClick() {
        if (this.trigger === "click") {
            this.expanded = !this.expanded;
        }
    }
    onMouseOver() {
        if (this.trigger === "mouseover") {
            this.expanded = true;
        }
    }
    onMouseOut() {
        if (this.trigger === "mouseover") {
            this.expanded = false;
        }
    }
    onFocusOut(event) {
        if (!this.elementRef.nativeElement.contains(event.relatedTarget)) {
            this.expanded = false;
        }
    }
}
HeaderMenu.decorators = [
    { type: Component, args: [{
                selector: "ibm-header-menu",
                template: `
		<li
			class="bx--header__submenu"
			style="height: 100%"
			role="menuitem">
			<a
				class="bx--header__menu-item bx--header__menu-title"
				[href]="href"
				tabindex="0"
				aria-haspopup="true"
				[attr.aria-expanded]="expanded">
				{{title}}
				<ng-template *ngIf="icon; else defaultIcon" [ngTemplateOutlet]="icon"></ng-template>
				<ng-template #defaultIcon>
					<svg class="bx--header__menu-arrow" width="12" height="7" aria-hidden="true">
						<path d="M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z" />
					</svg>
				</ng-template>
			</a>
			<ul class="bx--header__menu" role="menu" [attr.aria-label]="title">
				<ng-content></ng-content>
				<ng-container *ngFor="let headerItem of headerItems">
					<ibm-header-item
						[href]="headerItem.href"
						[route]="headerItem.route"
						[routeExtras]="headerItem.routeExtras">
						{{ headerItem.content }}
					</ibm-header-item>
				</ng-container>
			</ul>
		</li>
	`
            }] }
];
/** @nocollapse */
HeaderMenu.ctorParameters = () => [
    { type: DomSanitizer },
    { type: ElementRef }
];
HeaderMenu.propDecorators = {
    title: [{ type: Input }],
    href: [{ type: Input }],
    trigger: [{ type: Input }],
    headerItems: [{ type: Input }],
    icon: [{ type: Input }],
    onClick: [{ type: HostListener, args: ["click",] }],
    onMouseOver: [{ type: HostListener, args: ["mouseover",] }],
    onMouseOut: [{ type: HostListener, args: ["mouseout",] }],
    onFocusOut: [{ type: HostListener, args: ["focusout", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLW1lbnUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci91aS1zaGVsbC8iLCJzb3VyY2VzIjpbImhlYWRlci9oZWFkZXItbWVudS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBQ0wsWUFBWSxFQUNaLFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR3pEOztHQUVHO0FBb0NILE1BQU0sT0FBTyxVQUFVO0lBNkJ0QixZQUFzQixZQUEwQixFQUFZLFVBQXNCO1FBQTVELGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQVksZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQWhCekUsWUFBTyxHQUEwQixPQUFPLENBQUM7UUFZM0MsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVkLFVBQUssR0FBRyxvQkFBb0IsQ0FBQztJQUUrQyxDQUFDO0lBM0J2RixJQUFhLElBQUksQ0FBQyxDQUFTO1FBQzFCLDZEQUE2RDtRQUM3RCxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDcEIsT0FBTztTQUNQO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNQLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFXLENBQUM7SUFDdkUsQ0FBQztJQW9CRCxPQUFPO1FBQ04sSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtZQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUMvQjtJQUNGLENBQUM7SUFHRCxXQUFXO1FBQ1YsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUNyQjtJQUNGLENBQUM7SUFHRCxVQUFVO1FBQ1QsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUN0QjtJQUNGLENBQUM7SUFHRCxVQUFVLENBQUMsS0FBSztRQUNmLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ2pFLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ3RCO0lBQ0YsQ0FBQzs7O1lBNUZELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUErQlQ7YUFDRDs7OztZQXhDUSxZQUFZO1lBSHBCLFVBQVU7OztvQkE2Q1QsS0FBSzttQkFDTCxLQUFLO3NCQVdMLEtBQUs7MEJBS0wsS0FBSzttQkFLTCxLQUFLO3NCQVFMLFlBQVksU0FBQyxPQUFPOzBCQU9wQixZQUFZLFNBQUMsV0FBVzt5QkFPeEIsWUFBWSxTQUFDLFVBQVU7eUJBT3ZCLFlBQVksU0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRIb3N0TGlzdGVuZXIsXG5cdEVsZW1lbnRSZWYsXG5cdFRlbXBsYXRlUmVmXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclwiO1xuaW1wb3J0IHsgSGVhZGVySXRlbUludGVyZmFjZSB9IGZyb20gXCIuL2hlYWRlci1uYXZpZ2F0aW9uLWl0ZW1zLmludGVyZmFjZVwiO1xuXG4vKipcbiAqIERyb3Bkb3duIG1lbnUgY29udGFpbmVyIGZvciBuYXZpZ2F0aW9uIGl0ZW1zLlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLWhlYWRlci1tZW51XCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGxpXG5cdFx0XHRjbGFzcz1cImJ4LS1oZWFkZXJfX3N1Ym1lbnVcIlxuXHRcdFx0c3R5bGU9XCJoZWlnaHQ6IDEwMCVcIlxuXHRcdFx0cm9sZT1cIm1lbnVpdGVtXCI+XG5cdFx0XHQ8YVxuXHRcdFx0XHRjbGFzcz1cImJ4LS1oZWFkZXJfX21lbnUtaXRlbSBieC0taGVhZGVyX19tZW51LXRpdGxlXCJcblx0XHRcdFx0W2hyZWZdPVwiaHJlZlwiXG5cdFx0XHRcdHRhYmluZGV4PVwiMFwiXG5cdFx0XHRcdGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCJcblx0XHRcdFx0W2F0dHIuYXJpYS1leHBhbmRlZF09XCJleHBhbmRlZFwiPlxuXHRcdFx0XHR7e3RpdGxlfX1cblx0XHRcdFx0PG5nLXRlbXBsYXRlICpuZ0lmPVwiaWNvbjsgZWxzZSBkZWZhdWx0SWNvblwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImljb25cIj48L25nLXRlbXBsYXRlPlxuXHRcdFx0XHQ8bmctdGVtcGxhdGUgI2RlZmF1bHRJY29uPlxuXHRcdFx0XHRcdDxzdmcgY2xhc3M9XCJieC0taGVhZGVyX19tZW51LWFycm93XCIgd2lkdGg9XCIxMlwiIGhlaWdodD1cIjdcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cblx0XHRcdFx0XHRcdDxwYXRoIGQ9XCJNNi4wMDIgNS41NUwxMS4yNyAwbC43MjYuNjg1TDYuMDAzIDcgMCAuNjg1LjcyNiAwelwiIC8+XG5cdFx0XHRcdFx0PC9zdmc+XG5cdFx0XHRcdDwvbmctdGVtcGxhdGU+XG5cdFx0XHQ8L2E+XG5cdFx0XHQ8dWwgY2xhc3M9XCJieC0taGVhZGVyX19tZW51XCIgcm9sZT1cIm1lbnVcIiBbYXR0ci5hcmlhLWxhYmVsXT1cInRpdGxlXCI+XG5cdFx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHRcdFx0PG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaGVhZGVySXRlbSBvZiBoZWFkZXJJdGVtc1wiPlxuXHRcdFx0XHRcdDxpYm0taGVhZGVyLWl0ZW1cblx0XHRcdFx0XHRcdFtocmVmXT1cImhlYWRlckl0ZW0uaHJlZlwiXG5cdFx0XHRcdFx0XHRbcm91dGVdPVwiaGVhZGVySXRlbS5yb3V0ZVwiXG5cdFx0XHRcdFx0XHRbcm91dGVFeHRyYXNdPVwiaGVhZGVySXRlbS5yb3V0ZUV4dHJhc1wiPlxuXHRcdFx0XHRcdFx0e3sgaGVhZGVySXRlbS5jb250ZW50IH19XG5cdFx0XHRcdFx0PC9pYm0taGVhZGVyLWl0ZW0+XG5cdFx0XHRcdDwvbmctY29udGFpbmVyPlxuXHRcdFx0PC91bD5cblx0XHQ8L2xpPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIEhlYWRlck1lbnUge1xuXHRASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuXHRASW5wdXQoKSBzZXQgaHJlZih2OiBzdHJpbmcpIHtcblx0XHQvLyBOZWVkZWQgd2hlbiBjb21wb25lbnQgaXMgY3JlYXRlZCBkeW5hbWljYWxseSB3aXRoIGEgbW9kZWwuXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLl9ocmVmID0gdjtcblx0fVxuXG5cdGdldCBocmVmKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0VXJsKHRoaXMuX2hyZWYpIGFzIHN0cmluZztcblx0fVxuXHRASW5wdXQoKSB0cmlnZ2VyOiBcImNsaWNrXCIgfCBcIm1vdXNlb3ZlclwiID0gXCJjbGlja1wiO1xuXG5cdC8qKlxuXHQgKiBVc2VkIHRvIGNyZWF0ZSBoZWFkZXIgaXRlbXMgdGhyb3VnaCBhIG1vZGVsLlxuXHQgKi9cblx0QElucHV0KCkgaGVhZGVySXRlbXM6IEhlYWRlckl0ZW1JbnRlcmZhY2VbXTtcblxuXHQvKipcblx0ICogT3B0aW9uYWwgaWNvblxuXHQgKi9cblx0QElucHV0KCkgaWNvbjogVGVtcGxhdGVSZWY8YW55PjtcblxuXHRwdWJsaWMgZXhwYW5kZWQgPSBmYWxzZTtcblxuXHRwcm90ZWN0ZWQgX2hyZWYgPSBcImphdmFzY3JpcHQ6dm9pZCgwKVwiO1xuXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplciwgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxuXG5cdEBIb3N0TGlzdGVuZXIoXCJjbGlja1wiKVxuXHRvbkNsaWNrKCkge1xuXHRcdGlmICh0aGlzLnRyaWdnZXIgPT09IFwiY2xpY2tcIikge1xuXHRcdFx0dGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuXHRcdH1cblx0fVxuXG5cdEBIb3N0TGlzdGVuZXIoXCJtb3VzZW92ZXJcIilcblx0b25Nb3VzZU92ZXIoKSB7XG5cdFx0aWYgKHRoaXMudHJpZ2dlciA9PT0gXCJtb3VzZW92ZXJcIikge1xuXHRcdFx0dGhpcy5leHBhbmRlZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcihcIm1vdXNlb3V0XCIpXG5cdG9uTW91c2VPdXQoKSB7XG5cdFx0aWYgKHRoaXMudHJpZ2dlciA9PT0gXCJtb3VzZW92ZXJcIikge1xuXHRcdFx0dGhpcy5leHBhbmRlZCA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdEBIb3N0TGlzdGVuZXIoXCJmb2N1c291dFwiLCBbXCIkZXZlbnRcIl0pXG5cdG9uRm9jdXNPdXQoZXZlbnQpIHtcblx0XHRpZiAoIXRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSB7XG5cdFx0XHR0aGlzLmV4cGFuZGVkID0gZmFsc2U7XG5cdFx0fVxuXHR9XG59XG4iXX0=