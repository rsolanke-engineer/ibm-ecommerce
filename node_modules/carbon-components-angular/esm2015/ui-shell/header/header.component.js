/**
 *
 * carbon-angular v0.0.0 | header.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Optional, Output, EventEmitter, TemplateRef } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
import { I18n } from "carbon-components-angular/i18n";
/**
 * A fixed header and navigation.
 * Header may contain a Hamburger menu to toggle the side navigation, navigation actions,
 * and global actions (generally in the form of `Panel`s).
 *
 * [See demo](../../?path=/story/components-ui-shell--header)
 *
 * <example-url>../../iframe.html?id=components-ui-shell--header</example-url>
 */
export class Header {
    constructor(i18n, domSanitizer, router) {
        this.i18n = i18n;
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Top level branding. Defaults to "IBM"
         */
        this.brand = "IBM";
        /**
         * Use the routerLink attribute on <a> tag for navigation instead of using event handlers
         */
        this.useRouter = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this._href = "javascript:void(0)";
    }
    /**
     * Optional link for the header
     */
    set href(v) {
        this._href = v;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
    navigate(event) {
        if (this.router && this.route) {
            event.preventDefault();
            const status = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status);
        }
    }
}
Header.decorators = [
    { type: Component, args: [{
                selector: "ibm-header",
                template: `
		<header
			class="bx--header"
			[attr.aria-label]="brand + ' ' + name">
			<a
				*ngIf="skipTo"
				class="bx--skip-to-content"
				[href]="skipTo"
				tabindex="0">
				{{ i18n.get("UI_SHELL.SKIP_TO") | async }}
			</a>
			<ng-content select="ibm-hamburger"></ng-content>
			<ng-template
				*ngIf="isTemplate(brand)"
				[ngTemplateOutlet]="brand">
			</ng-template>
			<ng-container *ngIf="!isTemplate(brand)" [ngSwitch]="useRouter">
				<a
					*ngSwitchCase="false"
					class="bx--header__name"
					[href]="href"
					(click)="navigate($event)">
					<span class="bx--header__name--prefix">{{brand}}&nbsp;</span>
					{{name}}
				</a>
				<a
					*ngSwitchCase="true"
					class="bx--header__name"
					[routerLink]="route">
					<span class="bx--header__name--prefix">{{brand}}&nbsp;</span>
					{{name}}
				</a>
			</ng-container>
			<ng-content></ng-content>
		</header>
	`
            }] }
];
/** @nocollapse */
Header.ctorParameters = () => [
    { type: I18n },
    { type: DomSanitizer },
    { type: Router, decorators: [{ type: Optional }] }
];
Header.propDecorators = {
    skipTo: [{ type: Input }],
    name: [{ type: Input }],
    brand: [{ type: Input }],
    href: [{ type: Input }],
    route: [{ type: Input }],
    routeExtras: [{ type: Input }],
    useRouter: [{ type: Input }],
    navigation: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdWktc2hlbGwvIiwic291cmNlcyI6WyJoZWFkZXIvaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdEQ7Ozs7Ozs7O0dBUUc7QUF3Q0gsTUFBTSxPQUFPLE1BQU07SUFnRGxCLFlBQ1EsSUFBVSxFQUNQLFlBQTBCLEVBQ2QsTUFBYztRQUY3QixTQUFJLEdBQUosSUFBSSxDQUFNO1FBQ1AsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBMUNyQzs7V0FFRztRQUNNLFVBQUssR0FBOEIsS0FBSyxDQUFDO1FBd0JsRDs7V0FFRztRQUNNLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFFM0I7O1dBRUc7UUFDTyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQW9CLENBQUM7UUFFbEQsVUFBSyxHQUFHLG9CQUFvQixDQUFDO0lBS0UsQ0FBQztJQXRDMUM7O09BRUc7SUFDSCxJQUFhLElBQUksQ0FBQyxDQUFTO1FBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDUCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBVyxDQUFDO0lBQ3ZFLENBQUM7SUErQk0sVUFBVSxDQUFDLEtBQUs7UUFDdEIsT0FBTyxLQUFLLFlBQVksV0FBVyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBSztRQUNiLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzlCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM3QjtJQUNGLENBQUM7OztZQXRHRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFtQ1Q7YUFDRDs7OztZQWpEUSxJQUFJO1lBRkosWUFBWTtZQUNaLE1BQU0sdUJBc0daLFFBQVE7OztxQkEvQ1QsS0FBSzttQkFJTCxLQUFLO29CQUlMLEtBQUs7bUJBSUwsS0FBSztvQkFZTCxLQUFLOzBCQU1MLEtBQUs7d0JBS0wsS0FBSzt5QkFLTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0T3B0aW9uYWwsXG5cdE91dHB1dCxcblx0RXZlbnRFbWl0dGVyLFxuXHRUZW1wbGF0ZVJlZlxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSBcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXJcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5cbi8qKlxuICogQSBmaXhlZCBoZWFkZXIgYW5kIG5hdmlnYXRpb24uXG4gKiBIZWFkZXIgbWF5IGNvbnRhaW4gYSBIYW1idXJnZXIgbWVudSB0byB0b2dnbGUgdGhlIHNpZGUgbmF2aWdhdGlvbiwgbmF2aWdhdGlvbiBhY3Rpb25zLFxuICogYW5kIGdsb2JhbCBhY3Rpb25zIChnZW5lcmFsbHkgaW4gdGhlIGZvcm0gb2YgYFBhbmVsYHMpLlxuICpcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NvbXBvbmVudHMtdWktc2hlbGwtLWhlYWRlcilcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9Y29tcG9uZW50cy11aS1zaGVsbC0taGVhZGVyPC9leGFtcGxlLXVybD5cbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1oZWFkZXJcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8aGVhZGVyXG5cdFx0XHRjbGFzcz1cImJ4LS1oZWFkZXJcIlxuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJicmFuZCArICcgJyArIG5hbWVcIj5cblx0XHRcdDxhXG5cdFx0XHRcdCpuZ0lmPVwic2tpcFRvXCJcblx0XHRcdFx0Y2xhc3M9XCJieC0tc2tpcC10by1jb250ZW50XCJcblx0XHRcdFx0W2hyZWZdPVwic2tpcFRvXCJcblx0XHRcdFx0dGFiaW5kZXg9XCIwXCI+XG5cdFx0XHRcdHt7IGkxOG4uZ2V0KFwiVUlfU0hFTEwuU0tJUF9UT1wiKSB8IGFzeW5jIH19XG5cdFx0XHQ8L2E+XG5cdFx0XHQ8bmctY29udGVudCBzZWxlY3Q9XCJpYm0taGFtYnVyZ2VyXCI+PC9uZy1jb250ZW50PlxuXHRcdFx0PG5nLXRlbXBsYXRlXG5cdFx0XHRcdCpuZ0lmPVwiaXNUZW1wbGF0ZShicmFuZClcIlxuXHRcdFx0XHRbbmdUZW1wbGF0ZU91dGxldF09XCJicmFuZFwiPlxuXHRcdFx0PC9uZy10ZW1wbGF0ZT5cblx0XHRcdDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXNUZW1wbGF0ZShicmFuZClcIiBbbmdTd2l0Y2hdPVwidXNlUm91dGVyXCI+XG5cdFx0XHRcdDxhXG5cdFx0XHRcdFx0Km5nU3dpdGNoQ2FzZT1cImZhbHNlXCJcblx0XHRcdFx0XHRjbGFzcz1cImJ4LS1oZWFkZXJfX25hbWVcIlxuXHRcdFx0XHRcdFtocmVmXT1cImhyZWZcIlxuXHRcdFx0XHRcdChjbGljayk9XCJuYXZpZ2F0ZSgkZXZlbnQpXCI+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJieC0taGVhZGVyX19uYW1lLS1wcmVmaXhcIj57e2JyYW5kfX0mbmJzcDs8L3NwYW4+XG5cdFx0XHRcdFx0e3tuYW1lfX1cblx0XHRcdFx0PC9hPlxuXHRcdFx0XHQ8YVxuXHRcdFx0XHRcdCpuZ1N3aXRjaENhc2U9XCJ0cnVlXCJcblx0XHRcdFx0XHRjbGFzcz1cImJ4LS1oZWFkZXJfX25hbWVcIlxuXHRcdFx0XHRcdFtyb3V0ZXJMaW5rXT1cInJvdXRlXCI+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJieC0taGVhZGVyX19uYW1lLS1wcmVmaXhcIj57e2JyYW5kfX0mbmJzcDs8L3NwYW4+XG5cdFx0XHRcdFx0e3tuYW1lfX1cblx0XHRcdFx0PC9hPlxuXHRcdFx0PC9uZy1jb250YWluZXI+XG5cdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0PC9oZWFkZXI+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgSGVhZGVyIHtcblx0LyoqXG5cdCAqIElEIGluIHRoZSBtYWluIGJvZHkgY29udGVudCB0byBqdW1wIHRvLiBVc2VkIGJ5IGtleWJvYXJkIGFuZCBzY3JlZW4gcmVhZGVyIHVzZXJzIHRvIHNraXAgdGhlIGhlYWRlciBjb250ZW50LlxuXHQgKi9cblx0QElucHV0KCkgc2tpcFRvOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBMYWJlbCB0aGF0IHNob3dzIHRvIHRoZSByaWdodCBvZiB0aGUgYGJyYW5kYCB0ZXh0LiBHZW5lcmFsbHkgYSBwcm9kdWN0IG5hbWUuXG5cdCAqL1xuXHRASW5wdXQoKSBuYW1lOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBUb3AgbGV2ZWwgYnJhbmRpbmcuIERlZmF1bHRzIHRvIFwiSUJNXCJcblx0ICovXG5cdEBJbnB1dCgpIGJyYW5kOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+ID0gXCJJQk1cIjtcblx0LyoqXG5cdCAqIE9wdGlvbmFsIGxpbmsgZm9yIHRoZSBoZWFkZXJcblx0ICovXG5cdEBJbnB1dCgpIHNldCBocmVmKHY6IHN0cmluZykge1xuXHRcdHRoaXMuX2hyZWYgPSB2O1xuXHR9XG5cblx0Z2V0IGhyZWYoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RVcmwodGhpcy5faHJlZikgYXMgc3RyaW5nO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFycmF5IG9mIGNvbW1hbmRzIHRvIHNlbmQgdG8gdGhlIHJvdXRlciB3aGVuIHRoZSBsaW5rIGlzIGFjdGl2YXRlZFxuXHQgKiBTZWU6IGh0dHBzOi8vYW5ndWxhci5pby9hcGkvcm91dGVyL1JvdXRlciNuYXZpZ2F0ZVxuXHQgKi9cblx0QElucHV0KCkgcm91dGU6IGFueVtdO1xuXG5cdC8qKlxuXHQgKiBSb3V0ZXIgb3B0aW9ucy4gVXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGByb3V0ZWBcblx0ICogU2VlOiBodHRwczovL2FuZ3VsYXIuaW8vYXBpL3JvdXRlci9Sb3V0ZXIjbmF2aWdhdGVcblx0ICovXG5cdEBJbnB1dCgpIHJvdXRlRXh0cmFzOiBhbnk7XG5cblx0LyoqXG5cdCAqIFVzZSB0aGUgcm91dGVyTGluayBhdHRyaWJ1dGUgb24gPGE+IHRhZyBmb3IgbmF2aWdhdGlvbiBpbnN0ZWFkIG9mIHVzaW5nIGV2ZW50IGhhbmRsZXJzXG5cdCAqL1xuXHRASW5wdXQoKSB1c2VSb3V0ZXIgPSBmYWxzZTtcblxuXHQvKipcblx0ICogRW1pdHMgdGhlIG5hdmlnYXRpb24gc3RhdHVzIHByb21pc2Ugd2hlbiB0aGUgbGluayBpcyBhY3RpdmF0ZWRcblx0ICovXG5cdEBPdXRwdXQoKSBuYXZpZ2F0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxQcm9taXNlPGJvb2xlYW4+PigpO1xuXG5cdHByb3RlY3RlZCBfaHJlZiA9IFwiamF2YXNjcmlwdDp2b2lkKDApXCI7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHVibGljIGkxOG46IEkxOG4sXG5cdFx0cHJvdGVjdGVkIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLFxuXHRcdEBPcHRpb25hbCgpIHByb3RlY3RlZCByb3V0ZXI6IFJvdXRlcikgeyB9XG5cblx0cHVibGljIGlzVGVtcGxhdGUodmFsdWUpIHtcblx0XHRyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZjtcblx0fVxuXG5cdG5hdmlnYXRlKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucm91dGVyICYmIHRoaXMucm91dGUpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRjb25zdCBzdGF0dXMgPSB0aGlzLnJvdXRlci5uYXZpZ2F0ZSh0aGlzLnJvdXRlLCB0aGlzLnJvdXRlRXh0cmFzKTtcblx0XHRcdHRoaXMubmF2aWdhdGlvbi5lbWl0KHN0YXR1cyk7XG5cdFx0fVxuXHR9XG59XG4iXX0=