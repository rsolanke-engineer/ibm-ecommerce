/**
 *
 * carbon-angular v0.0.0 | overflow-menu.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, ContentChild, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewEncapsulation } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
import { OverflowMenuDirective } from "./overflow-menu.directive";
/**
 * The OverFlow menu component encapsulates the OverFlowMenu directive, and the menu iconography into one convienent component
 *
 * [See demo](../../?path=/story/components-overflow-menu--basic)
 *
 * html:
 * ```
 * <ibm-overflow-menu>
 *	<ibm-overflow-menu-option>Option 1</ibm-overflow-menu-option>
 *	<ibm-overflow-menu-option>Option 2</ibm-overflow-menu-option>
 * </ibm-overflow-menu>
 * ```
 *
 * <example-url>../../iframe.html?id=components-overflow-menu--basic</example-url>
 */
var OverflowMenu = /** @class */ (function () {
    function OverflowMenu(elementRef, i18n) {
        this.elementRef = elementRef;
        this.i18n = i18n;
        this.buttonLabel = this.i18n.get().OVERFLOW_MENU.OVERFLOW;
        this.flip = false;
        this.placement = "bottom";
        this.open = false;
        this.openChange = new EventEmitter();
        this.wrapperClass = "";
        /**
         * This appends additional classes to the overflow trigger/button.
         */
        this.triggerClass = "";
    }
    OverflowMenu.prototype.handleOpenChange = function (event) {
        this.open = event;
        this.openChange.emit(event);
    };
    OverflowMenu.decorators = [
        { type: Component, args: [{
                    selector: "ibm-overflow-menu",
                    template: "\n\t\t<button\n\t\t\t[ibmOverflowMenu]=\"options\"\n\t\t\t[ngClass]=\"{'bx--overflow-menu--open': open}\"\n\t\t\tclass=\"bx--overflow-menu {{triggerClass}}\"\n\t\t\t[attr.aria-label]=\"buttonLabel\"\n\t\t\t[flip]=\"flip\"\n\t\t\t[isOpen]=\"open\"\n\t\t\t(isOpenChange)=\"handleOpenChange($event)\"\n\t\t\t[offset]=\"offset\"\n\t\t\t[wrapperClass]=\"wrapperClass\"\n\t\t\taria-haspopup=\"true\"\n\t\t\tclass=\"bx--overflow-menu\"\n\t\t\ttype=\"button\"\n\t\t\t[placement]=\"placement\">\n\t\t\t<ng-template *ngIf=\"customTrigger; else defaultIcon\" [ngTemplateOutlet]=\"customTrigger\"></ng-template>\n\t\t</button>\n\t\t<ng-template #options>\n\t\t\t<ng-content></ng-content>\n\t\t</ng-template>\n\t\t<ng-template #defaultIcon>\n\t\t\t<svg ibmIcon=\"overflow-menu--vertical\" size=\"16\" class=\"bx--overflow-menu__icon\"></svg>\n\t\t</ng-template>\n\t",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n\t\t.bx--overflow-menu--open {\n\t\t\topacity: 1\n\t\t}\n\n\t\t/*\n\t\tRotate the overflow menu container as well as the icon, since\n\t\twe calculate our menu position based on the container, not the icon.\n\t\t*/\n\t\t.bx--data-table-v2 .bx--overflow-menu {\n\t\t\ttransform: rotate(90deg);\n\t\t}\n\n\t\t.bx--data-table-v2 .bx--overflow-menu__icon {\n\t\t\ttransform: rotate(180deg);\n\t\t}\n\t"]
                }] }
    ];
    /** @nocollapse */
    OverflowMenu.ctorParameters = function () { return [
        { type: ElementRef },
        { type: I18n }
    ]; };
    OverflowMenu.propDecorators = {
        buttonLabel: [{ type: Input }],
        flip: [{ type: Input }],
        placement: [{ type: Input }],
        open: [{ type: Input }],
        openChange: [{ type: Output }],
        customTrigger: [{ type: Input }],
        offset: [{ type: Input }],
        wrapperClass: [{ type: Input }],
        triggerClass: [{ type: Input }],
        overflowMenuDirective: [{ type: ContentChild, args: [OverflowMenuDirective, { static: false },] }]
    };
    return OverflowMenu;
}());
export { OverflowMenu };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbIm92ZXJmbG93LW1lbnUvb3ZlcmZsb3ctbWVudS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxZQUFZLEVBQ1osVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxpQkFBaUIsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0g7SUEyRUMsc0JBQXNCLFVBQXNCLEVBQVksSUFBVTtRQUE1QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVksU0FBSSxHQUFKLElBQUksQ0FBTTtRQTdCekQsZ0JBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFFckQsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUViLGNBQVMsR0FBcUIsUUFBUSxDQUFDO1FBRXZDLFNBQUksR0FBRyxLQUFLLENBQUM7UUFFWixlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQVcxQyxpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUUzQjs7V0FFRztRQUNNLGlCQUFZLEdBQUcsRUFBRSxDQUFDO0lBSzBDLENBQUM7SUFFdEUsdUNBQWdCLEdBQWhCLFVBQWlCLEtBQWM7UUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Z0JBaEZELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsczFCQXVCVDtvQkFrQkQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7NkJBakI1QixpWkFnQlI7aUJBRUQ7Ozs7Z0JBckVBLFVBQVU7Z0JBT0YsSUFBSTs7OzhCQWdFWCxLQUFLO3VCQUVMLEtBQUs7NEJBRUwsS0FBSzt1QkFFTCxLQUFLOzZCQUVMLE1BQU07Z0NBSU4sS0FBSzt5QkFLTCxLQUFLOytCQUVMLEtBQUs7K0JBS0wsS0FBSzt3Q0FHTCxZQUFZLFNBQUMscUJBQXFCLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOztJQVF2RCxtQkFBQztDQUFBLEFBakZELElBaUZDO1NBcENZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdENvbnRlbnRDaGlsZCxcblx0RWxlbWVudFJlZixcblx0RXZlbnRFbWl0dGVyLFxuXHRJbnB1dCxcblx0T3V0cHV0LFxuXHRUZW1wbGF0ZVJlZixcblx0Vmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBPdmVyZmxvd01lbnVEaXJlY3RpdmUgfSBmcm9tIFwiLi9vdmVyZmxvdy1tZW51LmRpcmVjdGl2ZVwiO1xuXG4vKipcbiAqIFRoZSBPdmVyRmxvdyBtZW51IGNvbXBvbmVudCBlbmNhcHN1bGF0ZXMgdGhlIE92ZXJGbG93TWVudSBkaXJlY3RpdmUsIGFuZCB0aGUgbWVudSBpY29ub2dyYXBoeSBpbnRvIG9uZSBjb252aWVuZW50IGNvbXBvbmVudFxuICpcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NvbXBvbmVudHMtb3ZlcmZsb3ctbWVudS0tYmFzaWMpXG4gKlxuICogaHRtbDpcbiAqIGBgYFxuICogPGlibS1vdmVyZmxvdy1tZW51PlxuICpcdDxpYm0tb3ZlcmZsb3ctbWVudS1vcHRpb24+T3B0aW9uIDE8L2libS1vdmVyZmxvdy1tZW51LW9wdGlvbj5cbiAqXHQ8aWJtLW92ZXJmbG93LW1lbnUtb3B0aW9uPk9wdGlvbiAyPC9pYm0tb3ZlcmZsb3ctbWVudS1vcHRpb24+XG4gKiA8L2libS1vdmVyZmxvdy1tZW51PlxuICogYGBgXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtb3ZlcmZsb3ctbWVudS0tYmFzaWM8L2V4YW1wbGUtdXJsPlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLW92ZXJmbG93LW1lbnVcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8YnV0dG9uXG5cdFx0XHRbaWJtT3ZlcmZsb3dNZW51XT1cIm9wdGlvbnNcIlxuXHRcdFx0W25nQ2xhc3NdPVwieydieC0tb3ZlcmZsb3ctbWVudS0tb3Blbic6IG9wZW59XCJcblx0XHRcdGNsYXNzPVwiYngtLW92ZXJmbG93LW1lbnUge3t0cmlnZ2VyQ2xhc3N9fVwiXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsXT1cImJ1dHRvbkxhYmVsXCJcblx0XHRcdFtmbGlwXT1cImZsaXBcIlxuXHRcdFx0W2lzT3Blbl09XCJvcGVuXCJcblx0XHRcdChpc09wZW5DaGFuZ2UpPVwiaGFuZGxlT3BlbkNoYW5nZSgkZXZlbnQpXCJcblx0XHRcdFtvZmZzZXRdPVwib2Zmc2V0XCJcblx0XHRcdFt3cmFwcGVyQ2xhc3NdPVwid3JhcHBlckNsYXNzXCJcblx0XHRcdGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCJcblx0XHRcdGNsYXNzPVwiYngtLW92ZXJmbG93LW1lbnVcIlxuXHRcdFx0dHlwZT1cImJ1dHRvblwiXG5cdFx0XHRbcGxhY2VtZW50XT1cInBsYWNlbWVudFwiPlxuXHRcdFx0PG5nLXRlbXBsYXRlICpuZ0lmPVwiY3VzdG9tVHJpZ2dlcjsgZWxzZSBkZWZhdWx0SWNvblwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImN1c3RvbVRyaWdnZXJcIj48L25nLXRlbXBsYXRlPlxuXHRcdDwvYnV0dG9uPlxuXHRcdDxuZy10ZW1wbGF0ZSAjb3B0aW9ucz5cblx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHQ8L25nLXRlbXBsYXRlPlxuXHRcdDxuZy10ZW1wbGF0ZSAjZGVmYXVsdEljb24+XG5cdFx0XHQ8c3ZnIGlibUljb249XCJvdmVyZmxvdy1tZW51LS12ZXJ0aWNhbFwiIHNpemU9XCIxNlwiIGNsYXNzPVwiYngtLW92ZXJmbG93LW1lbnVfX2ljb25cIj48L3N2Zz5cblx0XHQ8L25nLXRlbXBsYXRlPlxuXHRgLFxuXHRzdHlsZXM6IFtgXG5cdFx0LmJ4LS1vdmVyZmxvdy1tZW51LS1vcGVuIHtcblx0XHRcdG9wYWNpdHk6IDFcblx0XHR9XG5cblx0XHQvKlxuXHRcdFJvdGF0ZSB0aGUgb3ZlcmZsb3cgbWVudSBjb250YWluZXIgYXMgd2VsbCBhcyB0aGUgaWNvbiwgc2luY2Vcblx0XHR3ZSBjYWxjdWxhdGUgb3VyIG1lbnUgcG9zaXRpb24gYmFzZWQgb24gdGhlIGNvbnRhaW5lciwgbm90IHRoZSBpY29uLlxuXHRcdCovXG5cdFx0LmJ4LS1kYXRhLXRhYmxlLXYyIC5ieC0tb3ZlcmZsb3ctbWVudSB7XG5cdFx0XHR0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XG5cdFx0fVxuXG5cdFx0LmJ4LS1kYXRhLXRhYmxlLXYyIC5ieC0tb3ZlcmZsb3ctbWVudV9faWNvbiB7XG5cdFx0XHR0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xuXHRcdH1cblx0YF0sXG5cdGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgT3ZlcmZsb3dNZW51IHtcblx0QElucHV0KCkgYnV0dG9uTGFiZWwgPSB0aGlzLmkxOG4uZ2V0KCkuT1ZFUkZMT1dfTUVOVS5PVkVSRkxPVztcblxuXHRASW5wdXQoKSBmbGlwID0gZmFsc2U7XG5cblx0QElucHV0KCkgcGxhY2VtZW50OiBcImJvdHRvbVwiIHwgXCJ0b3BcIiA9IFwiYm90dG9tXCI7XG5cblx0QElucHV0KCkgb3BlbiA9IGZhbHNlO1xuXG5cdEBPdXRwdXQoKSBvcGVuQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXHQvKipcblx0ICogU2V0cyB0aGUgY3VzdG9tIG92ZXJmbG93IG1lbnUgdHJpZ2dlclxuXHQgKi9cblx0QElucHV0KCkgY3VzdG9tVHJpZ2dlcjogVGVtcGxhdGVSZWY8YW55PjtcblxuXHQvKipcblx0ICogVGhpcyBzcGVjaWZpZXMgYW55IHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIG9mZnNldCBmb3IgdGhlIHBvc2l0aW9uIG9mIHRoZSBkaWFsb2dcblx0ICovXG5cdEBJbnB1dCgpIG9mZnNldDogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9O1xuXG5cdEBJbnB1dCgpIHdyYXBwZXJDbGFzcyA9IFwiXCI7XG5cblx0LyoqXG5cdCAqIFRoaXMgYXBwZW5kcyBhZGRpdGlvbmFsIGNsYXNzZXMgdG8gdGhlIG92ZXJmbG93IHRyaWdnZXIvYnV0dG9uLlxuXHQgKi9cblx0QElucHV0KCkgdHJpZ2dlckNsYXNzID0gXCJcIjtcblxuXHQvLyBAdHMtaWdub3JlXG5cdEBDb250ZW50Q2hpbGQoT3ZlcmZsb3dNZW51RGlyZWN0aXZlLCB7IHN0YXRpYzogZmFsc2UgfSkgb3ZlcmZsb3dNZW51RGlyZWN0aXZlOiBPdmVyZmxvd01lbnVEaXJlY3RpdmU7XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCBpMThuOiBJMThuKSB7fVxuXG5cdGhhbmRsZU9wZW5DaGFuZ2UoZXZlbnQ6IGJvb2xlYW4pIHtcblx0XHR0aGlzLm9wZW4gPSBldmVudDtcblx0XHR0aGlzLm9wZW5DaGFuZ2UuZW1pdChldmVudCk7XG5cdH1cbn1cbiJdfQ==