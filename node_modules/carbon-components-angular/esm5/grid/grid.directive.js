/**
 *
 * carbon-angular v0.0.0 | grid.directive.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, Input } from "@angular/core";
/**
 * [See demo](../../?path=/story/components-grid--basic)
 *
 * <example-url>../../iframe.html?id=components-grid--basic</example-url>
 */
var GridDirective = /** @class */ (function () {
    function GridDirective() {
        this.baseClass = true;
        this.condensed = false;
    }
    GridDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmGrid]"
                },] }
    ];
    GridDirective.propDecorators = {
        baseClass: [{ type: HostBinding, args: ["class.bx--grid",] }],
        condensed: [{ type: HostBinding, args: ["class.bx--grid--condensed",] }, { type: Input }]
    };
    return GridDirective;
}());
export { GridDirective };
var RowDirective = /** @class */ (function () {
    function RowDirective() {
        this.gutter = true;
        this.leftGutter = true;
        this.rightGutter = true;
        this.baseClass = true;
        this.condensed = false;
    }
    Object.defineProperty(RowDirective.prototype, "showGutter", {
        get: function () {
            return !this.gutter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowDirective.prototype, "showLeftGutter", {
        get: function () {
            return !this.leftGutter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowDirective.prototype, "showRightGutter", {
        get: function () {
            return !this.rightGutter;
        },
        enumerable: true,
        configurable: true
    });
    RowDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmRow]"
                },] }
    ];
    RowDirective.propDecorators = {
        gutter: [{ type: Input }],
        leftGutter: [{ type: Input }],
        rightGutter: [{ type: Input }],
        baseClass: [{ type: HostBinding, args: ["class.bx--row",] }],
        condensed: [{ type: HostBinding, args: ["class.bx--row--condensed",] }, { type: Input }],
        showGutter: [{ type: HostBinding, args: ["class.bx--no-gutter",] }],
        showLeftGutter: [{ type: HostBinding, args: ["class.bx--no-gutter--left",] }],
        showRightGutter: [{ type: HostBinding, args: ["class.bx--no-gutter--right",] }]
    };
    return RowDirective;
}());
export { RowDirective };
var ColumnDirective = /** @class */ (function () {
    function ColumnDirective() {
        this.class = "";
        this.columnNumbers = {};
        this.offsets = {};
        this._columnClasses = [];
    }
    Object.defineProperty(ColumnDirective.prototype, "columnClasses", {
        get: function () {
            return this._columnClasses.join(" ");
        },
        enumerable: true,
        configurable: true
    });
    ColumnDirective.prototype.set = function (classes) {
        this._columnClasses = classes.split(" ");
    };
    ColumnDirective.prototype.ngOnInit = function () {
        var _this = this;
        try {
            var columnKeys = Object.keys(this.columnNumbers);
            if (columnKeys.length <= 0) {
                this._columnClasses.push("bx--col");
            }
            columnKeys.forEach(function (key) {
                if (_this.columnNumbers[key] === "nobreak") {
                    _this._columnClasses.push("bx--col-" + key);
                }
                else {
                    _this._columnClasses.push("bx--col-" + key + "-" + _this.columnNumbers[key]);
                }
            });
            Object.keys(this.offsets).forEach(function (key) {
                _this._columnClasses.push("bx--offset-" + key + "-" + _this.offsets[key]);
            });
        }
        catch (err) {
            console.error("Malformed `offsets` or `columnNumbers`: " + err);
        }
        if (this.class) {
            this._columnClasses.push(this.class);
        }
    };
    ColumnDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmCol]"
                },] }
    ];
    ColumnDirective.propDecorators = {
        class: [{ type: Input }],
        columnNumbers: [{ type: Input }],
        offsets: [{ type: Input }],
        columnClasses: [{ type: HostBinding, args: ["class",] }]
    };
    return ColumnDirective;
}());
export { ColumnDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2dyaWQvIiwic291cmNlcyI6WyJncmlkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFdEU7Ozs7R0FJRztBQUNIO0lBQUE7UUFJZ0MsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNHLGNBQVMsR0FBRyxLQUFLLENBQUM7SUFDdEUsQ0FBQzs7Z0JBTkEsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSxXQUFXO2lCQUNyQjs7OzRCQUVDLFdBQVcsU0FBQyxnQkFBZ0I7NEJBQzVCLFdBQVcsU0FBQywyQkFBMkIsY0FBRyxLQUFLOztJQUNqRCxvQkFBQztDQUFBLEFBTkQsSUFNQztTQUhZLGFBQWE7QUFLMUI7SUFBQTtRQUlVLFdBQU0sR0FBRyxJQUFJLENBQUM7UUFDZCxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBRUUsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNHLGNBQVMsR0FBRyxLQUFLLENBQUM7SUFVckUsQ0FBQztJQVRBLHNCQUF3QyxvQ0FBVTthQUFsRDtZQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7OztPQUFBO0lBQ0Qsc0JBQThDLHdDQUFjO2FBQTVEO1lBQ0MsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDekIsQ0FBQzs7O09BQUE7SUFDRCxzQkFBK0MseUNBQWU7YUFBOUQ7WUFDQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMxQixDQUFDOzs7T0FBQTs7Z0JBbEJELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsVUFBVTtpQkFDcEI7Ozt5QkFFQyxLQUFLOzZCQUNMLEtBQUs7OEJBQ0wsS0FBSzs0QkFFTCxXQUFXLFNBQUMsZUFBZTs0QkFDM0IsV0FBVyxTQUFDLDBCQUEwQixjQUFHLEtBQUs7NkJBQzlDLFdBQVcsU0FBQyxxQkFBcUI7aUNBR2pDLFdBQVcsU0FBQywyQkFBMkI7a0NBR3ZDLFdBQVcsU0FBQyw0QkFBNEI7O0lBRzFDLG1CQUFDO0NBQUEsQUFuQkQsSUFtQkM7U0FoQlksWUFBWTtBQWtCekI7SUFBQTtRQUlVLFVBQUssR0FBRyxFQUFFLENBQUM7UUFFWCxrQkFBYSxHQUFHLEVBQUUsQ0FBQztRQUVuQixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBRVosbUJBQWMsR0FBYSxFQUFFLENBQUM7SUFxQ3pDLENBQUM7SUFuQ0Esc0JBQ0ksMENBQWE7YUFEakI7WUFFQyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLENBQUM7OztPQUFBO0lBRUQsNkJBQUcsR0FBSCxVQUFJLE9BQWU7UUFDbEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxrQ0FBUSxHQUFSO1FBQUEsaUJBeUJDO1FBeEJBLElBQUk7WUFDSCxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNuRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO2dCQUMzQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUNwQztZQUVELFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO2dCQUNyQixJQUFJLEtBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxFQUFFO29CQUMxQyxLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFXLEdBQUssQ0FBQyxDQUFDO2lCQUMzQztxQkFBTTtvQkFDTixLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFXLEdBQUcsU0FBSSxLQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBRyxDQUFDLENBQUM7aUJBQ3RFO1lBQ0YsQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO2dCQUNwQyxLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBYyxHQUFHLFNBQUksS0FBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUcsQ0FBQyxDQUFDO1lBQ3BFLENBQUMsQ0FBQyxDQUFDO1NBQ0g7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkNBQStDLEdBQUssQ0FBQyxDQUFDO1NBQ3BFO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JDO0lBQ0YsQ0FBQzs7Z0JBOUNELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsVUFBVTtpQkFDcEI7Ozt3QkFFQyxLQUFLO2dDQUVMLEtBQUs7MEJBRUwsS0FBSztnQ0FJTCxXQUFXLFNBQUMsT0FBTzs7SUFtQ3JCLHNCQUFDO0NBQUEsQUEvQ0QsSUErQ0M7U0E1Q1ksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG4vKipcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NvbXBvbmVudHMtZ3JpZC0tYmFzaWMpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtZ3JpZC0tYmFzaWM8L2V4YW1wbGUtdXJsPlxuICovXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6IFwiW2libUdyaWRdXCJcbn0pXG5leHBvcnQgY2xhc3MgR3JpZERpcmVjdGl2ZSB7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1ncmlkXCIpIGJhc2VDbGFzcyA9IHRydWU7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1ncmlkLS1jb25kZW5zZWRcIikgQElucHV0KCkgY29uZGVuc2VkID0gZmFsc2U7XG59XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogXCJbaWJtUm93XVwiXG59KVxuZXhwb3J0IGNsYXNzIFJvd0RpcmVjdGl2ZSB7XG5cdEBJbnB1dCgpIGd1dHRlciA9IHRydWU7XG5cdEBJbnB1dCgpIGxlZnRHdXR0ZXIgPSB0cnVlO1xuXHRASW5wdXQoKSByaWdodEd1dHRlciA9IHRydWU7XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXJvd1wiKSBiYXNlQ2xhc3MgPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tcm93LS1jb25kZW5zZWRcIikgQElucHV0KCkgY29uZGVuc2VkID0gZmFsc2U7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1uby1ndXR0ZXJcIikgZ2V0IHNob3dHdXR0ZXIoKSB7XG5cdFx0cmV0dXJuICF0aGlzLmd1dHRlcjtcblx0fVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tbm8tZ3V0dGVyLS1sZWZ0XCIpIGdldCBzaG93TGVmdEd1dHRlcigpIHtcblx0XHRyZXR1cm4gIXRoaXMubGVmdEd1dHRlcjtcblx0fVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tbm8tZ3V0dGVyLS1yaWdodFwiKSBnZXQgc2hvd1JpZ2h0R3V0dGVyKCkge1xuXHRcdHJldHVybiAhdGhpcy5yaWdodEd1dHRlcjtcblx0fVxufVxuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6IFwiW2libUNvbF1cIlxufSlcbmV4cG9ydCBjbGFzcyBDb2x1bW5EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXHRASW5wdXQoKSBjbGFzcyA9IFwiXCI7XG5cblx0QElucHV0KCkgY29sdW1uTnVtYmVycyA9IHt9O1xuXG5cdEBJbnB1dCgpIG9mZnNldHMgPSB7fTtcblxuXHRwcm90ZWN0ZWQgX2NvbHVtbkNsYXNzZXM6IHN0cmluZ1tdID0gW107XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3NcIilcblx0Z2V0IGNvbHVtbkNsYXNzZXMoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uQ2xhc3Nlcy5qb2luKFwiIFwiKTtcblx0fVxuXG5cdHNldChjbGFzc2VzOiBzdHJpbmcpIHtcblx0XHR0aGlzLl9jb2x1bW5DbGFzc2VzID0gY2xhc3Nlcy5zcGxpdChcIiBcIik7XG5cdH1cblxuXHRuZ09uSW5pdCgpIHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgY29sdW1uS2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuY29sdW1uTnVtYmVycyk7XG5cdFx0XHRpZiAoY29sdW1uS2V5cy5sZW5ndGggPD0gMCkge1xuXHRcdFx0XHR0aGlzLl9jb2x1bW5DbGFzc2VzLnB1c2goXCJieC0tY29sXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb2x1bW5LZXlzLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdFx0aWYgKHRoaXMuY29sdW1uTnVtYmVyc1trZXldID09PSBcIm5vYnJlYWtcIikge1xuXHRcdFx0XHRcdHRoaXMuX2NvbHVtbkNsYXNzZXMucHVzaChgYngtLWNvbC0ke2tleX1gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9jb2x1bW5DbGFzc2VzLnB1c2goYGJ4LS1jb2wtJHtrZXl9LSR7dGhpcy5jb2x1bW5OdW1iZXJzW2tleV19YCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRPYmplY3Qua2V5cyh0aGlzLm9mZnNldHMpLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdFx0dGhpcy5fY29sdW1uQ2xhc3Nlcy5wdXNoKGBieC0tb2Zmc2V0LSR7a2V5fS0ke3RoaXMub2Zmc2V0c1trZXldfWApO1xuXHRcdFx0fSk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBNYWxmb3JtZWQgXFxgb2Zmc2V0c1xcYCBvciBcXGBjb2x1bW5OdW1iZXJzXFxgOiAke2Vycn1gKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5jbGFzcykge1xuXHRcdFx0dGhpcy5fY29sdW1uQ2xhc3Nlcy5wdXNoKHRoaXMuY2xhc3MpO1xuXHRcdH1cblx0fVxufVxuIl19