/**
 *
 * carbon-angular v0.0.0 | inline-loading.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, HostBinding } from "@angular/core";
export var InlineLoadingState;
(function (InlineLoadingState) {
    /** It hides the whole component. */
    InlineLoadingState["Hidden"] = "hidden";
    /** It shows the `loadingText` but no loading animation. */
    InlineLoadingState["Inactive"] = "inactive";
    /** It shows the `loadingText` with loading animation. */
    InlineLoadingState["Active"] = "active";
    /** It shows the `successText` with a success state. */
    InlineLoadingState["Finished"] = "finished";
    /** It shows the `errorText` with an error state. */
    InlineLoadingState["Error"] = "error";
})(InlineLoadingState || (InlineLoadingState = {}));
/**
 * [See demo](../../?path=/story/components-inline-loading--basic)
 *
 * <example-url>../../iframe.html?id=components-inline-loading--basic</example-url>
 */
var InlineLoading = /** @class */ (function () {
    function InlineLoading() {
        this.InlineLoadingState = InlineLoadingState;
        /**
         * Specify the text description for the loading state.
         */
        this.state = InlineLoadingState.Active;
        /**
         * Provide a delay for the `setTimeout` for success.
         */
        this.successDelay = 1500;
        /**
         * Emits event after the success state is active
         */
        this.onSuccess = new EventEmitter();
        this.loadingClass = true;
    }
    Object.defineProperty(InlineLoading.prototype, "isActive", {
        /**
         * set to `false` to stop the loading animation
         */
        get: function () {
            return this.state === InlineLoadingState.Active;
        },
        set: function (active) {
            this.state = active ? InlineLoadingState.Active : InlineLoadingState.Inactive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineLoading.prototype, "success", {
        /**
         * Returns value `true` if the component is in the success state.
         */
        get: function () {
            return this.state === InlineLoadingState.Finished;
        },
        /**
         * Set the component's state to match the parameter and emits onSuccess if it exits.
         */
        set: function (success) {
            var _this = this;
            this.state = success ? InlineLoadingState.Finished : InlineLoadingState.Error;
            if (this.state === InlineLoadingState.Finished) {
                setTimeout(function () {
                    _this.onSuccess.emit();
                }, this.successDelay);
            }
        },
        enumerable: true,
        configurable: true
    });
    InlineLoading.decorators = [
        { type: Component, args: [{
                    selector: "ibm-inline-loading",
                    template: "\n\t\t<div *ngIf=\"state !== InlineLoadingState.Hidden\"\n\t\t\tclass=\"bx--inline-loading__animation\">\n\t\t\t<div\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Inactive || state === InlineLoadingState.Active\"\n\t\t\t\tclass=\"bx--loading bx--loading--small\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--loading--stop': state === InlineLoadingState.Inactive\n\t\t\t\t}\">\n\t\t\t\t<svg class=\"bx--loading__svg\" viewBox=\"0 0 100 100\">\n\t\t\t\t\t<circle class=\"bx--loading__background\" cx=\"50%\" cy=\"50%\" r=\"44\" />\n\t\t\t\t\t<circle class=\"bx--loading__stroke\" cx=\"50%\" cy=\"50%\" r=\"44\" />\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Finished\"\n\t\t\t\tibmIcon=\"checkmark--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--inline-loading__checkmark-container\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"state === InlineLoadingState.Error\"\n\t\t\t\tibmIcon=\"error--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--inline-loading--error\">\n\t\t\t</svg>\n\t\t</div>\n\t\t<p\n\t\t\t*ngIf=\"state === InlineLoadingState.Inactive || state === InlineLoadingState.Active\"\n\t\t\tclass=\"bx--inline-loading__text\">{{loadingText}}</p>\n\t\t<p *ngIf=\"state === InlineLoadingState.Finished\" class=\"bx--inline-loading__text\">{{successText}}</p>\n\t\t<p *ngIf=\"state === InlineLoadingState.Error\" class=\"bx--inline-loading__text\">{{errorText}}</p>\n\t"
                }] }
    ];
    InlineLoading.propDecorators = {
        state: [{ type: Input }],
        loadingText: [{ type: Input }],
        successText: [{ type: Input }],
        successDelay: [{ type: Input }],
        errorText: [{ type: Input }],
        isActive: [{ type: Input }],
        success: [{ type: Input }],
        onSuccess: [{ type: Output }],
        loadingClass: [{ type: HostBinding, args: ["class.bx--inline-loading",] }]
    };
    return InlineLoading;
}());
export { InlineLoading };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLWxvYWRpbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pbmxpbmUtbG9hZGluZy8iLCJzb3VyY2VzIjpbImlubGluZS1sb2FkaW5nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFdBQVcsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixNQUFNLENBQU4sSUFBWSxrQkFXWDtBQVhELFdBQVksa0JBQWtCO0lBQzdCLG9DQUFvQztJQUNwQyx1Q0FBaUIsQ0FBQTtJQUNqQiwyREFBMkQ7SUFDM0QsMkNBQXFCLENBQUE7SUFDckIseURBQXlEO0lBQ3pELHVDQUFpQixDQUFBO0lBQ2pCLHVEQUF1RDtJQUN2RCwyQ0FBcUIsQ0FBQTtJQUNyQixvREFBb0Q7SUFDcEQscUNBQWUsQ0FBQTtBQUNoQixDQUFDLEVBWFcsa0JBQWtCLEtBQWxCLGtCQUFrQixRQVc3QjtBQUVEOzs7O0dBSUc7QUFDSDtJQUFBO1FBcUNDLHVCQUFrQixHQUFHLGtCQUFrQixDQUFDO1FBRXhDOztXQUVHO1FBQ00sVUFBSyxHQUFnQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7UUFTeEU7O1dBRUc7UUFDTSxpQkFBWSxHQUFHLElBQUksQ0FBQztRQWlDN0I7O1dBRUc7UUFDTyxjQUFTLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFbkIsaUJBQVksR0FBRyxJQUFJLENBQUM7SUFDOUQsQ0FBQztJQS9CQSxzQkFBYSxtQ0FBUTtRQUhyQjs7V0FFRzthQUNIO1lBQ0MsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLGtCQUFrQixDQUFDLE1BQU0sQ0FBQztRQUNqRCxDQUFDO2FBQ0QsVUFBYSxNQUFlO1lBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQztRQUMvRSxDQUFDOzs7T0FIQTtJQVFELHNCQUFhLGtDQUFPO1FBSHBCOztXQUVHO2FBQ0g7WUFDQyxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssa0JBQWtCLENBQUMsUUFBUSxDQUFDO1FBQ25ELENBQUM7UUFDRDs7V0FFRzthQUNILFVBQVksT0FBZ0I7WUFBNUIsaUJBT0M7WUFOQSxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUM7WUFDOUUsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLGtCQUFrQixDQUFDLFFBQVEsRUFBRTtnQkFDL0MsVUFBVSxDQUFDO29CQUNWLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3ZCLENBQUMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDdEI7UUFDRixDQUFDOzs7T0FYQTs7Z0JBMUVELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixRQUFRLEVBQUUsMjRDQWdDVDtpQkFDRDs7O3dCQU9DLEtBQUs7OEJBSUwsS0FBSzs4QkFJTCxLQUFLOytCQUlMLEtBQUs7NEJBSUwsS0FBSzsyQkFJTCxLQUFLOzBCQVVMLEtBQUs7NEJBa0JMLE1BQU07K0JBRU4sV0FBVyxTQUFDLDBCQUEwQjs7SUFDeEMsb0JBQUM7Q0FBQSxBQTdGRCxJQTZGQztTQXpEWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXIsXG5cdEhvc3RCaW5kaW5nXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmV4cG9ydCBlbnVtIElubGluZUxvYWRpbmdTdGF0ZSB7XG5cdC8qKiBJdCBoaWRlcyB0aGUgd2hvbGUgY29tcG9uZW50LiAqL1xuXHRIaWRkZW4gPSBcImhpZGRlblwiLFxuXHQvKiogSXQgc2hvd3MgdGhlIGBsb2FkaW5nVGV4dGAgYnV0IG5vIGxvYWRpbmcgYW5pbWF0aW9uLiAqL1xuXHRJbmFjdGl2ZSA9IFwiaW5hY3RpdmVcIixcblx0LyoqIEl0IHNob3dzIHRoZSBgbG9hZGluZ1RleHRgIHdpdGggbG9hZGluZyBhbmltYXRpb24uICovXG5cdEFjdGl2ZSA9IFwiYWN0aXZlXCIsXG5cdC8qKiBJdCBzaG93cyB0aGUgYHN1Y2Nlc3NUZXh0YCB3aXRoIGEgc3VjY2VzcyBzdGF0ZS4gKi9cblx0RmluaXNoZWQgPSBcImZpbmlzaGVkXCIsXG5cdC8qKiBJdCBzaG93cyB0aGUgYGVycm9yVGV4dGAgd2l0aCBhbiBlcnJvciBzdGF0ZS4gKi9cblx0RXJyb3IgPSBcImVycm9yXCJcbn1cblxuLyoqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLWlubGluZS1sb2FkaW5nLS1iYXNpYylcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9Y29tcG9uZW50cy1pbmxpbmUtbG9hZGluZy0tYmFzaWM8L2V4YW1wbGUtdXJsPlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLWlubGluZS1sb2FkaW5nXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGRpdiAqbmdJZj1cInN0YXRlICE9PSBJbmxpbmVMb2FkaW5nU3RhdGUuSGlkZGVuXCJcblx0XHRcdGNsYXNzPVwiYngtLWlubGluZS1sb2FkaW5nX19hbmltYXRpb25cIj5cblx0XHRcdDxkaXZcblx0XHRcdFx0Km5nSWY9XCJzdGF0ZSA9PT0gSW5saW5lTG9hZGluZ1N0YXRlLkluYWN0aXZlIHx8IHN0YXRlID09PSBJbmxpbmVMb2FkaW5nU3RhdGUuQWN0aXZlXCJcblx0XHRcdFx0Y2xhc3M9XCJieC0tbG9hZGluZyBieC0tbG9hZGluZy0tc21hbGxcIlxuXHRcdFx0XHRbbmdDbGFzc109XCJ7XG5cdFx0XHRcdFx0J2J4LS1sb2FkaW5nLS1zdG9wJzogc3RhdGUgPT09IElubGluZUxvYWRpbmdTdGF0ZS5JbmFjdGl2ZVxuXHRcdFx0XHR9XCI+XG5cdFx0XHRcdDxzdmcgY2xhc3M9XCJieC0tbG9hZGluZ19fc3ZnXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCI+XG5cdFx0XHRcdFx0PGNpcmNsZSBjbGFzcz1cImJ4LS1sb2FkaW5nX19iYWNrZ3JvdW5kXCIgY3g9XCI1MCVcIiBjeT1cIjUwJVwiIHI9XCI0NFwiIC8+XG5cdFx0XHRcdFx0PGNpcmNsZSBjbGFzcz1cImJ4LS1sb2FkaW5nX19zdHJva2VcIiBjeD1cIjUwJVwiIGN5PVwiNTAlXCIgcj1cIjQ0XCIgLz5cblx0XHRcdFx0PC9zdmc+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxzdmdcblx0XHRcdFx0Km5nSWY9XCJzdGF0ZSA9PT0gSW5saW5lTG9hZGluZ1N0YXRlLkZpbmlzaGVkXCJcblx0XHRcdFx0aWJtSWNvbj1cImNoZWNrbWFyay0tZmlsbGVkXCJcblx0XHRcdFx0c2l6ZT1cIjE2XCJcblx0XHRcdFx0Y2xhc3M9XCJieC0taW5saW5lLWxvYWRpbmdfX2NoZWNrbWFyay1jb250YWluZXJcIj5cblx0XHRcdDwvc3ZnPlxuXHRcdFx0PHN2Z1xuXHRcdFx0XHQqbmdJZj1cInN0YXRlID09PSBJbmxpbmVMb2FkaW5nU3RhdGUuRXJyb3JcIlxuXHRcdFx0XHRpYm1JY29uPVwiZXJyb3ItLWZpbGxlZFwiXG5cdFx0XHRcdHNpemU9XCIxNlwiXG5cdFx0XHRcdGNsYXNzPVwiYngtLWlubGluZS1sb2FkaW5nLS1lcnJvclwiPlxuXHRcdFx0PC9zdmc+XG5cdFx0PC9kaXY+XG5cdFx0PHBcblx0XHRcdCpuZ0lmPVwic3RhdGUgPT09IElubGluZUxvYWRpbmdTdGF0ZS5JbmFjdGl2ZSB8fCBzdGF0ZSA9PT0gSW5saW5lTG9hZGluZ1N0YXRlLkFjdGl2ZVwiXG5cdFx0XHRjbGFzcz1cImJ4LS1pbmxpbmUtbG9hZGluZ19fdGV4dFwiPnt7bG9hZGluZ1RleHR9fTwvcD5cblx0XHQ8cCAqbmdJZj1cInN0YXRlID09PSBJbmxpbmVMb2FkaW5nU3RhdGUuRmluaXNoZWRcIiBjbGFzcz1cImJ4LS1pbmxpbmUtbG9hZGluZ19fdGV4dFwiPnt7c3VjY2Vzc1RleHR9fTwvcD5cblx0XHQ8cCAqbmdJZj1cInN0YXRlID09PSBJbmxpbmVMb2FkaW5nU3RhdGUuRXJyb3JcIiBjbGFzcz1cImJ4LS1pbmxpbmUtbG9hZGluZ19fdGV4dFwiPnt7ZXJyb3JUZXh0fX08L3A+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgSW5saW5lTG9hZGluZyB7XG5cdElubGluZUxvYWRpbmdTdGF0ZSA9IElubGluZUxvYWRpbmdTdGF0ZTtcblxuXHQvKipcblx0ICogU3BlY2lmeSB0aGUgdGV4dCBkZXNjcmlwdGlvbiBmb3IgdGhlIGxvYWRpbmcgc3RhdGUuXG5cdCAqL1xuXHRASW5wdXQoKSBzdGF0ZTogSW5saW5lTG9hZGluZ1N0YXRlIHwgc3RyaW5nID0gSW5saW5lTG9hZGluZ1N0YXRlLkFjdGl2ZTtcblx0LyoqXG5cdCAqIFNwZWNpZnkgdGhlIHRleHQgZGVzY3JpcHRpb24gZm9yIHRoZSBsb2FkaW5nIHN0YXRlLlxuXHQgKi9cblx0QElucHV0KCkgbG9hZGluZ1RleHQ6IHN0cmluZztcblx0LyoqXG5cdCAqIFNwZWNpZnkgdGhlIHRleHQgZGVzY3JpcHRpb24gZm9yIHRoZSBzdWNjZXNzIHN0YXRlLlxuXHQgKi9cblx0QElucHV0KCkgc3VjY2Vzc1RleHQ6IHN0cmluZztcblx0LyoqXG5cdCAqIFByb3ZpZGUgYSBkZWxheSBmb3IgdGhlIGBzZXRUaW1lb3V0YCBmb3Igc3VjY2Vzcy5cblx0ICovXG5cdEBJbnB1dCgpIHN1Y2Nlc3NEZWxheSA9IDE1MDA7XG5cdC8qKlxuXHQgKiBTcGVjaWZ5IHRoZSB0ZXh0IGRlc2NyaXB0aW9uIGZvciB0aGUgZXJyb3Igc3RhdGUuXG5cdCAqL1xuXHRASW5wdXQoKSBlcnJvclRleHQ6IHN0cmluZztcblx0LyoqXG5cdCAqIHNldCB0byBgZmFsc2VgIHRvIHN0b3AgdGhlIGxvYWRpbmcgYW5pbWF0aW9uXG5cdCAqL1xuXHRASW5wdXQoKSBnZXQgaXNBY3RpdmUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc3RhdGUgPT09IElubGluZUxvYWRpbmdTdGF0ZS5BY3RpdmU7XG5cdH1cblx0c2V0IGlzQWN0aXZlKGFjdGl2ZTogYm9vbGVhbikge1xuXHRcdHRoaXMuc3RhdGUgPSBhY3RpdmUgPyBJbmxpbmVMb2FkaW5nU3RhdGUuQWN0aXZlIDogSW5saW5lTG9hZGluZ1N0YXRlLkluYWN0aXZlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdmFsdWUgYHRydWVgIGlmIHRoZSBjb21wb25lbnQgaXMgaW4gdGhlIHN1Y2Nlc3Mgc3RhdGUuXG5cdCAqL1xuXHRASW5wdXQoKSBnZXQgc3VjY2VzcygpIHtcblx0XHRyZXR1cm4gdGhpcy5zdGF0ZSA9PT0gSW5saW5lTG9hZGluZ1N0YXRlLkZpbmlzaGVkO1xuXHR9XG5cdC8qKlxuXHQgKiBTZXQgdGhlIGNvbXBvbmVudCdzIHN0YXRlIHRvIG1hdGNoIHRoZSBwYXJhbWV0ZXIgYW5kIGVtaXRzIG9uU3VjY2VzcyBpZiBpdCBleGl0cy5cblx0ICovXG5cdHNldCBzdWNjZXNzKHN1Y2Nlc3M6IGJvb2xlYW4pIHtcblx0XHR0aGlzLnN0YXRlID0gc3VjY2VzcyA/IElubGluZUxvYWRpbmdTdGF0ZS5GaW5pc2hlZCA6IElubGluZUxvYWRpbmdTdGF0ZS5FcnJvcjtcblx0XHRpZiAodGhpcy5zdGF0ZSA9PT0gSW5saW5lTG9hZGluZ1N0YXRlLkZpbmlzaGVkKSB7XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0dGhpcy5vblN1Y2Nlc3MuZW1pdCgpO1xuXHRcdFx0fSwgdGhpcy5zdWNjZXNzRGVsYXkpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBFbWl0cyBldmVudCBhZnRlciB0aGUgc3VjY2VzcyBzdGF0ZSBpcyBhY3RpdmVcblx0ICovXG5cdEBPdXRwdXQoKSBvblN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1pbmxpbmUtbG9hZGluZ1wiKSBsb2FkaW5nQ2xhc3MgPSB0cnVlO1xufVxuIl19