/**
 *
 * carbon-angular v0.0.0 | label.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, ElementRef, HostBinding, TemplateRef, ViewChild, ContentChild } from "@angular/core";
import { TextArea } from "./text-area.directive";
/**
 * [See demo](../../?path=/story/components-input--label)
 *
 * ```html
 * <ibm-label labelState="success">
 * 	<label label>Field with success</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 *
 * <ibm-label labelState="warning">
 * 	<label label>Field with warning</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 *
 * <ibm-label labelState="error">
 * 	<label label>Field with error</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 * ```
 *
 * <example-url>../../iframe.html?id=components-input--label</example-url>
 */
var Label = /** @class */ (function () {
    /**
     * Creates an instance of Label.
     */
    function Label() {
        /**
         * The class of the wrapper
         */
        this.wrapperClass = "bx--text-input__field-wrapper";
        /**
         * The id of the input item associated with the `Label`. This value is also used to associate the `Label` with
         * its input counterpart through the 'for' attribute.
        */
        this.labelInputID = "ibm-label-" + Label.labelCounter;
        /**
         * State of the `Label` will determine the styles applied.
         */
        this.labelState = "";
        /**
         * Set to `true` for a disabled label.
         */
        this.disabled = false;
        /**
         * Set to `true` for a loading label.
         */
        this.skeleton = false;
        /**
         * Set to `true` for an invalid label component.
         */
        this.invalid = false;
        /**
          * Set to `true` to show a warning (contents set by warningText)
          */
        this.warn = false;
        this.labelClass = true;
        Label.labelCounter++;
    }
    /**
     * Update wrapper class if a textarea is hosted.
     */
    Label.prototype.ngAfterContentInit = function () {
        if (this.textArea) {
            this.wrapperClass = "bx--text-area__wrapper";
        }
    };
    /**
     * Sets the id on the input item associated with the `Label`.
     */
    Label.prototype.ngAfterViewInit = function () {
        if (this.wrapper) {
            var inputElement = this.wrapper.nativeElement.querySelector("input,textarea,div");
            if (inputElement) {
                inputElement.setAttribute("id", this.labelInputID);
            }
        }
    };
    Label.prototype.isTemplate = function (value) {
        return value instanceof TemplateRef;
    };
    /**
     * Used to build the id of the input item associated with the `Label`.
     */
    Label.labelCounter = 0;
    Label.decorators = [
        { type: Component, args: [{
                    selector: "ibm-label",
                    template: "\n\t\t<label\n\t\t\t[for]=\"labelInputID\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\tclass=\"bx--label\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--label--disabled': disabled,\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<ng-content></ng-content>\n\t\t</label>\n\t\t<div\n\t\t\t[class]=\"wrapperClass\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--text-input__field-wrapper--warning': warn\n\t\t\t}\"\n\t\t\t[attr.data-invalid]=\"(invalid ? true : null)\"\n\t\t\t#wrapper>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"!warn && invalid\"\n\t\t\t\tibmIcon=\"warning--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--text-input__invalid-icon': !textArea,\n\t\t\t\t\t'bx--text-area__invalid-icon': textArea\n\t\t\t\t}\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"!invalid && warn\"\n\t\t\t\tibmIcon=\"warning--alt--filled\"\n\t\t\t\tsize=\"16\"\n\t\t\t\tclass=\"bx--text-input__invalid-icon bx--text-input__invalid-icon--warning\">\n\t\t\t</svg>\n\t\t\t<ng-content select=\"input,textarea,div\"></ng-content>\n\t\t</div>\n\t\t<div\n\t\t\t*ngIf=\"!skeleton && helperText && !invalid && !warn\"\n\t\t\tclass=\"bx--form__helper-text\"\n\t\t\t[ngClass]=\"{'bx--form__helper-text--disabled': disabled}\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t</div>\n\t\t<div *ngIf=\"!warn && invalid\" class=\"bx--form-requirement\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(invalidText)\">{{invalidText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(invalidText)\" [ngTemplateOutlet]=\"invalidText\"></ng-template>\n\t\t</div>\n\t\t<div *ngIf=\"!invalid && warn\" class=\"bx--form-requirement\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(warnText)\">{{warnText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(warnText)\" [ngTemplateOutlet]=\"warnText\"></ng-template>\n\t\t</div>\n\t"
                }] }
    ];
    /** @nocollapse */
    Label.ctorParameters = function () { return []; };
    Label.propDecorators = {
        labelInputID: [{ type: Input }],
        labelState: [{ type: Input }],
        disabled: [{ type: Input }],
        skeleton: [{ type: Input }],
        helperText: [{ type: Input }],
        invalidText: [{ type: Input }],
        invalid: [{ type: Input }],
        warn: [{ type: Input }],
        warnText: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        wrapper: [{ type: ViewChild, args: ["wrapper", { static: false },] }],
        textArea: [{ type: ContentChild, args: [TextArea, { static: false },] }],
        labelClass: [{ type: HostBinding, args: ["class.bx--form-item",] }]
    };
    return Label;
}());
export { Label };
//# sourceMappingURL=data:application/json;base64,