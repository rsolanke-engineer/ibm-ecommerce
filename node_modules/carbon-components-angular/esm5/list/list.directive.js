/**
 *
 * carbon-angular v0.0.0 | list.directive.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, ElementRef, HostBinding } from "@angular/core";
/**
 * Applies either ordered or unordered styling to the list container it is applied to.
 *
 * [See demo](../../?path=/story/components-list--basic)
 *
 * For `ul`s it will apply unordered list styles, and for `ol`s it will apply ordered list styles.
 *
 * If a `ul` or `ol` is nested within a `li` the directive will apply nested list styling.
 *
 * <example-url>../../iframe.html?id=components-list--basic</example-url>
 */
var List = /** @class */ (function () {
    function List(elementRef) {
        this.elementRef = elementRef;
    }
    Object.defineProperty(List.prototype, "ordered", {
        get: function () {
            if (this.nested) {
                return false;
            }
            return this.elementRef.nativeElement.tagName === "OL";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "unordered", {
        get: function () {
            if (this.nested) {
                return false;
            }
            return this.elementRef.nativeElement.tagName === "UL";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "nested", {
        get: function () {
            return !!(this.elementRef.nativeElement.parentElement && this.elementRef.nativeElement.parentElement.tagName === "LI");
        },
        enumerable: true,
        configurable: true
    });
    List.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmList]"
                },] }
    ];
    /** @nocollapse */
    List.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    List.propDecorators = {
        ordered: [{ type: HostBinding, args: ["class.bx--list--ordered",] }],
        unordered: [{ type: HostBinding, args: ["class.bx--list--unordered",] }],
        nested: [{ type: HostBinding, args: ["class.bx--list--nested",] }]
    };
    return List;
}());
export { List };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2xpc3QvIiwic291cmNlcyI6WyJsaXN0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkU7Ozs7Ozs7Ozs7R0FVRztBQUNIO0lBa0JDLGNBQXNCLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFBRyxDQUFDO0lBZGhELHNCQUE0Qyx5QkFBTzthQUFuRDtZQUNDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFBRSxPQUFPLEtBQUssQ0FBQzthQUFFO1lBQ2xDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQztRQUN2RCxDQUFDOzs7T0FBQTtJQUVELHNCQUE4QywyQkFBUzthQUF2RDtZQUNDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFBRSxPQUFPLEtBQUssQ0FBQzthQUFFO1lBQ2xDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQztRQUN2RCxDQUFDOzs7T0FBQTtJQUVELHNCQUEyQyx3QkFBTTthQUFqRDtZQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDeEgsQ0FBQzs7O09BQUE7O2dCQWhCRCxTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLFdBQVc7aUJBQ3JCOzs7O2dCQWZtQixVQUFVOzs7MEJBaUI1QixXQUFXLFNBQUMseUJBQXlCOzRCQUtyQyxXQUFXLFNBQUMsMkJBQTJCO3lCQUt2QyxXQUFXLFNBQUMsd0JBQXdCOztJQUt0QyxXQUFDO0NBQUEsQUFuQkQsSUFtQkM7U0FoQlksSUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG4vKipcbiAqIEFwcGxpZXMgZWl0aGVyIG9yZGVyZWQgb3IgdW5vcmRlcmVkIHN0eWxpbmcgdG8gdGhlIGxpc3QgY29udGFpbmVyIGl0IGlzIGFwcGxpZWQgdG8uXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy1saXN0LS1iYXNpYylcbiAqXG4gKiBGb3IgYHVsYHMgaXQgd2lsbCBhcHBseSB1bm9yZGVyZWQgbGlzdCBzdHlsZXMsIGFuZCBmb3IgYG9sYHMgaXQgd2lsbCBhcHBseSBvcmRlcmVkIGxpc3Qgc3R5bGVzLlxuICpcbiAqIElmIGEgYHVsYCBvciBgb2xgIGlzIG5lc3RlZCB3aXRoaW4gYSBgbGlgIHRoZSBkaXJlY3RpdmUgd2lsbCBhcHBseSBuZXN0ZWQgbGlzdCBzdHlsaW5nLlxuICpcbiAqIDxleGFtcGxlLXVybD4uLi8uLi9pZnJhbWUuaHRtbD9pZD1jb21wb25lbnRzLWxpc3QtLWJhc2ljPC9leGFtcGxlLXVybD5cbiAqL1xuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiBcIltpYm1MaXN0XVwiXG59KVxuZXhwb3J0IGNsYXNzIExpc3Qge1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tbGlzdC0tb3JkZXJlZFwiKSBnZXQgb3JkZXJlZCgpIHtcblx0XHRpZiAodGhpcy5uZXN0ZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnRhZ05hbWUgPT09IFwiT0xcIjtcblx0fVxuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1saXN0LS11bm9yZGVyZWRcIikgZ2V0IHVub3JkZXJlZCgpIHtcblx0XHRpZiAodGhpcy5uZXN0ZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnRhZ05hbWUgPT09IFwiVUxcIjtcblx0fVxuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1saXN0LS1uZXN0ZWRcIikgZ2V0IG5lc3RlZCgpIHtcblx0XHRyZXR1cm4gISEodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCAmJiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50LnRhZ05hbWUgPT09IFwiTElcIik7XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cbn1cbiJdfQ==