/**
 *
 * carbon-angular v0.0.0 | alert-modal.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Component, Inject, ViewChild, Optional } from "@angular/core";
import { BaseModal } from "./base-modal.class";
/**
 * Component to create standard modals for presenting content or asking for user's input.
 * It can show as a passive modal showing only text or show as a transactional modal with
 * multiple buttons for different actions for the user to choose from.
 *
 * Using a modal in your application requires `ibm-placeholder` which would generally be
 * placed near the end of your app component template (app.component.ts or app.component.html) as:
 *
 * ```html
 * <ibm-placeholder></ibm-placeholder>
 * ```
 *
 * Example of opening the modal:
 *
 * ```typescript
 * \@Component({
 *  selector: "app-modal-demo",
 *  template: `
 *   <button class="btn--primary" (click)="openModal()">Open modal</button>
 *   <ibm-placeholder></ibm-placeholder>`
 * })
 * export class ModalDemo {
 * 	openModal() {
 * 		this.modalService.show({
 *			modalType: "default",
 *			label: "optional header text",
 *			title: "Modal title",
 *			text: "Modal text",
 *			buttons: [{
 *				text: "Button text",
 *				type: "primary",
 *				click: clickFunction
 *			}]
 *		});
 * 	}
 * }
 * ```
 */
var AlertModal = /** @class */ (function (_super) {
    tslib_1.__extends(AlertModal, _super);
    /**
     * Creates an instance of `AlertModal`.
     */
    function AlertModal(type, label, title, content, size, hasScrollingContent, buttons, onClose, showCloseButton) {
        if (type === void 0) { type = "default"; }
        if (hasScrollingContent === void 0) { hasScrollingContent = null; }
        if (buttons === void 0) { buttons = []; }
        if (showCloseButton === void 0) { showCloseButton = true; }
        var _this = _super.call(this) || this;
        _this.type = type;
        _this.label = label;
        _this.title = title;
        _this.content = content;
        _this.size = size;
        _this.hasScrollingContent = hasScrollingContent;
        _this.buttons = buttons;
        _this.onClose = onClose;
        _this.showCloseButton = showCloseButton;
        for (var i = 0; i < _this.buttons.length; i++) {
            var button = _this.buttons[i];
            if (!button.id) {
                button.id = "alert-modal-button-" + i;
            }
            if (!button.type) {
                button.type = "secondary";
            }
        }
        return _this;
    }
    AlertModal.prototype.ngAfterViewInit = function () {
        if (!this.modalContent) {
            return false;
        }
        var element = this.modalContent.nativeElement;
        if (element.scrollHeight > element.clientHeight) {
            element.tabIndex = 0;
        }
        else {
            element.tabIndex = -1;
        }
    };
    AlertModal.prototype.buttonClicked = function (buttonIndex) {
        var button = this.buttons[buttonIndex];
        if (button.click) {
            button.click();
        }
        this.closeModal();
    };
    AlertModal.prototype.dismissModal = function (trigger) {
        if (this.onClose && this.onClose(trigger) === false) {
            return;
        }
        this.closeModal();
    };
    AlertModal.decorators = [
        { type: Component, args: [{
                    selector: "ibm-alert-modal",
                    template: "\n\t\t<ibm-modal\n\t\t\t[size]=\"size\"\n\t\t\t[theme]=\"type\"\n\t\t\t[ariaLabel]=\"title\"\n\t\t\t[hasScrollingContent]=\"hasScrollingContent\"\n\t\t\t[open]=\"open\"\n\t\t\t(overlaySelected)=\"dismissModal('overlay')\">\n\t\t\t<ibm-modal-header (closeSelect)=\"dismissModal('close')\" [showCloseButton]=\"showCloseButton\">\n\t\t\t\t<p ibmModalHeaderLabel class=\"bx--type-delta\">{{label}}</p>\n\t\t\t\t<p ibmModalHeaderHeading class=\"bx--type-beta\">{{title}}</p>\n\t\t\t</ibm-modal-header>\n\t\t\t<div ibmModalContent #modalContent>\n\t\t\t\t<p [innerHTML]=\"content\"></p>\n\t\t\t</div>\n\t\t\t<ibm-modal-footer *ngIf=\"buttons.length > 0\">\n\t\t\t\t<ng-container *ngFor=\"let button of buttons; let i = index\">\n\t\t\t\t\t<button\n\t\t\t\t\t\t[ibmButton]=\"button.type\"\n\t\t\t\t\t\t(click)=\"buttonClicked(i)\"\n\t\t\t\t\t\t[id]=\"button.id\"\n\t\t\t\t\t\t[attr.modal-primary-focus]=\"(button.type.indexOf('primary') !== -1 ? '' : null)\">\n\t\t\t\t\t\t{{button.text}}\n\t\t\t\t\t</button>\n\t\t\t\t</ng-container>\n\t\t\t</ibm-modal-footer>\n\t\t</ibm-modal>\n\t"
                }] }
    ];
    /** @nocollapse */
    AlertModal.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ["type",] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: ["label",] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: ["title",] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: ["content",] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: ["size",] }] },
        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: ["hasScrollingContent",] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ["buttons",] }] },
        { type: Function, decorators: [{ type: Optional }, { type: Inject, args: ["close",] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ["showCloseButton",] }] }
    ]; };
    AlertModal.propDecorators = {
        modalContent: [{ type: ViewChild, args: ["modalContent", { static: true },] }]
    };
    return AlertModal;
}(BaseModal));
export { AlertModal };
//# sourceMappingURL=data:application/json;base64,