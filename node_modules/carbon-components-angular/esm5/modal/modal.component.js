/**
 *
 * carbon-angular v0.0.0 | modal.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ModalService } from "./modal.service";
import { Component, EventEmitter, HostListener, Input, Output, ElementRef, ViewChild } from "@angular/core";
import { cycleTabs, getFocusElementList } from "carbon-components-angular/common";
/**
 * Component to create modals for presenting content.
 *
 * [See demo](../../?path=/story/components-modal--basic)
 *
 * Using a modal in your application requires `ibm-placeholder` which would generally be
 * placed near the end of your app component template (app.component.ts or app.component.html) as:
 *
```html
<ibm-placeholder></ibm-placeholder>
```
 *
 * A more complete example for `Modal` is given as follows:
 *
 * Example modal definition:
 *
```typescript
@Component({
    selector: "app-sample-modal",
    template: `
                <ibm-modal size="xl" (overlaySelected)="closeModal()">
                    <ibm-modal-header (closeSelect)="closeModal()">Header text</ibm-modal-header>
                        <section class="modal-body">
                            <h1>Sample modal works.</h1>
                            <button class="btn--icon-link" nPopover="Hello there" title="Popover title" placement="right" appendInline="true">
                                <svg ibmIcon="info" size="sm"></svg>
                            </button>
                            {{modalText}}
                        </section>
                    <ibm-modal-footer><button ibmButton="primary" (click)="closeModal()">Close</button></ibm-modal-footer>
                </ibm-modal>`,
    styleUrls: ["./sample-modal.component.scss"]
})
export class SampleModal extends BaseModal {
    modalText: string;
    constructor(protected injector: Injector) {
        super();
        this.modalText = this.injector.get("modalText");
    }
}
```
 *
 * Example of opening the modal:
 *
```typescript
@Component({
    selector: "app-modal-demo",
    template: `
                <button ibmButton="primary" (click)="openModal('drill')">Drill-down modal</button>
                <ibm-placeholder></ibm-placeholder>`
})
export class ModalDemo {
    openModal() {
        this.modalService.create({component: SampleModal, inputs: {modalText: "Hello universe."}});
    }
}
```
 *
 * <example-url>../../iframe.html?id=components-modal--basic</example-url>
 */
var Modal = /** @class */ (function () {
    /**
     * Creates an instance of `Modal`.
     */
    function Modal(modalService) {
        this.modalService = modalService;
        /**
         * Classification of the modal.
         */
        this.theme = "default";
        this.ariaLabel = "default";
        /**
         * Controls the visibility of the modal when used directly in a template
         */
        this.open = false;
        /**
         * Specify whether the modal contains scrolling content. This property overrides the automatic
         * detection of the existence of scrolling content. Set this property to `true` to force
         * overflow indicator to show up or to `false` to force overflow indicator to disappear.
         * It is set to `null` by default which indicates not to override automatic detection.
         */
        this.hasScrollingContent = null;
        /**
         * Emits event when click occurs within `n-overlay` element. This is to track click events occurring outside bounds of the `Modal` object.
         */
        this.overlaySelected = new EventEmitter();
        /**
         * To emit the closing event of the modal window.
         */
        this.close = new EventEmitter();
        /**
         * An element should have 'modal-primary-focus' as an attribute to receive initial focus within the `Modal` component.
         */
        this.selectorPrimaryFocus = "[modal-primary-focus]";
    }
    Object.defineProperty(Modal.prototype, "modalLabel", {
        get: function () {
            return this.ariaLabel;
        },
        /**
         * Label for the modal.
         *
         * @deprecated since v4
         */
        set: function (value) {
            this.ariaLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    Modal.prototype.ngOnChanges = function (_a) {
        var _this = this;
        var open = _a.open;
        if (open) {
            if (open.currentValue) {
                // `100` is just enough time to allow the modal
                // to become visible, so that we can set focus
                setTimeout(function () { return _this.focusInitialElement(); }, 100);
            }
            else if (this.trigger) {
                this.trigger.focus();
            }
        }
    };
    /**
     * Set document focus to be on the modal component after it is initialized.
     */
    Modal.prototype.ngAfterViewInit = function () {
        this.focusInitialElement();
    };
    /**
     * Handle keyboard events to close modal and tab through the content within the modal.
     */
    Modal.prototype.handleKeyboardEvent = function (event) {
        switch (event.key) {
            case "Escape": {
                event.stopImmediatePropagation(); // prevents events being fired for multiple modals if more than 2 open
                this.modalService.destroy(); // destroy top (latest) modal
                this.close.emit();
                break;
            }
            case "Tab": {
                cycleTabs(event, this.modal.nativeElement);
                break;
            }
        }
    };
    Object.defineProperty(Modal.prototype, "shouldShowScrollbar", {
        /**
         * This detects whether or not the modal contains scrolling content.
         *
         * To force trigger a detection (ie. on window resize), change or reset the value of the modal content.
         *
         * Use the `hasScrollingContent` input to manually override the overflow indicator.
         */
        get: function () {
            var modalContent = this.modal ? this.modal.nativeElement.querySelector(".bx--modal-content") : null;
            if (modalContent) {
                // get rounded value from height to match integer returned from scrollHeight
                var modalContentHeight = Math.ceil(modalContent.getBoundingClientRect().height);
                var modalContentScrollHeight = modalContent.scrollHeight;
                return modalContentScrollHeight > modalContentHeight;
            }
            else {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Modal.prototype.focusInitialElement = function () {
        var _this = this;
        var primaryFocusElement = this.modal.nativeElement.querySelector(this.selectorPrimaryFocus);
        if (primaryFocusElement && primaryFocusElement.focus) {
            setTimeout(function () { return primaryFocusElement.focus(); });
        }
        else if (getFocusElementList(this.modal.nativeElement).length > 0) {
            setTimeout(function () { return getFocusElementList(_this.modal.nativeElement)[0].focus(); });
        }
        else {
            setTimeout(function () { return _this.modal.nativeElement.focus(); });
        }
    };
    Modal.decorators = [
        { type: Component, args: [{
                    selector: "ibm-modal",
                    template: "\n\t\t<ibm-overlay\n\t\t\t[theme]=\"theme\"\n\t\t\t[open]=\"open\"\n\t\t\t(overlaySelect)=\"overlaySelected.emit()\">\n\t\t\t<div\n\t\t\t\tclass=\"bx--modal-container\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--modal-container--xs': size === 'xs',\n\t\t\t\t\t'bx--modal-container--sm': size === 'sm',\n\t\t\t\t\t'bx--modal-container--lg': size === 'lg'\n\t\t\t\t}\"\n\t\t\t\trole=\"dialog\"\n\t\t\t\taria-modal=\"true\"\n\t\t\t\tstyle=\"z-index:1;\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\t#modal>\n\t\t\t\t<ng-content></ng-content>\n\t\t\t\t<div\n\t\t\t\t\t*ngIf=\"hasScrollingContent !== null ? hasScrollingContent : shouldShowScrollbar\"\n\t\t\t\t\tclass=\"bx--modal-content--overflow-indicator\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ibm-overlay>\n\t"
                }] }
    ];
    /** @nocollapse */
    Modal.ctorParameters = function () { return [
        { type: ModalService }
    ]; };
    Modal.propDecorators = {
        size: [{ type: Input }],
        theme: [{ type: Input }],
        modalLabel: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        open: [{ type: Input }],
        trigger: [{ type: Input }],
        hasScrollingContent: [{ type: Input }],
        overlaySelected: [{ type: Output }],
        close: [{ type: Output }],
        modal: [{ type: ViewChild, args: ["modal", { static: true },] }],
        handleKeyboardEvent: [{ type: HostListener, args: ["keydown", ["$event"],] }]
    };
    return Modal;
}());
export { Modal };
//# sourceMappingURL=data:application/json;base64,