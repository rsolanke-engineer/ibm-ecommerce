/**
 *
 * carbon-angular v0.0.0 | toast.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Component, Input, HostBinding } from "@angular/core";
import { Notification } from "./notification.component";
import { ExperimentalService } from "carbon-components-angular/experimental";
import { NotificationDisplayService } from "./notification-display.service";
import { I18n } from "carbon-components-angular/i18n";
/**
 * Toast messages are displayed toward the top of the UI and do not interrupt userâ€™s work.
 *
 * [See demo](../../?path=/story/components-notification--toast)
 *
 * <example-url>../../iframe.html?id=components-notification--toast</example-url>
 */
var Toast = /** @class */ (function (_super) {
    tslib_1.__extends(Toast, _super);
    function Toast(notificationDisplayService, i18n, experimental) {
        var _this = _super.call(this, notificationDisplayService, i18n) || this;
        _this.notificationDisplayService = notificationDisplayService;
        _this.i18n = i18n;
        _this.experimental = experimental;
        _this.toastID = "toast-" + Toast.toastCount++;
        _this.toastClass = true;
        _this.role = "alert";
        // disable inline notification styles
        _this.notificationClass = false;
        return _this;
    }
    Object.defineProperty(Toast.prototype, "isError", {
        get: function () { return this.notificationObj["type"] === "error"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toast.prototype, "isInfo", {
        get: function () { return this.notificationObj["type"] === "info"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toast.prototype, "isSuccess", {
        get: function () { return this.notificationObj["type"] === "success"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toast.prototype, "isWarning", {
        get: function () { return this.notificationObj["type"] === "warning"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toast.prototype, "isLowContrast", {
        get: function () { return this.notificationObj.lowContrast; },
        enumerable: true,
        configurable: true
    });
    Toast.prototype.ngOnInit = function () {
        if (!this.notificationObj.closeLabel) {
            this.notificationObj.closeLabel = this.i18n.get().NOTIFICATION.CLOSE_BUTTON;
        }
    };
    Toast.toastCount = 0;
    Toast.decorators = [
        { type: Component, args: [{
                    selector: "ibm-toast",
                    template: "\n\t\t<svg\n\t\t\tibmIcon=\"error--filled\"\n\t\t\tsize=\"20\"\n\t\t\t*ngIf=\"notificationObj.type === 'error'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<svg\n\t\t\tibmIcon=\"warning--filled\"\n\t\t\tsize=\"20\"\n\t\t\t*ngIf=\"notificationObj.type === 'warning'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<svg\n\t\t\tibmIcon=\"checkmark--filled\"\n\t\t\tsize=\"20\"\n\t\t\t*ngIf=\"notificationObj.type === 'success'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<svg\n\t\t\tibmIcon=\"information--filled\"\n\t\t\tsize=\"20\"\n\t\t\t*ngIf=\"notificationObj.type === 'info'\"\n\t\t\tclass=\"bx--toast-notification__icon\">\n\t\t</svg>\n\t\t<div class=\"bx--toast-notification__details\">\n\t\t\t<h3 *ngIf=\"!notificationObj.template\" ibmToastTitle [innerHTML]=\"notificationObj.title\"></h3>\n\t\t\t<div *ngIf=\"!notificationObj.template\" ibmToastSubtitle>\n\t\t\t\t<span [innerHTML]=\"notificationObj.subtitle\"></span>\n\t\t\t\t<ng-container *ngFor=\"let link of notificationObj.links\">\n\t\t\t\t\t<a ibmLink [href]=\"link.href\"> {{link.text}}</a>\n\t\t\t\t</ng-container>\n\t\t\t</div>\n\t\t\t<p *ngIf=\"!notificationObj.template\" ibmToastCaption [innerHTML]=\"notificationObj.caption\"></p>\n\t\t\t<ng-container *ngTemplateOutlet=\"notificationObj.template; context: { $implicit: notificationObj}\"></ng-container>\n\t\t</div>\n\t\t<button\n\t\t\t*ngIf=\"!isCloseHidden\"\n\t\t\tclass=\"bx--toast-notification__close-button\"\n\t\t\ttype=\"button\"\n\t\t\t[attr.aria-label]=\"notificationObj.closeLabel\"\n\t\t\t(click)=\"onClose()\">\n\t\t\t<svg ibmIcon=\"close\" size=\"16\" class=\"bx--toast-notification__close-icon\"></svg>\n\t\t</button>\n\t"
                }] }
    ];
    /** @nocollapse */
    Toast.ctorParameters = function () { return [
        { type: NotificationDisplayService },
        { type: I18n },
        { type: ExperimentalService }
    ]; };
    Toast.propDecorators = {
        notificationObj: [{ type: Input }],
        toastID: [{ type: HostBinding, args: ["attr.id",] }],
        toastClass: [{ type: HostBinding, args: ["class.bx--toast-notification",] }],
        role: [{ type: HostBinding, args: ["attr.role",] }],
        isError: [{ type: HostBinding, args: ["class.bx--toast-notification--error",] }],
        isInfo: [{ type: HostBinding, args: ["class.bx--toast-notification--info",] }],
        isSuccess: [{ type: HostBinding, args: ["class.bx--toast-notification--success",] }],
        isWarning: [{ type: HostBinding, args: ["class.bx--toast-notification--warning",] }],
        isLowContrast: [{ type: HostBinding, args: ["class.bx--toast-notification--low-contrast",] }]
    };
    return Toast;
}(Notification));
export { Toast };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9ub3RpZmljYXRpb24vIiwic291cmNlcyI6WyJ0b2FzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsS0FBSyxFQUVMLFdBQVcsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDN0UsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDNUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRXREOzs7Ozs7R0FNRztBQUNIO0lBZ0QyQixpQ0FBWTtJQW1CdEMsZUFDVywwQkFBc0QsRUFDdEQsSUFBVSxFQUNWLFlBQWlDO1FBSDVDLFlBSUMsa0JBQU0sMEJBQTBCLEVBQUUsSUFBSSxDQUFDLFNBR3ZDO1FBTlUsZ0NBQTBCLEdBQTFCLDBCQUEwQixDQUE0QjtRQUN0RCxVQUFJLEdBQUosSUFBSSxDQUFNO1FBQ1Ysa0JBQVksR0FBWixZQUFZLENBQXFCO1FBYnBCLGFBQU8sR0FBRyxXQUFTLEtBQUssQ0FBQyxVQUFVLEVBQUksQ0FBQztRQUNuQixnQkFBVSxHQUFHLElBQUksQ0FBQztRQUNyQyxVQUFJLEdBQUcsT0FBTyxDQUFDO1FBYXhDLHFDQUFxQztRQUNyQyxLQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDOztJQUNoQyxDQUFDO0lBYkQsc0JBQXdELDBCQUFPO2FBQS9ELGNBQW9FLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUN0SCxzQkFBdUQseUJBQU07YUFBN0QsY0FBa0UsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBQ25ILHNCQUEwRCw0QkFBUzthQUFuRSxjQUF3RSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFDNUgsc0JBQTBELDRCQUFTO2FBQW5FLGNBQXdFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUM1SCxzQkFBK0QsZ0NBQWE7YUFBNUUsY0FBaUYsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBVzNILHdCQUFRLEdBQVI7UUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUU7WUFDckMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO1NBQzVFO0lBQ0YsQ0FBQztJQS9CYyxnQkFBVSxHQUFHLENBQUMsQ0FBQzs7Z0JBakQ5QixTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFFBQVEsRUFBRSwyckRBNENUO2lCQUNEOzs7O2dCQXpEUSwwQkFBMEI7Z0JBQzFCLElBQUk7Z0JBRkosbUJBQW1COzs7a0NBa0UxQixLQUFLOzBCQUVMLFdBQVcsU0FBQyxTQUFTOzZCQUNyQixXQUFXLFNBQUMsOEJBQThCO3VCQUMxQyxXQUFXLFNBQUMsV0FBVzswQkFFdkIsV0FBVyxTQUFDLHFDQUFxQzt5QkFDakQsV0FBVyxTQUFDLG9DQUFvQzs0QkFDaEQsV0FBVyxTQUFDLHVDQUF1Qzs0QkFDbkQsV0FBVyxTQUFDLHVDQUF1QztnQ0FDbkQsV0FBVyxTQUFDLDRDQUE0Qzs7SUFnQjFELFlBQUM7Q0FBQSxBQWpGRCxDQWdEMkIsWUFBWSxHQWlDdEM7U0FqQ1ksS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdE9uSW5pdCxcblx0SG9zdEJpbmRpbmdcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgVG9hc3RDb250ZW50IH0gZnJvbSBcIi4vbm90aWZpY2F0aW9uLWNvbnRlbnQuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tIFwiLi9ub3RpZmljYXRpb24uY29tcG9uZW50XCI7XG5pbXBvcnQgeyBFeHBlcmltZW50YWxTZXJ2aWNlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvZXhwZXJpbWVudGFsXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25EaXNwbGF5U2VydmljZSB9IGZyb20gXCIuL25vdGlmaWNhdGlvbi1kaXNwbGF5LnNlcnZpY2VcIjtcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5cbi8qKlxuICogVG9hc3QgbWVzc2FnZXMgYXJlIGRpc3BsYXllZCB0b3dhcmQgdGhlIHRvcCBvZiB0aGUgVUkgYW5kIGRvIG5vdCBpbnRlcnJ1cHQgdXNlcuKAmXMgd29yay5cbiAqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLW5vdGlmaWNhdGlvbi0tdG9hc3QpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtbm90aWZpY2F0aW9uLS10b2FzdDwvZXhhbXBsZS11cmw+XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tdG9hc3RcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8c3ZnXG5cdFx0XHRpYm1JY29uPVwiZXJyb3ItLWZpbGxlZFwiXG5cdFx0XHRzaXplPVwiMjBcIlxuXHRcdFx0Km5nSWY9XCJub3RpZmljYXRpb25PYmoudHlwZSA9PT0gJ2Vycm9yJ1wiXG5cdFx0XHRjbGFzcz1cImJ4LS10b2FzdC1ub3RpZmljYXRpb25fX2ljb25cIj5cblx0XHQ8L3N2Zz5cblx0XHQ8c3ZnXG5cdFx0XHRpYm1JY29uPVwid2FybmluZy0tZmlsbGVkXCJcblx0XHRcdHNpemU9XCIyMFwiXG5cdFx0XHQqbmdJZj1cIm5vdGlmaWNhdGlvbk9iai50eXBlID09PSAnd2FybmluZydcIlxuXHRcdFx0Y2xhc3M9XCJieC0tdG9hc3Qtbm90aWZpY2F0aW9uX19pY29uXCI+XG5cdFx0PC9zdmc+XG5cdFx0PHN2Z1xuXHRcdFx0aWJtSWNvbj1cImNoZWNrbWFyay0tZmlsbGVkXCJcblx0XHRcdHNpemU9XCIyMFwiXG5cdFx0XHQqbmdJZj1cIm5vdGlmaWNhdGlvbk9iai50eXBlID09PSAnc3VjY2VzcydcIlxuXHRcdFx0Y2xhc3M9XCJieC0tdG9hc3Qtbm90aWZpY2F0aW9uX19pY29uXCI+XG5cdFx0PC9zdmc+XG5cdFx0PHN2Z1xuXHRcdFx0aWJtSWNvbj1cImluZm9ybWF0aW9uLS1maWxsZWRcIlxuXHRcdFx0c2l6ZT1cIjIwXCJcblx0XHRcdCpuZ0lmPVwibm90aWZpY2F0aW9uT2JqLnR5cGUgPT09ICdpbmZvJ1wiXG5cdFx0XHRjbGFzcz1cImJ4LS10b2FzdC1ub3RpZmljYXRpb25fX2ljb25cIj5cblx0XHQ8L3N2Zz5cblx0XHQ8ZGl2IGNsYXNzPVwiYngtLXRvYXN0LW5vdGlmaWNhdGlvbl9fZGV0YWlsc1wiPlxuXHRcdFx0PGgzICpuZ0lmPVwiIW5vdGlmaWNhdGlvbk9iai50ZW1wbGF0ZVwiIGlibVRvYXN0VGl0bGUgW2lubmVySFRNTF09XCJub3RpZmljYXRpb25PYmoudGl0bGVcIj48L2gzPlxuXHRcdFx0PGRpdiAqbmdJZj1cIiFub3RpZmljYXRpb25PYmoudGVtcGxhdGVcIiBpYm1Ub2FzdFN1YnRpdGxlPlxuXHRcdFx0XHQ8c3BhbiBbaW5uZXJIVE1MXT1cIm5vdGlmaWNhdGlvbk9iai5zdWJ0aXRsZVwiPjwvc3Bhbj5cblx0XHRcdFx0PG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgbGluayBvZiBub3RpZmljYXRpb25PYmoubGlua3NcIj5cblx0XHRcdFx0XHQ8YSBpYm1MaW5rIFtocmVmXT1cImxpbmsuaHJlZlwiPiB7e2xpbmsudGV4dH19PC9hPlxuXHRcdFx0XHQ8L25nLWNvbnRhaW5lcj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PHAgKm5nSWY9XCIhbm90aWZpY2F0aW9uT2JqLnRlbXBsYXRlXCIgaWJtVG9hc3RDYXB0aW9uIFtpbm5lckhUTUxdPVwibm90aWZpY2F0aW9uT2JqLmNhcHRpb25cIj48L3A+XG5cdFx0XHQ8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwibm90aWZpY2F0aW9uT2JqLnRlbXBsYXRlOyBjb250ZXh0OiB7ICRpbXBsaWNpdDogbm90aWZpY2F0aW9uT2JqfVwiPjwvbmctY29udGFpbmVyPlxuXHRcdDwvZGl2PlxuXHRcdDxidXR0b25cblx0XHRcdCpuZ0lmPVwiIWlzQ2xvc2VIaWRkZW5cIlxuXHRcdFx0Y2xhc3M9XCJieC0tdG9hc3Qtbm90aWZpY2F0aW9uX19jbG9zZS1idXR0b25cIlxuXHRcdFx0dHlwZT1cImJ1dHRvblwiXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsXT1cIm5vdGlmaWNhdGlvbk9iai5jbG9zZUxhYmVsXCJcblx0XHRcdChjbGljayk9XCJvbkNsb3NlKClcIj5cblx0XHRcdDxzdmcgaWJtSWNvbj1cImNsb3NlXCIgc2l6ZT1cIjE2XCIgY2xhc3M9XCJieC0tdG9hc3Qtbm90aWZpY2F0aW9uX19jbG9zZS1pY29uXCI+PC9zdmc+XG5cdFx0PC9idXR0b24+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgVG9hc3QgZXh0ZW5kcyBOb3RpZmljYXRpb24gaW1wbGVtZW50cyBPbkluaXQge1xuXHRwcml2YXRlIHN0YXRpYyB0b2FzdENvdW50ID0gMDtcblx0LyoqXG5cdCAqIENhbiBoYXZlIGB0eXBlYCwgYHRpdGxlYCwgYHN1YnRpdGxlYCwgYW5kIGBjYXB0aW9uYCBtZW1iZXJzLlxuXHQgKlxuXHQgKiBgdHlwZWAgY2FuIGJlIG9uZSBvZiBgXCJlcnJvclwiYCwgYFwiaW5mb1wiYCwgYFwid2FybmluZ1wiYCwgb3IgYFwic3VjY2Vzc1wiYFxuXHQgKi9cblx0QElucHV0KCkgbm90aWZpY2F0aW9uT2JqOiBUb2FzdENvbnRlbnQ7XG5cblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5pZFwiKSB0b2FzdElEID0gYHRvYXN0LSR7VG9hc3QudG9hc3RDb3VudCsrfWA7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS10b2FzdC1ub3RpZmljYXRpb25cIikgdG9hc3RDbGFzcyA9IHRydWU7XG5cdEBIb3N0QmluZGluZyhcImF0dHIucm9sZVwiKSByb2xlID0gXCJhbGVydFwiO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS10b2FzdC1ub3RpZmljYXRpb24tLWVycm9yXCIpIGdldCBpc0Vycm9yKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmpbXCJ0eXBlXCJdID09PSBcImVycm9yXCI7IH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXRvYXN0LW5vdGlmaWNhdGlvbi0taW5mb1wiKSBnZXQgaXNJbmZvKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmpbXCJ0eXBlXCJdID09PSBcImluZm9cIjsgfVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tdG9hc3Qtbm90aWZpY2F0aW9uLS1zdWNjZXNzXCIpIGdldCBpc1N1Y2Nlc3MoKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9ialtcInR5cGVcIl0gPT09IFwic3VjY2Vzc1wiOyB9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS10b2FzdC1ub3RpZmljYXRpb24tLXdhcm5pbmdcIikgZ2V0IGlzV2FybmluZygpIHsgcmV0dXJuIHRoaXMubm90aWZpY2F0aW9uT2JqW1widHlwZVwiXSA9PT0gXCJ3YXJuaW5nXCI7IH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLXRvYXN0LW5vdGlmaWNhdGlvbi0tbG93LWNvbnRyYXN0XCIpIGdldCBpc0xvd0NvbnRyYXN0KCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmoubG93Q29udHJhc3Q7IH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcm90ZWN0ZWQgbm90aWZpY2F0aW9uRGlzcGxheVNlcnZpY2U6IE5vdGlmaWNhdGlvbkRpc3BsYXlTZXJ2aWNlLFxuXHRcdHByb3RlY3RlZCBpMThuOiBJMThuLFxuXHRcdHByb3RlY3RlZCBleHBlcmltZW50YWw6IEV4cGVyaW1lbnRhbFNlcnZpY2UpIHtcblx0XHRzdXBlcihub3RpZmljYXRpb25EaXNwbGF5U2VydmljZSwgaTE4bik7XG5cdFx0Ly8gZGlzYWJsZSBpbmxpbmUgbm90aWZpY2F0aW9uIHN0eWxlc1xuXHRcdHRoaXMubm90aWZpY2F0aW9uQ2xhc3MgPSBmYWxzZTtcblx0fVxuXG5cdG5nT25Jbml0KCkge1xuXHRcdGlmICghdGhpcy5ub3RpZmljYXRpb25PYmouY2xvc2VMYWJlbCkge1xuXHRcdFx0dGhpcy5ub3RpZmljYXRpb25PYmouY2xvc2VMYWJlbCA9IHRoaXMuaTE4bi5nZXQoKS5OT1RJRklDQVRJT04uQ0xPU0VfQlVUVE9OO1xuXHRcdH1cblx0fVxufVxuIl19