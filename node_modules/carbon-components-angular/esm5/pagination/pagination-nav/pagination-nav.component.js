/**
 *
 * carbon-angular v0.0.0 | pagination-nav.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { PaginationModel } from "../pagination-model.class";
import { Component, Input, Output, EventEmitter } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
import { ExperimentalService } from "carbon-components-angular/experimental";
import { merge } from "carbon-components-angular/utils";
import { range } from "carbon-components-angular/common";
/**
 * Use pagination when you have multiple pages of data to handle.
 *
 * [See demo](../../?path=/story/components-pagination-nav--basic)
 *
 * ```html
 * <ibm-pagination-nav [model]="model" (selectPage)="selectPage($event)"></ibm-pagination-nav>
 * ```
 *
 * In your `selectPage()` method set the `model.currentPage` to selected page, _after_
 * you load the page.
 *
 * ```typescript
 * selectPage(page) {
 * 	// ... your code to load the page goes here
 *
 * 	this.model.currentPage = page;
 *
 * 	// ... anything you want to do after page selection changes goes here
 * }
 * ```
 *
 * <example-url>../../iframe.html?id=components-pagination-nav--basic</example-url>
 */
var PaginationNav = /** @class */ (function () {
    function PaginationNav(i18n, experimental) {
        this.i18n = i18n;
        this.experimental = experimental;
        /**
         * Set to `true` to disable the backward/forward buttons.
         */
        this.disabled = false;
        /**
         * Number of items to show in pagination. Minimum is 4.
         */
        this.numOfItemsToShow = 4;
        /**
         * Emits the new page number.
         *
         * You should tie into this and update `model.currentPage` once the fresh
         * data is finally loaded.
         */
        this.selectPage = new EventEmitter();
        this.nextItemText = this.i18n.getOverridable("PAGINATION.NEXT");
        this.previousItemText = this.i18n.getOverridable("PAGINATION.PREVIOUS");
        PaginationNav.paginationCounter++;
    }
    Object.defineProperty(PaginationNav.prototype, "translations", {
        /**
         * Expects an object that contains some or all of:
         * ```
         * {
         *		"NEXT": "Next",
         *		"PREVIOUS": "Previous",
         * }
         * ```
         */
        set: function (value) {
            var valueWithDefaults = merge(this.i18n.getMultiple("PAGINATION"), value);
            this.nextItemText.override(valueWithDefaults.NEXT);
            this.previousItemText.override(valueWithDefaults.PREVIOUS);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "totalNumbersArray", {
        get: function () {
            return range(this.totalDataLength + 1, 1);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "currentPage", {
        get: function () {
            return this.model.currentPage;
        },
        set: function (value) {
            value = Number(value);
            // emits the value to allow the user to update current page
            // in the model once the page is loaded
            this.selectPage.emit(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "totalDataLength", {
        get: function () {
            return this.model.totalDataLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "startOffset", {
        get: function () {
            return this.numOfItemsToShow <= 4 && this.currentPage > 1 ? 0 : 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "frontCuts", {
        get: function () {
            var cuts = this.getCuts();
            return cuts.front;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "backCuts", {
        get: function () {
            var cuts = this.getCuts();
            return cuts.back;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "leftArrowDisabled", {
        get: function () {
            return this.disabled || this.currentPage === 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationNav.prototype, "rightArrowDisabled", {
        get: function () {
            return this.disabled || this.currentPage === this.totalDataLength;
        },
        enumerable: true,
        configurable: true
    });
    PaginationNav.prototype.handleOverflowSelection = function (page) {
        if (typeof page === "number") {
            this.currentPage = page;
        }
    };
    PaginationNav.prototype.jumpToNext = function () {
        this.currentPage = this.currentPage < this.totalDataLength ? this.currentPage + 1 : this.totalDataLength;
    };
    PaginationNav.prototype.jumpToPrevious = function () {
        this.currentPage = this.currentPage > 1 ? this.currentPage - 1 : 1;
    };
    PaginationNav.prototype.getPages = function () {
        if (this.totalDataLength <= 1) {
            return null;
        }
        var cuts = this.getCuts();
        return this.totalNumbersArray.slice(this.startOffset + cuts.front, (1 + cuts.back) * -1);
    };
    PaginationNav.prototype.getCuts = function (splitPoint) {
        if (splitPoint === void 0) { splitPoint = null; }
        var page = this.currentPage - 1;
        var totalItems = this.totalDataLength;
        var itemsThatFit = this.numOfItemsToShow;
        if (itemsThatFit >= totalItems) {
            return {
                front: 0,
                back: 0
            };
        }
        var split = splitPoint || Math.ceil(itemsThatFit / 2) - 1;
        var frontHidden = page + 1 - split;
        var backHidden = totalItems - page - (itemsThatFit - split) + 1;
        if (frontHidden <= 1) {
            backHidden -= frontHidden <= 0 ? Math.abs(frontHidden) + 1 : 0;
            frontHidden = 0;
        }
        if (backHidden <= 1) {
            frontHidden -= backHidden <= 0 ? Math.abs(backHidden) + 1 : 0;
            backHidden = 0;
        }
        return {
            front: frontHidden,
            back: backHidden
        };
    };
    PaginationNav.paginationCounter = 0;
    PaginationNav.decorators = [
        { type: Component, args: [{
                    selector: "ibm-pagination-nav",
                    template: "\n\t<div>\n\t\t<div class=\"bx--pagination-nav\">\n\t\t\t<ul class=\"bx--pagination-nav__list\">\n\t\t\t\t<li class=\"bx--pagination-nav__list-item\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"bx--btn bx--btn--ghost bx--pagination-nav-previous\n\t\t\t\t\t\tbx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--tooltip--bottom bx--tooltip--align-center\"\n\t\t\t\t\t\t[disabled]=\"leftArrowDisabled\"\n\t\t\t\t\t\t(click)=\"jumpToPrevious()\">\n\t\t\t\t\t\t<span class=\"bx--assistive-text\">{{previousItemText.subject | async}}</span>\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tibmIcon=\"caret--left\"\n\t\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\t\tstyle=\"display: inherit\"\n\t\t\t\t\t\t\tclass=\"bx--btn__icon\">\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t\t<ibm-pagination-nav-item\n\t\t\t\t\t*ngIf=\"this.numOfItemsToShow >= 5 || (this.numOfItemsToShow <= 4 && currentPage <= 1)\"\n\t\t\t\t\tpage=\"1\"\n\t\t\t\t\t(click)=\"currentPage = 1\"\n\t\t\t\t\t[isActive]=\"currentPage == 1\">\n\t\t\t\t</ibm-pagination-nav-item>\n\t\t\t\t<ibm-pagination-overflow\n\t\t\t\t\t*ngIf=\"frontCuts\"\n\t\t\t\t\t[count]=\"frontCuts\"\n\t\t\t\t\t[fromIndex]=\"startOffset\"\n\t\t\t\t\t(change)=\"handleOverflowSelection($event)\">\n\t\t\t\t</ibm-pagination-overflow>\n\t\t\t\t<ibm-pagination-nav-item\n\t\t\t\t\t*ngFor=\"let page of getPages();\"\n\t\t\t\t\t[page]=\"page\"\n\t\t\t\t\t(click)=\"currentPage = page\"\n\t\t\t\t\t[isActive]=\"currentPage == page\">\n\t\t\t\t</ibm-pagination-nav-item>\n\t\t\t\t<ibm-pagination-overflow\n\t\t\t\t\t*ngIf=\"backCuts\"\n\t\t\t\t\t[count]=\"backCuts\"\n\t\t\t\t\t[fromIndex]=\"totalNumbersArray.length - backCuts - 1\"\n\t\t\t\t\t(change)=\"handleOverflowSelection($event)\">\n\t\t\t\t</ibm-pagination-overflow>\n\t\t\t\t<ibm-pagination-nav-item\n\t\t\t\t\t*ngIf=\"totalDataLength > 1\"\n\t\t\t\t\t[page]=\"totalNumbersArray.length\"\n\t\t\t\t\t(click)=\"currentPage = totalNumbersArray.length\"\n\t\t\t\t\t[isActive]=\"currentPage == totalNumbersArray.length\">\n\t\t\t\t</ibm-pagination-nav-item>\n\t\t\t\t<li class=\"bx--pagination-nav__list-item\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"bx--btn bx--btn--ghost bx--pagination-nav-next\n\t\t\t\t\t\tbx--btn--icon-only bx--tooltip__trigger bx--tooltip--a11y bx--tooltip--bottom bx--tooltip--align-center\"\n\t\t\t\t\t\t[disabled]=\"rightArrowDisabled\"\n\t\t\t\t\t\t(click)=\"jumpToNext()\">\n\t\t\t\t\t\t<span class=\"bx--assistive-text\">{{nextItemText.subject | async}}</span>\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tibmIcon=\"caret--right\"\n\t\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\t\tstyle=\"display: inherit\"\n\t\t\t\t\t\t\tclass=\"bx--btn__icon\">\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\t"
                }] }
    ];
    /** @nocollapse */
    PaginationNav.ctorParameters = function () { return [
        { type: I18n },
        { type: ExperimentalService }
    ]; };
    PaginationNav.propDecorators = {
        model: [{ type: Input }],
        disabled: [{ type: Input }],
        numOfItemsToShow: [{ type: Input }],
        translations: [{ type: Input }],
        selectPage: [{ type: Output }]
    };
    return PaginationNav;
}());
export { PaginationNav };
//# sourceMappingURL=data:application/json;base64,