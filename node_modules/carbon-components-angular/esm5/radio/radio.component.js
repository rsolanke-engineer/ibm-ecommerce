/**
 *
 * carbon-angular v0.0.0 | radio.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, Output, EventEmitter } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { RadioChange } from "./radio-change.class";
/**
 * class: Radio (extends Checkbox)
 *
 * selector: `n-radio`
 *
 * source: `src/forms/radio.component.ts`
 *
 * ```html
 * <ibm-radio [(ngModel)]="radioState">Radio</ibm-radio>
 * ```
 *
 * Also see: [`RadioGroup`](#ibm-radio-group)
 */
var Radio = /** @class */ (function () {
    function Radio() {
        this.checked = false;
        this.name = "";
        this.disabled = false;
        this.labelPlacement = "right";
        /**
         * Used to set the `aria-label` attribute on the input label.
         */
        this.ariaLabel = "";
        /**
         * Sets the HTML required attribute
         */
        this.required = false;
        /**
         * The value of the `Radio`.
         */
        this.value = "";
        /**
         * Set to `true` for a loading table.
         */
        this.skeleton = false;
        /**
         * The id for the `Radio`.
         */
        this.id = "radio-" + Radio.radioCount++;
        /**
         * emits when the state of the radio changes
         */
        this.change = new EventEmitter();
        this.hostClass = true;
        /**
         * Reflects whether or not the input is disabled at `RadioGroup` level.
         */
        this.disabledFromGroup = false;
        this._labelledby = "";
        /**
         * Handler provided by the `RadioGroup` to bubble events up
         */
        this.radioChangeHandler = function (event) { };
    }
    Object.defineProperty(Radio.prototype, "ariaLabelledby", {
        get: function () {
            if (this._labelledby) {
                return this._labelledby;
            }
            return "label-" + this.id;
        },
        set: function (value) {
            this._labelledby = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Radio.prototype, "labelLeft", {
        get: function () {
            return this.labelPlacement === "left";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Synchronizes with the `RadioGroup` in the event of a changed `Radio`.
     * Emits the changes of both the `RadioGroup` and `Radio`.
     */
    Radio.prototype.onChange = function (event) {
        event.stopPropagation();
    };
    Radio.prototype.onClick = function (event) {
        this.checked = event.target.checked;
        var radioEvent = new RadioChange(this, this.value);
        this.change.emit(radioEvent);
        this.radioChangeHandler(radioEvent);
    };
    /**
     * Method called by `RadioGroup` with a callback function to bubble `RadioChange` events
     * @param fn callback that expects a `RadioChange` as an argument
     */
    Radio.prototype.registerRadioChangeHandler = function (fn) {
        this.radioChangeHandler = fn;
    };
    Radio.prototype.setDisabledFromGroup = function (disabled) {
        this.disabledFromGroup = disabled;
    };
    /**
     * Used to dynamically create unique ids for the `Radio`.
     */
    Radio.radioCount = 0;
    Radio.decorators = [
        { type: Component, args: [{
                    selector: "ibm-radio",
                    template: "\n\t\t<input\n\t\t\t*ngIf=\"!skeleton\"\n\t\t\tclass=\"bx--radio-button\"\n\t\t\ttype=\"radio\"\n\t\t\t[checked]=\"checked\"\n\t\t\t[disabled]=\"disabled || disabledFromGroup\"\n\t\t\t[name]=\"name\"\n\t\t\t[id]=\"id\"\n\t\t\t[required]=\"required\"\n\t\t\t[value]=\"value\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t(change)=\"onChange($event)\"\n\t\t\t(click)=\"onClick($event)\">\n\t\t<div *ngIf=\"skeleton\" class=\"bx--radio-button bx--skeleton\"></div>\n\t\t<label\n\t\t\tclass=\"bx--radio-button__label\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\"\n\t\t\t[for]=\"id\"\n\t\t\tid=\"label-{{id}}\">\n\t\t\t<span class=\"bx--radio-button__appearance\"></span>\n\t\t\t<ng-content></ng-content>\n\t\t</label>\n\t",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: Radio,
                            multi: true
                        }
                    ]
                }] }
    ];
    Radio.propDecorators = {
        checked: [{ type: Input }],
        name: [{ type: Input }],
        disabled: [{ type: Input }],
        labelPlacement: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        required: [{ type: Input }],
        value: [{ type: Input }],
        skeleton: [{ type: Input }],
        id: [{ type: Input }],
        change: [{ type: Output }],
        hostClass: [{ type: HostBinding, args: ["class.bx--radio-button-wrapper",] }],
        labelLeft: [{ type: HostBinding, args: ["class.bx--radio-button-wrapper--label-left",] }]
    };
    return Radio;
}());
export { Radio };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9yYWRpby8iLCJzb3VyY2VzIjpbInJhZGlvLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxXQUFXLEVBQ1gsTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbkQ7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0g7SUFBQTtRQTJDVSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRWhCLFNBQUksR0FBRyxFQUFFLENBQUM7UUFFVixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLG1CQUFjLEdBQXNCLE9BQU8sQ0FBQztRQWFyRDs7V0FFRztRQUNNLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFFeEI7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzFCOztXQUVHO1FBQ00sVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNwQjs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDMUI7O1dBRUc7UUFDTSxPQUFFLEdBQUcsV0FBUyxLQUFLLENBQUMsVUFBVSxFQUFJLENBQUM7UUFDNUM7O1dBRUc7UUFDTyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQWUsQ0FBQztRQUVKLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFNaEU7O1dBRUc7UUFDSCxzQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFFaEIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFFM0I7O1dBRUc7UUFDSCx1QkFBa0IsR0FBRyxVQUFDLEtBQWtCLElBQU0sQ0FBQyxDQUFDO0lBNEJqRCxDQUFDO0lBakZBLHNCQUFhLGlDQUFjO2FBSTNCO1lBQ0MsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNyQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7YUFDeEI7WUFDRCxPQUFPLFdBQVMsSUFBSSxDQUFDLEVBQUksQ0FBQztRQUMzQixDQUFDO2FBVEQsVUFBNEIsS0FBYTtZQUN4QyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUMxQixDQUFDOzs7T0FBQTtJQXFDRCxzQkFBK0QsNEJBQVM7YUFBeEU7WUFDQyxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssTUFBTSxDQUFDO1FBQ3ZDLENBQUM7OztPQUFBO0lBY0Q7OztPQUdHO0lBQ0gsd0JBQVEsR0FBUixVQUFTLEtBQVk7UUFDcEIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCx1QkFBTyxHQUFQLFVBQVEsS0FBWTtRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFJLEtBQUssQ0FBQyxNQUEyQixDQUFDLE9BQU8sQ0FBQztRQUMxRCxJQUFNLFVBQVUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsMENBQTBCLEdBQTFCLFVBQTJCLEVBQWdDO1FBQzFELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELG9DQUFvQixHQUFwQixVQUFxQixRQUFpQjtRQUNyQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDO0lBQ25DLENBQUM7SUE3RkQ7O09BRUc7SUFDSSxnQkFBVSxHQUFHLENBQUMsQ0FBQzs7Z0JBekN0QixTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFFBQVEsRUFBRSx1eEJBMEJUO29CQUNELFNBQVMsRUFBRTt3QkFDVjs0QkFDQyxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsS0FBSzs0QkFDbEIsS0FBSyxFQUFFLElBQUk7eUJBQ1g7cUJBQ0Q7aUJBQ0Q7OzswQkFPQyxLQUFLO3VCQUVMLEtBQUs7MkJBRUwsS0FBSztpQ0FFTCxLQUFLO2lDQUVMLEtBQUs7NEJBY0wsS0FBSzsyQkFLTCxLQUFLO3dCQUlMLEtBQUs7MkJBSUwsS0FBSztxQkFJTCxLQUFLO3lCQUlMLE1BQU07NEJBRU4sV0FBVyxTQUFDLGdDQUFnQzs0QkFFNUMsV0FBVyxTQUFDLDRDQUE0Qzs7SUEwQzFELFlBQUM7Q0FBQSxBQXBJRCxJQW9JQztTQS9GWSxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0SG9zdEJpbmRpbmcsXG5cdE91dHB1dCxcblx0RXZlbnRFbWl0dGVyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgUmFkaW9DaGFuZ2UgfSBmcm9tIFwiLi9yYWRpby1jaGFuZ2UuY2xhc3NcIjtcblxuLyoqXG4gKiBjbGFzczogUmFkaW8gKGV4dGVuZHMgQ2hlY2tib3gpXG4gKlxuICogc2VsZWN0b3I6IGBuLXJhZGlvYFxuICpcbiAqIHNvdXJjZTogYHNyYy9mb3Jtcy9yYWRpby5jb21wb25lbnQudHNgXG4gKlxuICogYGBgaHRtbFxuICogPGlibS1yYWRpbyBbKG5nTW9kZWwpXT1cInJhZGlvU3RhdGVcIj5SYWRpbzwvaWJtLXJhZGlvPlxuICogYGBgXG4gKlxuICogQWxzbyBzZWU6IFtgUmFkaW9Hcm91cGBdKCNpYm0tcmFkaW8tZ3JvdXApXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tcmFkaW9cIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8aW5wdXRcblx0XHRcdCpuZ0lmPVwiIXNrZWxldG9uXCJcblx0XHRcdGNsYXNzPVwiYngtLXJhZGlvLWJ1dHRvblwiXG5cdFx0XHR0eXBlPVwicmFkaW9cIlxuXHRcdFx0W2NoZWNrZWRdPVwiY2hlY2tlZFwiXG5cdFx0XHRbZGlzYWJsZWRdPVwiZGlzYWJsZWQgfHwgZGlzYWJsZWRGcm9tR3JvdXBcIlxuXHRcdFx0W25hbWVdPVwibmFtZVwiXG5cdFx0XHRbaWRdPVwiaWRcIlxuXHRcdFx0W3JlcXVpcmVkXT1cInJlcXVpcmVkXCJcblx0XHRcdFt2YWx1ZV09XCJ2YWx1ZVwiXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsbGVkYnldPVwiYXJpYUxhYmVsbGVkYnlcIlxuXHRcdFx0KGNoYW5nZSk9XCJvbkNoYW5nZSgkZXZlbnQpXCJcblx0XHRcdChjbGljayk9XCJvbkNsaWNrKCRldmVudClcIj5cblx0XHQ8ZGl2ICpuZ0lmPVwic2tlbGV0b25cIiBjbGFzcz1cImJ4LS1yYWRpby1idXR0b24gYngtLXNrZWxldG9uXCI+PC9kaXY+XG5cdFx0PGxhYmVsXG5cdFx0XHRjbGFzcz1cImJ4LS1yYWRpby1idXR0b25fX2xhYmVsXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiYXJpYUxhYmVsXCJcblx0XHRcdFtuZ0NsYXNzXT1cIntcblx0XHRcdFx0J2J4LS1za2VsZXRvbic6IHNrZWxldG9uXG5cdFx0XHR9XCJcblx0XHRcdFtmb3JdPVwiaWRcIlxuXHRcdFx0aWQ9XCJsYWJlbC17e2lkfX1cIj5cblx0XHRcdDxzcGFuIGNsYXNzPVwiYngtLXJhZGlvLWJ1dHRvbl9fYXBwZWFyYW5jZVwiPjwvc3Bhbj5cblx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHQ8L2xhYmVsPlxuXHRgLFxuXHRwcm92aWRlcnM6IFtcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcblx0XHRcdHVzZUV4aXN0aW5nOiBSYWRpbyxcblx0XHRcdG11bHRpOiB0cnVlXG5cdFx0fVxuXHRdXG59KVxuZXhwb3J0IGNsYXNzIFJhZGlvIHtcblx0LyoqXG5cdCAqIFVzZWQgdG8gZHluYW1pY2FsbHkgY3JlYXRlIHVuaXF1ZSBpZHMgZm9yIHRoZSBgUmFkaW9gLlxuXHQgKi9cblx0c3RhdGljIHJhZGlvQ291bnQgPSAwO1xuXG5cdEBJbnB1dCgpIGNoZWNrZWQgPSBmYWxzZTtcblxuXHRASW5wdXQoKSBuYW1lID0gXCJcIjtcblxuXHRASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuXG5cdEBJbnB1dCgpIGxhYmVsUGxhY2VtZW50OiBcInJpZ2h0XCIgfCBcImxlZnRcIiA9ICBcInJpZ2h0XCI7XG5cblx0QElucHV0KCkgc2V0IGFyaWFMYWJlbGxlZGJ5KHZhbHVlOiBzdHJpbmcpIHtcblx0XHR0aGlzLl9sYWJlbGxlZGJ5ID0gdmFsdWU7XG5cdH1cblxuXHRnZXQgYXJpYUxhYmVsbGVkYnkoKSB7XG5cdFx0aWYgKHRoaXMuX2xhYmVsbGVkYnkpIHtcblx0XHRcdHJldHVybiB0aGlzLl9sYWJlbGxlZGJ5O1xuXHRcdH1cblx0XHRyZXR1cm4gYGxhYmVsLSR7dGhpcy5pZH1gO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gc2V0IHRoZSBgYXJpYS1sYWJlbGAgYXR0cmlidXRlIG9uIHRoZSBpbnB1dCBsYWJlbC5cblx0ICovXG5cdEBJbnB1dCgpIGFyaWFMYWJlbCA9IFwiXCI7XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIEhUTUwgcmVxdWlyZWQgYXR0cmlidXRlXG5cdCAqL1xuXHRASW5wdXQoKSByZXF1aXJlZCA9IGZhbHNlO1xuXHQvKipcblx0ICogVGhlIHZhbHVlIG9mIHRoZSBgUmFkaW9gLlxuXHQgKi9cblx0QElucHV0KCkgdmFsdWUgPSBcIlwiO1xuXHQvKipcblx0ICogU2V0IHRvIGB0cnVlYCBmb3IgYSBsb2FkaW5nIHRhYmxlLlxuXHQgKi9cblx0QElucHV0KCkgc2tlbGV0b24gPSBmYWxzZTtcblx0LyoqXG5cdCAqIFRoZSBpZCBmb3IgdGhlIGBSYWRpb2AuXG5cdCAqL1xuXHRASW5wdXQoKSBpZCA9IGByYWRpby0ke1JhZGlvLnJhZGlvQ291bnQrK31gO1xuXHQvKipcblx0ICogZW1pdHMgd2hlbiB0aGUgc3RhdGUgb2YgdGhlIHJhZGlvIGNoYW5nZXNcblx0ICovXG5cdEBPdXRwdXQoKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPFJhZGlvQ2hhbmdlPigpO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1yYWRpby1idXR0b24td3JhcHBlclwiKSBob3N0Q2xhc3MgPSB0cnVlO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1yYWRpby1idXR0b24td3JhcHBlci0tbGFiZWwtbGVmdFwiKSBnZXQgbGFiZWxMZWZ0KCkge1xuXHRcdHJldHVybiB0aGlzLmxhYmVsUGxhY2VtZW50ID09PSBcImxlZnRcIjtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWZsZWN0cyB3aGV0aGVyIG9yIG5vdCB0aGUgaW5wdXQgaXMgZGlzYWJsZWQgYXQgYFJhZGlvR3JvdXBgIGxldmVsLlxuXHQgKi9cblx0ZGlzYWJsZWRGcm9tR3JvdXAgPSBmYWxzZTtcblxuXHRwcm90ZWN0ZWQgX2xhYmVsbGVkYnkgPSBcIlwiO1xuXG5cdC8qKlxuXHQgKiBIYW5kbGVyIHByb3ZpZGVkIGJ5IHRoZSBgUmFkaW9Hcm91cGAgdG8gYnViYmxlIGV2ZW50cyB1cFxuXHQgKi9cblx0cmFkaW9DaGFuZ2VIYW5kbGVyID0gKGV2ZW50OiBSYWRpb0NoYW5nZSkgPT4ge307XG5cblx0LyoqXG5cdCAqIFN5bmNocm9uaXplcyB3aXRoIHRoZSBgUmFkaW9Hcm91cGAgaW4gdGhlIGV2ZW50IG9mIGEgY2hhbmdlZCBgUmFkaW9gLlxuXHQgKiBFbWl0cyB0aGUgY2hhbmdlcyBvZiBib3RoIHRoZSBgUmFkaW9Hcm91cGAgYW5kIGBSYWRpb2AuXG5cdCAqL1xuXHRvbkNoYW5nZShldmVudDogRXZlbnQpIHtcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxuXG5cdG9uQ2xpY2soZXZlbnQ6IEV2ZW50KSB7XG5cdFx0dGhpcy5jaGVja2VkID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkO1xuXHRcdGNvbnN0IHJhZGlvRXZlbnQgPSBuZXcgUmFkaW9DaGFuZ2UodGhpcywgdGhpcy52YWx1ZSk7XG5cdFx0dGhpcy5jaGFuZ2UuZW1pdChyYWRpb0V2ZW50KTtcblx0XHR0aGlzLnJhZGlvQ2hhbmdlSGFuZGxlcihyYWRpb0V2ZW50KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBNZXRob2QgY2FsbGVkIGJ5IGBSYWRpb0dyb3VwYCB3aXRoIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYnViYmxlIGBSYWRpb0NoYW5nZWAgZXZlbnRzXG5cdCAqIEBwYXJhbSBmbiBjYWxsYmFjayB0aGF0IGV4cGVjdHMgYSBgUmFkaW9DaGFuZ2VgIGFzIGFuIGFyZ3VtZW50XG5cdCAqL1xuXHRyZWdpc3RlclJhZGlvQ2hhbmdlSGFuZGxlcihmbjogKGV2ZW50OiBSYWRpb0NoYW5nZSkgPT4gdm9pZCkge1xuXHRcdHRoaXMucmFkaW9DaGFuZ2VIYW5kbGVyID0gZm47XG5cdH1cblxuXHRzZXREaXNhYmxlZEZyb21Hcm91cChkaXNhYmxlZDogYm9vbGVhbikge1xuXHRcdHRoaXMuZGlzYWJsZWRGcm9tR3JvdXAgPSBkaXNhYmxlZDtcblx0fVxufVxuIl19