/**
 *
 * carbon-angular v0.0.0 | structured-list.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, ContentChildren, QueryList, Output, EventEmitter } from "@angular/core";
import { ListRow } from "./list-row.component";
import { ListHeader } from "./list-header.component";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
/**
 * Structured Lists represent related tabular data. For larger datasets consider a full `Table`.
 *
 * [See demo](../../?path=/story/components-structured-list--basic)
 *
 * See [structured-list/usage](https://www.carbondesignsystem.com/components/structured-list/usage) for usage guidance.
 *
 * A basic structued list looks something like:
 * ```html
 *	<ibm-structured-list>
 *		<ibm-list-header>
 *			<ibm-list-column nowrap="true">Column 1</ibm-list-column>
 *			<ibm-list-column nowrap="true">Column 2</ibm-list-column>
 *			<ibm-list-column>Column 3</ibm-list-column>
 *		</ibm-list-header>
 *		<ibm-list-row>
 *			<ibm-list-column>Row 1</ibm-list-column>
 *			<ibm-list-column nowrap="true">Row One</ibm-list-column>
 *			<ibm-list-column>
 *				Lorem ipsum dolor sit amet,
 *				consectetur adipiscing elit. Nunc dui magna,
 *				finibus id tortor sed, aliquet bibendum augue.
 *				Aenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.
 *				Pellentesque vulputate nisl a porttitor interdum.
 *			</ibm-list-column>
 *		</ibm-list-row>
 *		<ibm-list-row>
 *			<ibm-list-column>Row 2</ibm-list-column>
 *			<ibm-list-column nowrap="true">Row Two</ibm-list-column>
 *			<ibm-list-column>
 *				Lorem ipsum dolor sit amet,
 *				consectetur adipiscing elit. Nunc dui magna,
 *				finibus id tortor sed, aliquet bibendum augue.
 *				Aenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.
 *				Pellentesque vulputate nisl a porttitor interdum.
 *			</ibm-list-column>
 *		</ibm-list-row>
 *	</ibm-structured-list>
 * ```
 *
 * <example-url>../../iframe.html?id=components-structured-list--basic</example-url>
 */
var StructuredList = /** @class */ (function () {
    function StructuredList() {
        /**
         * Set to `true` to enable radio like selection of the rows.
         */
        this.selection = false;
        /**
         * Set to `true` to apply a border and white background.
         */
        this.border = false;
        /**
         * Set to `true` to apply a condensed style to the headers and rows.
         */
        this.condensed = false;
        /**
         * Set to `true` to apply `white-space: nowrap` on _all_ conent.
         */
        this.nowrap = false;
        /**
         * Used when `selection = true` as the row radio group `name`
         */
        this.name = "structured-list-" + StructuredList.listCount++;
        /**
         * Emits an event when the row selection changes.
         *
         * Emits an object that looks like:
         * ```javascript
         * {
         * 	value: "something",
         * 	selected: true,
         * 	name: "structured-list-1"
         * }
         * ```
         */
        this.selected = new EventEmitter();
        this._skeleton = false;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    Object.defineProperty(StructuredList.prototype, "skeleton", {
        /**
         * Returns the skeleton value in the `StructuredList` if there is one.
         */
        get: function () {
            return this._skeleton;
        },
        /**
         * Sets the skeleton value for all `ListHeader` to the skeleton value of `StructuredList`.
         */
        set: function (value) {
            this._skeleton = value;
            this.updateChildren();
        },
        enumerable: true,
        configurable: true
    });
    StructuredList.prototype.ngAfterContentInit = function () {
        var _this = this;
        var setSelection = function (rowOrHeader) {
            rowOrHeader.selection = _this.selection;
        };
        this.headers.forEach(setSelection);
        this.rows.forEach(function (row) {
            setSelection(row);
            row.name = _this.name;
            row.tabindex = _this.selection ? "0" : "null";
            row.change.subscribe(function () {
                _this.selected.emit({
                    value: row.value,
                    selected: row.selected,
                    name: _this.name
                });
                _this.onChange(row.value);
            });
        });
        this.updateChildren();
    };
    StructuredList.prototype.writeValue = function (value) {
        if (!this.rows) {
            return;
        }
        this.rows.forEach(function (row) {
            if (row.value === value) {
                row.selected = true;
            }
            else {
                row.selected = false;
            }
        });
    };
    StructuredList.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    StructuredList.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    StructuredList.prototype.updateChildren = function () {
        var _this = this;
        if (this.headers) {
            this.headers.toArray().forEach(function (child) { return child.skeleton = _this.skeleton; });
        }
    };
    /**
     * A counter to provide unique default values.
     */
    StructuredList.listCount = 0;
    StructuredList.decorators = [
        { type: Component, args: [{
                    selector: "ibm-structured-list",
                    template: "\n\t\t<section\n\t\t\tclass=\"bx--structured-list\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--structured-list--border': border,\n\t\t\t\t'bx--structured-list--selection': selection,\n\t\t\t\t'bx--structured-list--condensed': condensed,\n\t\t\t\t'bx--structured-list-content--nowrap': nowrap,\n\t\t\t\t'bx--skeleton': skeleton\n\t\t\t}\">\n\t\t\t<ng-content select=\"ibm-list-header\"></ng-content>\n\t\t\t<div class=\"bx--structured-list-tbody\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</div>\n\t\t</section>\n\t",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: StructuredList,
                            multi: true
                        }
                    ]
                }] }
    ];
    StructuredList.propDecorators = {
        selection: [{ type: Input }],
        border: [{ type: Input }],
        condensed: [{ type: Input }],
        nowrap: [{ type: Input }],
        name: [{ type: Input }],
        skeleton: [{ type: Input }],
        selected: [{ type: Output }],
        rows: [{ type: ContentChildren, args: [ListRow,] }],
        headers: [{ type: ContentChildren, args: [ListHeader,] }]
    };
    return StructuredList;
}());
export { StructuredList };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlZC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvc3RydWN0dXJlZC1saXN0LyIsInNvdXJjZXMiOlsic3RydWN0dXJlZC1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxlQUFlLEVBQ2YsU0FBUyxFQUVULE1BQU0sRUFDTixZQUFZLEVBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQXdCLE1BQU0sZ0JBQWdCLENBQUM7QUFFekU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBeUNHO0FBQ0g7SUFBQTtRQStCQzs7V0FFRztRQUNNLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDM0I7O1dBRUc7UUFDTSxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3hCOztXQUVHO1FBQ00sY0FBUyxHQUFHLEtBQUssQ0FBQztRQUMzQjs7V0FFRztRQUNNLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDeEI7O1dBRUc7UUFDTSxTQUFJLEdBQUcscUJBQW1CLGNBQWMsQ0FBQyxTQUFTLEVBQUksQ0FBQztRQWtCaEU7Ozs7Ozs7Ozs7O1dBV0c7UUFDTyxhQUFRLEdBQW1FLElBQUksWUFBWSxFQUFFLENBQUM7UUFLOUYsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUU1QixhQUFRLEdBQUcsVUFBQyxDQUFNLElBQU8sQ0FBQyxDQUFDO1FBRTNCLGNBQVMsR0FBRyxjQUFRLENBQUMsQ0FBQztJQWdEdkIsQ0FBQztJQWxGQSxzQkFDSSxvQ0FBUTtRQUtaOztXQUVHO2FBQ0g7WUFDQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDdkIsQ0FBQztRQWREOztXQUVHO2FBQ0gsVUFDYSxLQUFVO1lBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixDQUFDOzs7T0FBQTtJQWdDRCwyQ0FBa0IsR0FBbEI7UUFBQSxpQkFvQkM7UUFuQkEsSUFBTSxZQUFZLEdBQUcsVUFBQyxXQUFpQztZQUN0RCxXQUFXLENBQUMsU0FBUyxHQUFHLEtBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEMsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO1lBQ3BCLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNsQixHQUFHLENBQUMsSUFBSSxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUM7WUFDckIsR0FBRyxDQUFDLFFBQVEsR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUM3QyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztnQkFDcEIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7b0JBQ2xCLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSztvQkFDaEIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRO29CQUN0QixJQUFJLEVBQUUsS0FBSSxDQUFDLElBQUk7aUJBQ2YsQ0FBQyxDQUFDO2dCQUNILEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELG1DQUFVLEdBQVYsVUFBVyxLQUFVO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztZQUNwQixJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUFFO2dCQUN4QixHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzthQUNwQjtpQkFBTTtnQkFDTixHQUFHLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQzthQUNyQjtRQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELHlDQUFnQixHQUFoQixVQUFpQixFQUFPO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCwwQ0FBaUIsR0FBakIsVUFBa0IsRUFBTztRQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRVMsdUNBQWMsR0FBeEI7UUFBQSxpQkFJQztRQUhBLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDLFFBQVEsRUFBOUIsQ0FBOEIsQ0FBQyxDQUFDO1NBQ3hFO0lBQ0YsQ0FBQztJQTdHRDs7T0FFRztJQUNJLHdCQUFTLEdBQUcsQ0FBQyxDQUFDOztnQkE5QnJCLFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUscUJBQXFCO29CQUMvQixRQUFRLEVBQUUsOGZBZVQ7b0JBQ0QsU0FBUyxFQUFFO3dCQUNWOzRCQUNDLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxjQUFjOzRCQUMzQixLQUFLLEVBQUUsSUFBSTt5QkFDWDtxQkFDRDtpQkFDRDs7OzRCQVNDLEtBQUs7eUJBSUwsS0FBSzs0QkFJTCxLQUFLO3lCQUlMLEtBQUs7dUJBSUwsS0FBSzsyQkFLTCxLQUFLOzJCQXlCTCxNQUFNO3VCQUVOLGVBQWUsU0FBQyxPQUFPOzBCQUN2QixlQUFlLFNBQUMsVUFBVTs7SUFzRDVCLHFCQUFDO0NBQUEsQUF6SUQsSUF5SUM7U0EvR1ksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdENvbnRlbnRDaGlsZHJlbixcblx0UXVlcnlMaXN0LFxuXHRBZnRlckNvbnRlbnRJbml0LFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlclxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTGlzdFJvdyB9IGZyb20gXCIuL2xpc3Qtcm93LmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgTGlzdEhlYWRlciB9IGZyb20gXCIuL2xpc3QtaGVhZGVyLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5cbi8qKlxuICogU3RydWN0dXJlZCBMaXN0cyByZXByZXNlbnQgcmVsYXRlZCB0YWJ1bGFyIGRhdGEuIEZvciBsYXJnZXIgZGF0YXNldHMgY29uc2lkZXIgYSBmdWxsIGBUYWJsZWAuXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy1zdHJ1Y3R1cmVkLWxpc3QtLWJhc2ljKVxuICpcbiAqIFNlZSBbc3RydWN0dXJlZC1saXN0L3VzYWdlXShodHRwczovL3d3dy5jYXJib25kZXNpZ25zeXN0ZW0uY29tL2NvbXBvbmVudHMvc3RydWN0dXJlZC1saXN0L3VzYWdlKSBmb3IgdXNhZ2UgZ3VpZGFuY2UuXG4gKlxuICogQSBiYXNpYyBzdHJ1Y3R1ZWQgbGlzdCBsb29rcyBzb21ldGhpbmcgbGlrZTpcbiAqIGBgYGh0bWxcbiAqXHQ8aWJtLXN0cnVjdHVyZWQtbGlzdD5cbiAqXHRcdDxpYm0tbGlzdC1oZWFkZXI+XG4gKlx0XHRcdDxpYm0tbGlzdC1jb2x1bW4gbm93cmFwPVwidHJ1ZVwiPkNvbHVtbiAxPC9pYm0tbGlzdC1jb2x1bW4+XG4gKlx0XHRcdDxpYm0tbGlzdC1jb2x1bW4gbm93cmFwPVwidHJ1ZVwiPkNvbHVtbiAyPC9pYm0tbGlzdC1jb2x1bW4+XG4gKlx0XHRcdDxpYm0tbGlzdC1jb2x1bW4+Q29sdW1uIDM8L2libS1saXN0LWNvbHVtbj5cbiAqXHRcdDwvaWJtLWxpc3QtaGVhZGVyPlxuICpcdFx0PGlibS1saXN0LXJvdz5cbiAqXHRcdFx0PGlibS1saXN0LWNvbHVtbj5Sb3cgMTwvaWJtLWxpc3QtY29sdW1uPlxuICpcdFx0XHQ8aWJtLWxpc3QtY29sdW1uIG5vd3JhcD1cInRydWVcIj5Sb3cgT25lPC9pYm0tbGlzdC1jb2x1bW4+XG4gKlx0XHRcdDxpYm0tbGlzdC1jb2x1bW4+XG4gKlx0XHRcdFx0TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsXG4gKlx0XHRcdFx0Y29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBOdW5jIGR1aSBtYWduYSxcbiAqXHRcdFx0XHRmaW5pYnVzIGlkIHRvcnRvciBzZWQsIGFsaXF1ZXQgYmliZW5kdW0gYXVndWUuXG4gKlx0XHRcdFx0QWVuZWFuIHBvc3VlcmUgc2VtIHZlbCBldWlzbW9kIGRpZ25pc3NpbS4gTnVsbGEgdXQgY3Vyc3VzIGRvbG9yLlxuICpcdFx0XHRcdFBlbGxlbnRlc3F1ZSB2dWxwdXRhdGUgbmlzbCBhIHBvcnR0aXRvciBpbnRlcmR1bS5cbiAqXHRcdFx0PC9pYm0tbGlzdC1jb2x1bW4+XG4gKlx0XHQ8L2libS1saXN0LXJvdz5cbiAqXHRcdDxpYm0tbGlzdC1yb3c+XG4gKlx0XHRcdDxpYm0tbGlzdC1jb2x1bW4+Um93IDI8L2libS1saXN0LWNvbHVtbj5cbiAqXHRcdFx0PGlibS1saXN0LWNvbHVtbiBub3dyYXA9XCJ0cnVlXCI+Um93IFR3bzwvaWJtLWxpc3QtY29sdW1uPlxuICpcdFx0XHQ8aWJtLWxpc3QtY29sdW1uPlxuICpcdFx0XHRcdExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LFxuICpcdFx0XHRcdGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gTnVuYyBkdWkgbWFnbmEsXG4gKlx0XHRcdFx0ZmluaWJ1cyBpZCB0b3J0b3Igc2VkLCBhbGlxdWV0IGJpYmVuZHVtIGF1Z3VlLlxuICpcdFx0XHRcdEFlbmVhbiBwb3N1ZXJlIHNlbSB2ZWwgZXVpc21vZCBkaWduaXNzaW0uIE51bGxhIHV0IGN1cnN1cyBkb2xvci5cbiAqXHRcdFx0XHRQZWxsZW50ZXNxdWUgdnVscHV0YXRlIG5pc2wgYSBwb3J0dGl0b3IgaW50ZXJkdW0uXG4gKlx0XHRcdDwvaWJtLWxpc3QtY29sdW1uPlxuICpcdFx0PC9pYm0tbGlzdC1yb3c+XG4gKlx0PC9pYm0tc3RydWN0dXJlZC1saXN0PlxuICogYGBgXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtc3RydWN0dXJlZC1saXN0LS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tc3RydWN0dXJlZC1saXN0XCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PHNlY3Rpb25cblx0XHRcdGNsYXNzPVwiYngtLXN0cnVjdHVyZWQtbGlzdFwiXG5cdFx0XHRbbmdDbGFzc109XCJ7XG5cdFx0XHRcdCdieC0tc3RydWN0dXJlZC1saXN0LS1ib3JkZXInOiBib3JkZXIsXG5cdFx0XHRcdCdieC0tc3RydWN0dXJlZC1saXN0LS1zZWxlY3Rpb24nOiBzZWxlY3Rpb24sXG5cdFx0XHRcdCdieC0tc3RydWN0dXJlZC1saXN0LS1jb25kZW5zZWQnOiBjb25kZW5zZWQsXG5cdFx0XHRcdCdieC0tc3RydWN0dXJlZC1saXN0LWNvbnRlbnQtLW5vd3JhcCc6IG5vd3JhcCxcblx0XHRcdFx0J2J4LS1za2VsZXRvbic6IHNrZWxldG9uXG5cdFx0XHR9XCI+XG5cdFx0XHQ8bmctY29udGVudCBzZWxlY3Q9XCJpYm0tbGlzdC1oZWFkZXJcIj48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiYngtLXN0cnVjdHVyZWQtbGlzdC10Ym9keVwiPlxuXHRcdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L3NlY3Rpb24+XG5cdGAsXG5cdHByb3ZpZGVyczogW1xuXHRcdHtcblx0XHRcdHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuXHRcdFx0dXNlRXhpc3Rpbmc6IFN0cnVjdHVyZWRMaXN0LFxuXHRcdFx0bXVsdGk6IHRydWVcblx0XHR9XG5cdF1cbn0pXG5leHBvcnQgY2xhc3MgU3RydWN0dXJlZExpc3QgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG5cdC8qKlxuXHQgKiBBIGNvdW50ZXIgdG8gcHJvdmlkZSB1bmlxdWUgZGVmYXVsdCB2YWx1ZXMuXG5cdCAqL1xuXHRzdGF0aWMgbGlzdENvdW50ID0gMDtcblx0LyoqXG5cdCAqIFNldCB0byBgdHJ1ZWAgdG8gZW5hYmxlIHJhZGlvIGxpa2Ugc2VsZWN0aW9uIG9mIHRoZSByb3dzLlxuXHQgKi9cblx0QElucHV0KCkgc2VsZWN0aW9uID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBTZXQgdG8gYHRydWVgIHRvIGFwcGx5IGEgYm9yZGVyIGFuZCB3aGl0ZSBiYWNrZ3JvdW5kLlxuXHQgKi9cblx0QElucHV0KCkgYm9yZGVyID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBTZXQgdG8gYHRydWVgIHRvIGFwcGx5IGEgY29uZGVuc2VkIHN0eWxlIHRvIHRoZSBoZWFkZXJzIGFuZCByb3dzLlxuXHQgKi9cblx0QElucHV0KCkgY29uZGVuc2VkID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBTZXQgdG8gYHRydWVgIHRvIGFwcGx5IGB3aGl0ZS1zcGFjZTogbm93cmFwYCBvbiBfYWxsXyBjb25lbnQuXG5cdCAqL1xuXHRASW5wdXQoKSBub3dyYXAgPSBmYWxzZTtcblx0LyoqXG5cdCAqIFVzZWQgd2hlbiBgc2VsZWN0aW9uID0gdHJ1ZWAgYXMgdGhlIHJvdyByYWRpbyBncm91cCBgbmFtZWBcblx0ICovXG5cdEBJbnB1dCgpIG5hbWUgPSBgc3RydWN0dXJlZC1saXN0LSR7U3RydWN0dXJlZExpc3QubGlzdENvdW50Kyt9YDtcblxuXHQvKipcblx0ICogU2V0cyB0aGUgc2tlbGV0b24gdmFsdWUgZm9yIGFsbCBgTGlzdEhlYWRlcmAgdG8gdGhlIHNrZWxldG9uIHZhbHVlIG9mIGBTdHJ1Y3R1cmVkTGlzdGAuXG5cdCAqL1xuXHRASW5wdXQoKVxuXHRzZXQgc2tlbGV0b24odmFsdWU6IGFueSkge1xuXHRcdHRoaXMuX3NrZWxldG9uID0gdmFsdWU7XG5cdFx0dGhpcy51cGRhdGVDaGlsZHJlbigpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHNrZWxldG9uIHZhbHVlIGluIHRoZSBgU3RydWN0dXJlZExpc3RgIGlmIHRoZXJlIGlzIG9uZS5cblx0ICovXG5cdGdldCBza2VsZXRvbigpOiBhbnkge1xuXHRcdHJldHVybiB0aGlzLl9za2VsZXRvbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBFbWl0cyBhbiBldmVudCB3aGVuIHRoZSByb3cgc2VsZWN0aW9uIGNoYW5nZXMuXG5cdCAqXG5cdCAqIEVtaXRzIGFuIG9iamVjdCB0aGF0IGxvb2tzIGxpa2U6XG5cdCAqIGBgYGphdmFzY3JpcHRcblx0ICoge1xuXHQgKiBcdHZhbHVlOiBcInNvbWV0aGluZ1wiLFxuXHQgKiBcdHNlbGVjdGVkOiB0cnVlLFxuXHQgKiBcdG5hbWU6IFwic3RydWN0dXJlZC1saXN0LTFcIlxuXHQgKiB9XG5cdCAqIGBgYFxuXHQgKi9cblx0QE91dHB1dCgpIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8e3ZhbHVlOiBzdHJpbmcsIHNlbGVjdGVkOiBib29sZWFuLCBuYW1lOiBzdHJpbmd9PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuXHRAQ29udGVudENoaWxkcmVuKExpc3RSb3cpIHJvd3M6IFF1ZXJ5TGlzdDxMaXN0Um93Pjtcblx0QENvbnRlbnRDaGlsZHJlbihMaXN0SGVhZGVyKSBoZWFkZXJzOiBRdWVyeUxpc3Q8TGlzdEhlYWRlcj47XG5cblx0cHJvdGVjdGVkIF9za2VsZXRvbiA9IGZhbHNlO1xuXG5cdG9uQ2hhbmdlID0gKF86IGFueSkgPT4geyB9O1xuXG5cdG9uVG91Y2hlZCA9ICgpID0+IHsgfTtcblxuXHRuZ0FmdGVyQ29udGVudEluaXQoKSB7XG5cdFx0Y29uc3Qgc2V0U2VsZWN0aW9uID0gKHJvd09ySGVhZGVyOiBMaXN0Um93IHwgTGlzdEhlYWRlcikgPT4ge1xuXHRcdFx0cm93T3JIZWFkZXIuc2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb247XG5cdFx0fTtcblxuXHRcdHRoaXMuaGVhZGVycy5mb3JFYWNoKHNldFNlbGVjdGlvbik7XG5cdFx0dGhpcy5yb3dzLmZvckVhY2gocm93ID0+IHtcblx0XHRcdHNldFNlbGVjdGlvbihyb3cpO1xuXHRcdFx0cm93Lm5hbWUgPSB0aGlzLm5hbWU7XG5cdFx0XHRyb3cudGFiaW5kZXggPSB0aGlzLnNlbGVjdGlvbiA/IFwiMFwiIDogXCJudWxsXCI7XG5cdFx0XHRyb3cuY2hhbmdlLnN1YnNjcmliZSgoKSA9PiB7XG5cdFx0XHRcdHRoaXMuc2VsZWN0ZWQuZW1pdCh7XG5cdFx0XHRcdFx0dmFsdWU6IHJvdy52YWx1ZSxcblx0XHRcdFx0XHRzZWxlY3RlZDogcm93LnNlbGVjdGVkLFxuXHRcdFx0XHRcdG5hbWU6IHRoaXMubmFtZVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0dGhpcy5vbkNoYW5nZShyb3cudmFsdWUpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0dGhpcy51cGRhdGVDaGlsZHJlbigpO1xuXHR9XG5cblx0d3JpdGVWYWx1ZSh2YWx1ZTogYW55KSB7XG5cdFx0aWYgKCF0aGlzLnJvd3MpIHsgcmV0dXJuOyB9XG5cdFx0dGhpcy5yb3dzLmZvckVhY2gocm93ID0+IHtcblx0XHRcdGlmIChyb3cudmFsdWUgPT09IHZhbHVlKSB7XG5cdFx0XHRcdHJvdy5zZWxlY3RlZCA9IHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyb3cuc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSkge1xuXHRcdHRoaXMub25DaGFuZ2UgPSBmbjtcblx0fVxuXG5cdHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpIHtcblx0XHR0aGlzLm9uVG91Y2hlZCA9IGZuO1xuXHR9XG5cblx0cHJvdGVjdGVkIHVwZGF0ZUNoaWxkcmVuKCkge1xuXHRcdGlmICh0aGlzLmhlYWRlcnMpIHtcblx0XHRcdHRoaXMuaGVhZGVycy50b0FycmF5KCkuZm9yRWFjaChjaGlsZCA9PiBjaGlsZC5za2VsZXRvbiA9IHRoaXMuc2tlbGV0b24pO1xuXHRcdH1cblx0fVxufVxuIl19