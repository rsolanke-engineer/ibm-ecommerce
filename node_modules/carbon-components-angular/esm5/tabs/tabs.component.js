/**
 *
 * carbon-angular v0.0.0 | tabs.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, ContentChildren, QueryList, ContentChild } from "@angular/core";
import { Tab } from "./tab.component";
import { TabHeaders } from "./tab-headers.component";
/**
 * Build out your application's tabs using this component.
 * This is the parent of the `Tab` and `TabHeader` components.
 *
 * [See demo](../../?path=/story/components-tabs--basic)
 *
 * `Tabs` expects a set of `n-tab` elements
 *
 * ```html
 * <ibm-tabs>
 * 	<ibm-tab heading='tab1'>
 * 		tab 1 content
 * 	</ibm-tab>
 * 	<ibm-tab heading='tab1'>
 * 		tab 2 content
 * 	</ibm-tab>
 * 	<!-- ... -->
 * 	<ibm-tab heading='tab1'>
 * 		tab n content
 * 	</ibm-tab>
 * </ibm-tabs>
 * ```
 *
 * <example-url>../../iframe.html?id=components-tabs--basic</example-url>
 */
var Tabs = /** @class */ (function () {
    function Tabs() {
        /**
         * Takes either the string value 'top' or 'bottom' to place TabHeader
         * relative to the `TabPanel`s.
         */
        this.position = "top";
        /**
         * Set to 'true' to have `Tab` items cached and not reloaded on tab switching.
         */
        this.cacheActive = false;
        /**
         * Set to 'true' to have tabs automatically activated and have their content displayed when they receive focus.
         */
        this.followFocus = true;
        /**
         * Set to `true` to put tabs in a loading state.
         */
        this.skeleton = false;
        /**
         * Set to `true` to have the tabIndex of the all tabpanels be -1.
         */
        this.isNavigation = false;
        /**
         * Sets the type of the `TabHeader`s
         */
        this.type = "default";
    }
    /**
     * After content is initialized update `Tab`s to cache (if turned on) and set the initial
     * selected Tab item.
     */
    Tabs.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.tabHeaders) {
            this.tabHeaders.cacheActive = this.cacheActive;
        }
        this.tabs.forEach(function (tab) {
            tab.tabIndex = _this.isNavigation ? null : 0;
        });
    };
    Tabs.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (this.tabHeaders && changes.cacheActive) {
            this.tabHeaders.cacheActive = this.cacheActive;
        }
        if (this.tabs && changes.isNavigation) {
            this.tabs.forEach(function (tab) {
                tab.tabIndex = _this.isNavigation ? null : 0;
            });
        }
    };
    /**
     * true if the n-tab's are passed directly to the component as children
     */
    Tabs.prototype.hasTabHeaders = function () {
        return this.tabs.length > 0;
    };
    Tabs.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tabs",
                    template: "\n\t\t\t<ibm-tab-headers\n\t\t\t\t*ngIf=\"hasTabHeaders() && position === 'top'\"\n\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t[tabs]=\"tabs\"\n\t\t\t\t[followFocus]=\"followFocus\"\n\t\t\t\t[cacheActive]=\"cacheActive\"\n\t\t\t\t[contentBefore]=\"before\"\n\t\t\t\t[contentAfter]=\"after\"\n\t\t\t\t[ariaLabel]=\"ariaLabel\"\n\t\t\t\t[ariaLabelledby]=\"ariaLabelledby\"\n\t\t\t\t[type]=\"type\">\n\t\t\t</ibm-tab-headers>\n\t\t\t<ng-content></ng-content>\n\t\t\t<ng-template #before>\n\t\t\t\t<ng-content select=\"[before]\"></ng-content>\n\t\t\t</ng-template>\n\t\t\t<ng-template #after>\n\t\t\t\t<ng-content select=\"[after]\"></ng-content>\n\t\t\t</ng-template>\n\t\t\t<ibm-tab-headers\n\t\t\t\t*ngIf=\"hasTabHeaders() && position === 'bottom'\"\n\t\t\t\t[skeleton]=\"skeleton\"\n\t\t\t\t[tabs]=\"tabs\"\n\t\t\t\t[cacheActive]=\"cacheActive\"\n\t\t\t\t[type]=\"type\">\n\t\t\t</ibm-tab-headers>\n\t"
                }] }
    ];
    Tabs.propDecorators = {
        position: [{ type: Input }],
        cacheActive: [{ type: Input }],
        followFocus: [{ type: Input }],
        skeleton: [{ type: Input }],
        isNavigation: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        type: [{ type: Input }],
        tabs: [{ type: ContentChildren, args: [Tab, { descendants: false },] }],
        tabHeaders: [{ type: ContentChild, args: [TabHeaders, { static: false },] }]
    };
    return Tabs;
}());
export { Tabs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3RhYnMvIiwic291cmNlcyI6WyJ0YWJzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxlQUFlLEVBQ2YsU0FBUyxFQUVULFlBQVksRUFHWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBR3JEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3Qkc7QUFDSDtJQUFBO1FBZ0NDOzs7V0FHRztRQUNNLGFBQVEsR0FBcUIsS0FBSyxDQUFDO1FBQzVDOztXQUVHO1FBQ00sZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFDN0I7O1dBRUc7UUFDTSxnQkFBVyxHQUFHLElBQUksQ0FBQztRQUM1Qjs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDMUI7O1dBRUc7UUFDTSxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQVM5Qjs7V0FFRztRQUNNLFNBQUksR0FBNEIsU0FBUyxDQUFDO0lBNENwRCxDQUFDO0lBaENBOzs7T0FHRztJQUNILGlDQUFrQixHQUFsQjtRQUFBLGlCQVFDO1FBUEEsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDL0M7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7WUFDcEIsR0FBRyxDQUFDLFFBQVEsR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCwwQkFBVyxHQUFYLFVBQVksT0FBc0I7UUFBbEMsaUJBVUM7UUFUQSxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMzQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQy9DO1FBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO2dCQUNwQixHQUFHLENBQUMsUUFBUSxHQUFHLEtBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLENBQUMsQ0FBQyxDQUFDO1NBQ0g7SUFDRixDQUFDO0lBRUQ7O09BRUc7SUFDSCw0QkFBYSxHQUFiO1FBQ0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Z0JBM0dELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsVUFBVTtvQkFDcEIsUUFBUSxFQUFFLHE0QkEyQlQ7aUJBQ0Q7OzsyQkFNQyxLQUFLOzhCQUlMLEtBQUs7OEJBSUwsS0FBSzsyQkFJTCxLQUFLOytCQUlMLEtBQUs7NEJBSUwsS0FBSztpQ0FJTCxLQUFLO3VCQUlMLEtBQUs7dUJBS0wsZUFBZSxTQUFDLEdBQUcsRUFBRSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUU7NkJBSzNDLFlBQVksU0FBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOztJQWtDNUMsV0FBQztDQUFBLEFBNUdELElBNEdDO1NBN0VZLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRDb250ZW50Q2hpbGRyZW4sXG5cdFF1ZXJ5TGlzdCxcblx0QWZ0ZXJDb250ZW50SW5pdCxcblx0Q29udGVudENoaWxkLFxuXHRPbkNoYW5nZXMsXG5cdFNpbXBsZUNoYW5nZXNcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFRhYiB9IGZyb20gXCIuL3RhYi5jb21wb25lbnRcIjtcbmltcG9ydCB7IFRhYkhlYWRlcnMgfSBmcm9tIFwiLi90YWItaGVhZGVycy5jb21wb25lbnRcIjtcblxuXG4vKipcbiAqIEJ1aWxkIG91dCB5b3VyIGFwcGxpY2F0aW9uJ3MgdGFicyB1c2luZyB0aGlzIGNvbXBvbmVudC5cbiAqIFRoaXMgaXMgdGhlIHBhcmVudCBvZiB0aGUgYFRhYmAgYW5kIGBUYWJIZWFkZXJgIGNvbXBvbmVudHMuXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy10YWJzLS1iYXNpYylcbiAqXG4gKiBgVGFic2AgZXhwZWN0cyBhIHNldCBvZiBgbi10YWJgIGVsZW1lbnRzXG4gKlxuICogYGBgaHRtbFxuICogPGlibS10YWJzPlxuICogXHQ8aWJtLXRhYiBoZWFkaW5nPSd0YWIxJz5cbiAqIFx0XHR0YWIgMSBjb250ZW50XG4gKiBcdDwvaWJtLXRhYj5cbiAqIFx0PGlibS10YWIgaGVhZGluZz0ndGFiMSc+XG4gKiBcdFx0dGFiIDIgY29udGVudFxuICogXHQ8L2libS10YWI+XG4gKiBcdDwhLS0gLi4uIC0tPlxuICogXHQ8aWJtLXRhYiBoZWFkaW5nPSd0YWIxJz5cbiAqIFx0XHR0YWIgbiBjb250ZW50XG4gKiBcdDwvaWJtLXRhYj5cbiAqIDwvaWJtLXRhYnM+XG4gKiBgYGBcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9Y29tcG9uZW50cy10YWJzLS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tdGFic1wiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdFx0PGlibS10YWItaGVhZGVyc1xuXHRcdFx0XHQqbmdJZj1cImhhc1RhYkhlYWRlcnMoKSAmJiBwb3NpdGlvbiA9PT0gJ3RvcCdcIlxuXHRcdFx0XHRbc2tlbGV0b25dPVwic2tlbGV0b25cIlxuXHRcdFx0XHRbdGFic109XCJ0YWJzXCJcblx0XHRcdFx0W2ZvbGxvd0ZvY3VzXT1cImZvbGxvd0ZvY3VzXCJcblx0XHRcdFx0W2NhY2hlQWN0aXZlXT1cImNhY2hlQWN0aXZlXCJcblx0XHRcdFx0W2NvbnRlbnRCZWZvcmVdPVwiYmVmb3JlXCJcblx0XHRcdFx0W2NvbnRlbnRBZnRlcl09XCJhZnRlclwiXG5cdFx0XHRcdFthcmlhTGFiZWxdPVwiYXJpYUxhYmVsXCJcblx0XHRcdFx0W2FyaWFMYWJlbGxlZGJ5XT1cImFyaWFMYWJlbGxlZGJ5XCJcblx0XHRcdFx0W3R5cGVdPVwidHlwZVwiPlxuXHRcdFx0PC9pYm0tdGFiLWhlYWRlcnM+XG5cdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8bmctdGVtcGxhdGUgI2JlZm9yZT5cblx0XHRcdFx0PG5nLWNvbnRlbnQgc2VsZWN0PVwiW2JlZm9yZV1cIj48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8L25nLXRlbXBsYXRlPlxuXHRcdFx0PG5nLXRlbXBsYXRlICNhZnRlcj5cblx0XHRcdFx0PG5nLWNvbnRlbnQgc2VsZWN0PVwiW2FmdGVyXVwiPjwvbmctY29udGVudD5cblx0XHRcdDwvbmctdGVtcGxhdGU+XG5cdFx0XHQ8aWJtLXRhYi1oZWFkZXJzXG5cdFx0XHRcdCpuZ0lmPVwiaGFzVGFiSGVhZGVycygpICYmIHBvc2l0aW9uID09PSAnYm90dG9tJ1wiXG5cdFx0XHRcdFtza2VsZXRvbl09XCJza2VsZXRvblwiXG5cdFx0XHRcdFt0YWJzXT1cInRhYnNcIlxuXHRcdFx0XHRbY2FjaGVBY3RpdmVdPVwiY2FjaGVBY3RpdmVcIlxuXHRcdFx0XHRbdHlwZV09XCJ0eXBlXCI+XG5cdFx0XHQ8L2libS10YWItaGVhZGVycz5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBUYWJzIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25DaGFuZ2VzIHtcblx0LyoqXG5cdCAqIFRha2VzIGVpdGhlciB0aGUgc3RyaW5nIHZhbHVlICd0b3AnIG9yICdib3R0b20nIHRvIHBsYWNlIFRhYkhlYWRlclxuXHQgKiByZWxhdGl2ZSB0byB0aGUgYFRhYlBhbmVsYHMuXG5cdCAqL1xuXHRASW5wdXQoKSBwb3NpdGlvbjogXCJ0b3BcIiB8IFwiYm90dG9tXCIgPSBcInRvcFwiO1xuXHQvKipcblx0ICogU2V0IHRvICd0cnVlJyB0byBoYXZlIGBUYWJgIGl0ZW1zIGNhY2hlZCBhbmQgbm90IHJlbG9hZGVkIG9uIHRhYiBzd2l0Y2hpbmcuXG5cdCAqL1xuXHRASW5wdXQoKSBjYWNoZUFjdGl2ZSA9IGZhbHNlO1xuXHQvKipcblx0ICogU2V0IHRvICd0cnVlJyB0byBoYXZlIHRhYnMgYXV0b21hdGljYWxseSBhY3RpdmF0ZWQgYW5kIGhhdmUgdGhlaXIgY29udGVudCBkaXNwbGF5ZWQgd2hlbiB0aGV5IHJlY2VpdmUgZm9jdXMuXG5cdCAqL1xuXHRASW5wdXQoKSBmb2xsb3dGb2N1cyA9IHRydWU7XG5cdC8qKlxuXHQgKiBTZXQgdG8gYHRydWVgIHRvIHB1dCB0YWJzIGluIGEgbG9hZGluZyBzdGF0ZS5cblx0ICovXG5cdEBJbnB1dCgpIHNrZWxldG9uID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBTZXQgdG8gYHRydWVgIHRvIGhhdmUgdGhlIHRhYkluZGV4IG9mIHRoZSBhbGwgdGFicGFuZWxzIGJlIC0xLlxuXHQgKi9cblx0QElucHV0KCkgaXNOYXZpZ2F0aW9uID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBhcmlhIGxhYmVsIG9uIHRoZSBgVGFiSGVhZGVyYHMgbmF2IGVsZW1lbnQuXG5cdCAqL1xuXHRASW5wdXQoKSBhcmlhTGFiZWw6IHN0cmluZztcblx0LyoqXG5cdCAqIFNldHMgdGhlIGFyaWEgbGFiZWxsZWRieSBvbiB0aGUgYFRhYkhlYWRlcmBzIG5hdiBlbGVtZW50LlxuXHQgKi9cblx0QElucHV0KCkgYXJpYUxhYmVsbGVkYnk6IHN0cmluZztcblx0LyoqXG5cdCAqIFNldHMgdGhlIHR5cGUgb2YgdGhlIGBUYWJIZWFkZXJgc1xuXHQgKi9cblx0QElucHV0KCkgdHlwZTogXCJkZWZhdWx0XCIgfCBcImNvbnRhaW5lclwiID0gXCJkZWZhdWx0XCI7XG5cblx0LyoqXG5cdCAqIE1haW50YWlucyBhIGBRdWVyeUxpc3RgIG9mIHRoZSBgVGFiYCBlbGVtZW50cyBhbmQgdXBkYXRlcyBpZiBgVGFiYHMgYXJlIGFkZGVkIG9yIHJlbW92ZWQuXG5cdCAqL1xuXHRAQ29udGVudENoaWxkcmVuKFRhYiwgeyBkZXNjZW5kYW50czogZmFsc2UgfSkgdGFiczogUXVlcnlMaXN0PFRhYj47XG5cdC8qKlxuXHQgKiBDb250ZW50IGNoaWxkIG9mIHRoZSBwcm9qZWN0ZWQgaGVhZGVyIGNvbXBvbmVudFxuXHQgKi9cblx0Ly8gQHRzLWlnbm9yZVxuXHRAQ29udGVudENoaWxkKFRhYkhlYWRlcnMsIHsgc3RhdGljOiBmYWxzZSB9KSB0YWJIZWFkZXJzO1xuXG5cdC8qKlxuXHQgKiBBZnRlciBjb250ZW50IGlzIGluaXRpYWxpemVkIHVwZGF0ZSBgVGFiYHMgdG8gY2FjaGUgKGlmIHR1cm5lZCBvbikgYW5kIHNldCB0aGUgaW5pdGlhbFxuXHQgKiBzZWxlY3RlZCBUYWIgaXRlbS5cblx0ICovXG5cdG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcblx0XHRpZiAodGhpcy50YWJIZWFkZXJzKSB7XG5cdFx0XHR0aGlzLnRhYkhlYWRlcnMuY2FjaGVBY3RpdmUgPSB0aGlzLmNhY2hlQWN0aXZlO1xuXHRcdH1cblxuXHRcdHRoaXMudGFicy5mb3JFYWNoKHRhYiA9PiB7XG5cdFx0XHR0YWIudGFiSW5kZXggPSB0aGlzLmlzTmF2aWdhdGlvbiA/IG51bGwgOiAwO1xuXHRcdH0pO1xuXHR9XG5cblx0bmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuXHRcdGlmICh0aGlzLnRhYkhlYWRlcnMgJiYgY2hhbmdlcy5jYWNoZUFjdGl2ZSkge1xuXHRcdFx0dGhpcy50YWJIZWFkZXJzLmNhY2hlQWN0aXZlID0gdGhpcy5jYWNoZUFjdGl2ZTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy50YWJzICYmIGNoYW5nZXMuaXNOYXZpZ2F0aW9uKSB7XG5cdFx0XHR0aGlzLnRhYnMuZm9yRWFjaCh0YWIgPT4ge1xuXHRcdFx0XHR0YWIudGFiSW5kZXggPSB0aGlzLmlzTmF2aWdhdGlvbiA/IG51bGwgOiAwO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIHRydWUgaWYgdGhlIG4tdGFiJ3MgYXJlIHBhc3NlZCBkaXJlY3RseSB0byB0aGUgY29tcG9uZW50IGFzIGNoaWxkcmVuXG5cdCAqL1xuXHRoYXNUYWJIZWFkZXJzKCkge1xuXHRcdHJldHVybiB0aGlzLnRhYnMubGVuZ3RoID4gMDtcblx0fVxufVxuIl19