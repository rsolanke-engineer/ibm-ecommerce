/**
 *
 * carbon-angular v0.0.0 | timepicker-select.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Component, Input, HostBinding } from "@angular/core";
import { Select } from "carbon-components-angular/select";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
/**
 * [See demo](../../?path=/story/components-time-picker-select--simple)
 *
 * <example-url>../../iframe.html?id=components-time-picker-select--simple</example-url>
 */
var TimePickerSelect = /** @class */ (function (_super) {
    tslib_1.__extends(TimePickerSelect, _super);
    function TimePickerSelect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.timeSelect = true;
        _this.timePickerSelect = true;
        _this.id = "timepicker-select-" + TimePickerSelect.selectCount++;
        /**
         * Set to true for a loading select.
         */
        _this.skeleton = false;
        /**
         * `light` or `dark` select theme
         */
        _this.theme = "dark";
        _this.timePickerSelectSkeleton = _this.skeleton;
        return _this;
    }
    Object.defineProperty(TimePickerSelect.prototype, "timePickerSelectLight", {
        get: function () {
            return this.theme === "light";
        },
        enumerable: true,
        configurable: true
    });
    TimePickerSelect.decorators = [
        { type: Component, args: [{
                    selector: "ibm-timepicker-select",
                    template: "\n\t\t<label *ngIf=\"!skeleton && label\" [attr.for]=\"id\" class=\"bx--label bx--visually-hidden\">{{label}}</label>\n\t\t<div class=\"bx--select-input__wrapper\">\n\t\t\t<select\n\t\t\t\t#select\n\t\t\t\t[attr.id]=\"id\"\n\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\tclass=\"bx--select-input\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</select>\n\t\t\t<svg ibmIcon=\"chevron--down\" size=\"16\" *ngIf=\"!skeleton\" class=\"bx--select__arrow\"></svg>\n\t\t</div>\n\t",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TimePickerSelect,
                            multi: true
                        }
                    ]
                }] }
    ];
    TimePickerSelect.propDecorators = {
        timeSelect: [{ type: HostBinding, args: ["class.bx--select",] }],
        timePickerSelect: [{ type: HostBinding, args: ["class.bx--time-picker__select",] }],
        id: [{ type: Input }],
        skeleton: [{ type: Input }],
        theme: [{ type: Input }],
        label: [{ type: Input }],
        timePickerSelectSkeleton: [{ type: HostBinding, args: ["class.bx--skeleton",] }],
        timePickerSelectLight: [{ type: HostBinding, args: ["class.bx--select--light",] }]
    };
    return TimePickerSelect;
}(Select));
export { TimePickerSelect };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci1zZWxlY3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci90aW1lcGlja2VyLXNlbGVjdC8iLCJzb3VyY2VzIjpbInRpbWVwaWNrZXItc2VsZWN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBR0wsV0FBVyxFQUVYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuRDs7OztHQUlHO0FBQ0g7SUF3QnNDLDRDQUFNO0lBeEI1QztRQUFBLHFFQStDQztRQXRCaUMsZ0JBQVUsR0FBRyxJQUFJLENBQUM7UUFDTCxzQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFFN0QsUUFBRSxHQUFHLHVCQUFxQixnQkFBZ0IsQ0FBQyxXQUFXLEVBQUksQ0FBQztRQUVwRTs7V0FFRztRQUNNLGNBQVEsR0FBRyxLQUFLLENBQUM7UUFFMUI7O1dBRUc7UUFDTSxXQUFLLEdBQXFCLE1BQU0sQ0FBQztRQUlQLDhCQUF3QixHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUM7O0lBSzdFLENBQUM7SUFIQSxzQkFBNEMsbURBQXFCO2FBQWpFO1lBQ0MsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQztRQUMvQixDQUFDOzs7T0FBQTs7Z0JBOUNELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyxRQUFRLEVBQUUsMGZBYVQ7b0JBQ0QsU0FBUyxFQUFFO3dCQUNWOzRCQUNDLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxnQkFBZ0I7NEJBQzdCLEtBQUssRUFBRSxJQUFJO3lCQUNYO3FCQUNEO2lCQUNEOzs7NkJBRUMsV0FBVyxTQUFDLGtCQUFrQjttQ0FDOUIsV0FBVyxTQUFDLCtCQUErQjtxQkFFM0MsS0FBSzsyQkFLTCxLQUFLO3dCQUtMLEtBQUs7d0JBRUwsS0FBSzsyQ0FFTCxXQUFXLFNBQUMsb0JBQW9CO3dDQUVoQyxXQUFXLFNBQUMseUJBQXlCOztJQUd2Qyx1QkFBQztDQUFBLEFBL0NELENBd0JzQyxNQUFNLEdBdUIzQztTQXZCWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0SG9zdEJpbmRpbmcsXG5cdFRlbXBsYXRlUmVmXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBTZWxlY3QgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9zZWxlY3RcIjtcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5cbi8qKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy10aW1lLXBpY2tlci1zZWxlY3QtLXNpbXBsZSlcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9Y29tcG9uZW50cy10aW1lLXBpY2tlci1zZWxlY3QtLXNpbXBsZTwvZXhhbXBsZS11cmw+XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tdGltZXBpY2tlci1zZWxlY3RcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8bGFiZWwgKm5nSWY9XCIhc2tlbGV0b24gJiYgbGFiZWxcIiBbYXR0ci5mb3JdPVwiaWRcIiBjbGFzcz1cImJ4LS1sYWJlbCBieC0tdmlzdWFsbHktaGlkZGVuXCI+e3tsYWJlbH19PC9sYWJlbD5cblx0XHQ8ZGl2IGNsYXNzPVwiYngtLXNlbGVjdC1pbnB1dF9fd3JhcHBlclwiPlxuXHRcdFx0PHNlbGVjdFxuXHRcdFx0XHQjc2VsZWN0XG5cdFx0XHRcdFthdHRyLmlkXT1cImlkXCJcblx0XHRcdFx0W2Rpc2FibGVkXT1cImRpc2FibGVkXCJcblx0XHRcdFx0KGNoYW5nZSk9XCJvbkNoYW5nZSgkZXZlbnQpXCJcblx0XHRcdFx0Y2xhc3M9XCJieC0tc2VsZWN0LWlucHV0XCI+XG5cdFx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHRcdDwvc2VsZWN0PlxuXHRcdFx0PHN2ZyBpYm1JY29uPVwiY2hldnJvbi0tZG93blwiIHNpemU9XCIxNlwiICpuZ0lmPVwiIXNrZWxldG9uXCIgY2xhc3M9XCJieC0tc2VsZWN0X19hcnJvd1wiPjwvc3ZnPlxuXHRcdDwvZGl2PlxuXHRgLFxuXHRwcm92aWRlcnM6IFtcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcblx0XHRcdHVzZUV4aXN0aW5nOiBUaW1lUGlja2VyU2VsZWN0LFxuXHRcdFx0bXVsdGk6IHRydWVcblx0XHR9XG5cdF1cbn0pXG5leHBvcnQgY2xhc3MgVGltZVBpY2tlclNlbGVjdCBleHRlbmRzIFNlbGVjdCB7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1zZWxlY3RcIikgdGltZVNlbGVjdCA9IHRydWU7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS10aW1lLXBpY2tlcl9fc2VsZWN0XCIpIHRpbWVQaWNrZXJTZWxlY3QgPSB0cnVlO1xuXG5cdEBJbnB1dCgpIGlkID0gYHRpbWVwaWNrZXItc2VsZWN0LSR7VGltZVBpY2tlclNlbGVjdC5zZWxlY3RDb3VudCsrfWA7XG5cblx0LyoqXG5cdCAqIFNldCB0byB0cnVlIGZvciBhIGxvYWRpbmcgc2VsZWN0LlxuXHQgKi9cblx0QElucHV0KCkgc2tlbGV0b24gPSBmYWxzZTtcblxuXHQvKipcblx0ICogYGxpZ2h0YCBvciBgZGFya2Agc2VsZWN0IHRoZW1lXG5cdCAqL1xuXHRASW5wdXQoKSB0aGVtZTogXCJsaWdodFwiIHwgXCJkYXJrXCIgPSBcImRhcmtcIjtcblxuXHRASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1za2VsZXRvblwiKSB0aW1lUGlja2VyU2VsZWN0U2tlbGV0b24gPSB0aGlzLnNrZWxldG9uO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1zZWxlY3QtLWxpZ2h0XCIpIGdldCB0aW1lUGlja2VyU2VsZWN0TGlnaHQoKSB7XG5cdFx0cmV0dXJuIHRoaXMudGhlbWUgPT09IFwibGlnaHRcIjtcblx0fVxufVxuIl19