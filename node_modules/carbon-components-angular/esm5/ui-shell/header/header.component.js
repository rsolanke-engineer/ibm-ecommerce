/**
 *
 * carbon-angular v0.0.0 | header.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Optional, Output, EventEmitter, TemplateRef } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
import { I18n } from "carbon-components-angular/i18n";
/**
 * A fixed header and navigation.
 * Header may contain a Hamburger menu to toggle the side navigation, navigation actions,
 * and global actions (generally in the form of `Panel`s).
 *
 * [See demo](../../?path=/story/components-ui-shell--header)
 *
 * <example-url>../../iframe.html?id=components-ui-shell--header</example-url>
 */
var Header = /** @class */ (function () {
    function Header(i18n, domSanitizer, router) {
        this.i18n = i18n;
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Top level branding. Defaults to "IBM"
         */
        this.brand = "IBM";
        /**
         * Use the routerLink attribute on <a> tag for navigation instead of using event handlers
         */
        this.useRouter = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this._href = "javascript:void(0)";
    }
    Object.defineProperty(Header.prototype, "href", {
        get: function () {
            return this.domSanitizer.bypassSecurityTrustUrl(this._href);
        },
        /**
         * Optional link for the header
         */
        set: function (v) {
            this._href = v;
        },
        enumerable: true,
        configurable: true
    });
    Header.prototype.isTemplate = function (value) {
        return value instanceof TemplateRef;
    };
    Header.prototype.navigate = function (event) {
        if (this.router && this.route) {
            event.preventDefault();
            var status_1 = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status_1);
        }
    };
    Header.decorators = [
        { type: Component, args: [{
                    selector: "ibm-header",
                    template: "\n\t\t<header\n\t\t\tclass=\"bx--header\"\n\t\t\t[attr.aria-label]=\"brand + ' ' + name\">\n\t\t\t<a\n\t\t\t\t*ngIf=\"skipTo\"\n\t\t\t\tclass=\"bx--skip-to-content\"\n\t\t\t\t[href]=\"skipTo\"\n\t\t\t\ttabindex=\"0\">\n\t\t\t\t{{ i18n.get(\"UI_SHELL.SKIP_TO\") | async }}\n\t\t\t</a>\n\t\t\t<ng-content select=\"ibm-hamburger\"></ng-content>\n\t\t\t<ng-template\n\t\t\t\t*ngIf=\"isTemplate(brand)\"\n\t\t\t\t[ngTemplateOutlet]=\"brand\">\n\t\t\t</ng-template>\n\t\t\t<ng-container *ngIf=\"!isTemplate(brand)\" [ngSwitch]=\"useRouter\">\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"false\"\n\t\t\t\t\tclass=\"bx--header__name\"\n\t\t\t\t\t[href]=\"href\"\n\t\t\t\t\t(click)=\"navigate($event)\">\n\t\t\t\t\t<span class=\"bx--header__name--prefix\">{{brand}}&nbsp;</span>\n\t\t\t\t\t{{name}}\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"true\"\n\t\t\t\t\tclass=\"bx--header__name\"\n\t\t\t\t\t[routerLink]=\"route\">\n\t\t\t\t\t<span class=\"bx--header__name--prefix\">{{brand}}&nbsp;</span>\n\t\t\t\t\t{{name}}\n\t\t\t\t</a>\n\t\t\t</ng-container>\n\t\t\t<ng-content></ng-content>\n\t\t</header>\n\t"
                }] }
    ];
    /** @nocollapse */
    Header.ctorParameters = function () { return [
        { type: I18n },
        { type: DomSanitizer },
        { type: Router, decorators: [{ type: Optional }] }
    ]; };
    Header.propDecorators = {
        skipTo: [{ type: Input }],
        name: [{ type: Input }],
        brand: [{ type: Input }],
        href: [{ type: Input }],
        route: [{ type: Input }],
        routeExtras: [{ type: Input }],
        useRouter: [{ type: Input }],
        navigation: [{ type: Output }]
    };
    return Header;
}());
export { Header };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdWktc2hlbGwvIiwic291cmNlcyI6WyJoZWFkZXIvaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdEQ7Ozs7Ozs7O0dBUUc7QUFDSDtJQXVGQyxnQkFDUSxJQUFVLEVBQ1AsWUFBMEIsRUFDZCxNQUFjO1FBRjdCLFNBQUksR0FBSixJQUFJLENBQU07UUFDUCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUNkLFdBQU0sR0FBTixNQUFNLENBQVE7UUExQ3JDOztXQUVHO1FBQ00sVUFBSyxHQUE4QixLQUFLLENBQUM7UUF3QmxEOztXQUVHO1FBQ00sY0FBUyxHQUFHLEtBQUssQ0FBQztRQUUzQjs7V0FFRztRQUNPLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQUVsRCxVQUFLLEdBQUcsb0JBQW9CLENBQUM7SUFLRSxDQUFDO0lBbkMxQyxzQkFBYSx3QkFBSTthQUlqQjtZQUNDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFXLENBQUM7UUFDdkUsQ0FBQztRQVREOztXQUVHO2FBQ0gsVUFBa0IsQ0FBUztZQUMxQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNoQixDQUFDOzs7T0FBQTtJQW1DTSwyQkFBVSxHQUFqQixVQUFrQixLQUFLO1FBQ3RCLE9BQU8sS0FBSyxZQUFZLFdBQVcsQ0FBQztJQUNyQyxDQUFDO0lBRUQseUJBQVEsR0FBUixVQUFTLEtBQUs7UUFDYixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUM5QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsSUFBTSxRQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBTSxDQUFDLENBQUM7U0FDN0I7SUFDRixDQUFDOztnQkF0R0QsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSxZQUFZO29CQUN0QixRQUFRLEVBQUUsOGtDQW1DVDtpQkFDRDs7OztnQkFqRFEsSUFBSTtnQkFGSixZQUFZO2dCQUNaLE1BQU0sdUJBc0daLFFBQVE7Ozt5QkEvQ1QsS0FBSzt1QkFJTCxLQUFLO3dCQUlMLEtBQUs7dUJBSUwsS0FBSzt3QkFZTCxLQUFLOzhCQU1MLEtBQUs7NEJBS0wsS0FBSzs2QkFLTCxNQUFNOztJQW9CUixhQUFDO0NBQUEsQUF2R0QsSUF1R0M7U0FoRVksTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdE9wdGlvbmFsLFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0VGVtcGxhdGVSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gXCJAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyXCI7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuXG4vKipcbiAqIEEgZml4ZWQgaGVhZGVyIGFuZCBuYXZpZ2F0aW9uLlxuICogSGVhZGVyIG1heSBjb250YWluIGEgSGFtYnVyZ2VyIG1lbnUgdG8gdG9nZ2xlIHRoZSBzaWRlIG5hdmlnYXRpb24sIG5hdmlnYXRpb24gYWN0aW9ucyxcbiAqIGFuZCBnbG9iYWwgYWN0aW9ucyAoZ2VuZXJhbGx5IGluIHRoZSBmb3JtIG9mIGBQYW5lbGBzKS5cbiAqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLXVpLXNoZWxsLS1oZWFkZXIpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtdWktc2hlbGwtLWhlYWRlcjwvZXhhbXBsZS11cmw+XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0taGVhZGVyXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGhlYWRlclxuXHRcdFx0Y2xhc3M9XCJieC0taGVhZGVyXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiYnJhbmQgKyAnICcgKyBuYW1lXCI+XG5cdFx0XHQ8YVxuXHRcdFx0XHQqbmdJZj1cInNraXBUb1wiXG5cdFx0XHRcdGNsYXNzPVwiYngtLXNraXAtdG8tY29udGVudFwiXG5cdFx0XHRcdFtocmVmXT1cInNraXBUb1wiXG5cdFx0XHRcdHRhYmluZGV4PVwiMFwiPlxuXHRcdFx0XHR7eyBpMThuLmdldChcIlVJX1NIRUxMLlNLSVBfVE9cIikgfCBhc3luYyB9fVxuXHRcdFx0PC9hPlxuXHRcdFx0PG5nLWNvbnRlbnQgc2VsZWN0PVwiaWJtLWhhbWJ1cmdlclwiPjwvbmctY29udGVudD5cblx0XHRcdDxuZy10ZW1wbGF0ZVxuXHRcdFx0XHQqbmdJZj1cImlzVGVtcGxhdGUoYnJhbmQpXCJcblx0XHRcdFx0W25nVGVtcGxhdGVPdXRsZXRdPVwiYnJhbmRcIj5cblx0XHRcdDwvbmctdGVtcGxhdGU+XG5cdFx0XHQ8bmctY29udGFpbmVyICpuZ0lmPVwiIWlzVGVtcGxhdGUoYnJhbmQpXCIgW25nU3dpdGNoXT1cInVzZVJvdXRlclwiPlxuXHRcdFx0XHQ8YVxuXHRcdFx0XHRcdCpuZ1N3aXRjaENhc2U9XCJmYWxzZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJieC0taGVhZGVyX19uYW1lXCJcblx0XHRcdFx0XHRbaHJlZl09XCJocmVmXCJcblx0XHRcdFx0XHQoY2xpY2spPVwibmF2aWdhdGUoJGV2ZW50KVwiPlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiYngtLWhlYWRlcl9fbmFtZS0tcHJlZml4XCI+e3ticmFuZH19Jm5ic3A7PC9zcGFuPlxuXHRcdFx0XHRcdHt7bmFtZX19XG5cdFx0XHRcdDwvYT5cblx0XHRcdFx0PGFcblx0XHRcdFx0XHQqbmdTd2l0Y2hDYXNlPVwidHJ1ZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJieC0taGVhZGVyX19uYW1lXCJcblx0XHRcdFx0XHRbcm91dGVyTGlua109XCJyb3V0ZVwiPlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiYngtLWhlYWRlcl9fbmFtZS0tcHJlZml4XCI+e3ticmFuZH19Jm5ic3A7PC9zcGFuPlxuXHRcdFx0XHRcdHt7bmFtZX19XG5cdFx0XHRcdDwvYT5cblx0XHRcdDwvbmctY29udGFpbmVyPlxuXHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdDwvaGVhZGVyPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIEhlYWRlciB7XG5cdC8qKlxuXHQgKiBJRCBpbiB0aGUgbWFpbiBib2R5IGNvbnRlbnQgdG8ganVtcCB0by4gVXNlZCBieSBrZXlib2FyZCBhbmQgc2NyZWVuIHJlYWRlciB1c2VycyB0byBza2lwIHRoZSBoZWFkZXIgY29udGVudC5cblx0ICovXG5cdEBJbnB1dCgpIHNraXBUbzogc3RyaW5nO1xuXHQvKipcblx0ICogTGFiZWwgdGhhdCBzaG93cyB0byB0aGUgcmlnaHQgb2YgdGhlIGBicmFuZGAgdGV4dC4gR2VuZXJhbGx5IGEgcHJvZHVjdCBuYW1lLlxuXHQgKi9cblx0QElucHV0KCkgbmFtZTogc3RyaW5nO1xuXHQvKipcblx0ICogVG9wIGxldmVsIGJyYW5kaW5nLiBEZWZhdWx0cyB0byBcIklCTVwiXG5cdCAqL1xuXHRASW5wdXQoKSBicmFuZDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiA9IFwiSUJNXCI7XG5cdC8qKlxuXHQgKiBPcHRpb25hbCBsaW5rIGZvciB0aGUgaGVhZGVyXG5cdCAqL1xuXHRASW5wdXQoKSBzZXQgaHJlZih2OiBzdHJpbmcpIHtcblx0XHR0aGlzLl9ocmVmID0gdjtcblx0fVxuXG5cdGdldCBocmVmKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0VXJsKHRoaXMuX2hyZWYpIGFzIHN0cmluZztcblx0fVxuXG5cdC8qKlxuXHQgKiBBcnJheSBvZiBjb21tYW5kcyB0byBzZW5kIHRvIHRoZSByb3V0ZXIgd2hlbiB0aGUgbGluayBpcyBhY3RpdmF0ZWRcblx0ICogU2VlOiBodHRwczovL2FuZ3VsYXIuaW8vYXBpL3JvdXRlci9Sb3V0ZXIjbmF2aWdhdGVcblx0ICovXG5cdEBJbnB1dCgpIHJvdXRlOiBhbnlbXTtcblxuXHQvKipcblx0ICogUm91dGVyIG9wdGlvbnMuIFVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgcm91dGVgXG5cdCAqIFNlZTogaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9yb3V0ZXIvUm91dGVyI25hdmlnYXRlXG5cdCAqL1xuXHRASW5wdXQoKSByb3V0ZUV4dHJhczogYW55O1xuXG5cdC8qKlxuXHQgKiBVc2UgdGhlIHJvdXRlckxpbmsgYXR0cmlidXRlIG9uIDxhPiB0YWcgZm9yIG5hdmlnYXRpb24gaW5zdGVhZCBvZiB1c2luZyBldmVudCBoYW5kbGVyc1xuXHQgKi9cblx0QElucHV0KCkgdXNlUm91dGVyID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIEVtaXRzIHRoZSBuYXZpZ2F0aW9uIHN0YXR1cyBwcm9taXNlIHdoZW4gdGhlIGxpbmsgaXMgYWN0aXZhdGVkXG5cdCAqL1xuXHRAT3V0cHV0KCkgbmF2aWdhdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8UHJvbWlzZTxib29sZWFuPj4oKTtcblxuXHRwcm90ZWN0ZWQgX2hyZWYgPSBcImphdmFzY3JpcHQ6dm9pZCgwKVwiO1xuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHB1YmxpYyBpMThuOiBJMThuLFxuXHRcdHByb3RlY3RlZCBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcixcblx0XHRAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXIpIHsgfVxuXG5cdHB1YmxpYyBpc1RlbXBsYXRlKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWY7XG5cdH1cblxuXHRuYXZpZ2F0ZShldmVudCkge1xuXHRcdGlmICh0aGlzLnJvdXRlciAmJiB0aGlzLnJvdXRlKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Y29uc3Qgc3RhdHVzID0gdGhpcy5yb3V0ZXIubmF2aWdhdGUodGhpcy5yb3V0ZSwgdGhpcy5yb3V0ZUV4dHJhcyk7XG5cdFx0XHR0aGlzLm5hdmlnYXRpb24uZW1pdChzdGF0dXMpO1xuXHRcdH1cblx0fVxufVxuIl19